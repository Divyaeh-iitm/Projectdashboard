import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import re
from scipy.stats import skew
from io import BytesIO
import itertools
from st_aggrid import AgGrid, GridOptionsBuilder
from PIL import Image
import base64
import plotly.graph_objects as go

LOGO_BASE64 = """

"""

DEFAULT_MAPPING = b'PK\x03\x04\x14\x00\x06\x00\x08\x00\x00\x00!\x00o m\x99\xae\x01\x00\x00\x16\x08\x00\x00\x13\x00\x08\x02[Content_Types].xml \xa2\x04\x02(\xa0\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xcc\x95\xcbn\xdb0\x10E\xf7\x05\xfa\x0f\x02\xb7\x85D\'-\x8a\xa2\xb0\xec\x85\x93\xee\xda\x06h\xfa\x01\x13rl\t\xe6\x0b\x9cIb\xff})\xfa\x01#P\xad\x18q\x90lDH\xe4\xdc{D\x0eg\xc6\xd3\x955\xc5\x03Fj\xbd\xab\xc5E5\x12\x05:\xe5u\xeb\x16\xb5\xf8{\xfb\xa3\xfc&\nbp\x1a\x8cwX\x8b5\x92\x98N>~\x18\xdf\xae\x03R\x91\xa2\x1d\xd5\xa2a\x0e\xdf\xa5$\xd5\xa0\x05\xaa|@\x97f\xe6>Z\xe0\xf4\x1a\x172\x80Z\xc2\x02\xe5\xe5h\xf4U*\xef\x18\x1d\x97\xdci\x88\xc9\xf8\n\xe7po\xb8\xb8^\xa5\xcf\x1b\x92\x88\x86D1\xdb,\xec\xbcj\x01!\x98V\x01\'R\xf9\xe0\xf4\x13\x97r\xebP\xa5\xc8\xbc\x86\x9a6\xd0\xa7\x84!d\xafC7\xf3\x7f\x83m\xdc\xef\xb45\xb1\xd5X\xdc@\xe4_`\x13\x86\\\x19\xf9\xe8\xe3\xf2\xce\xfbeu\\\xa4\x87\xd2\xcf\xe7\xadB\xed\xd5\xbdM;PQ\x88\x08\x9a\x1aD\xb6\xa6\xcace\xa1u;\xee#\xfey1\xc9<\\\x9c\x19\xa4\xfb\xbf,|"\xc7\xe5;\xe1\xf8\xfcN8\xbe\xbc\x11\x07\xa7{\x882?_\x9e\x1aYf \x11\x88\xd7\x06\xe9\xdc\xd7!\x8b\x0e97\x10Q\xff\xe1\x98*\xd6\xd9\x01\x0e\xb5\x078,2h`x\x8d\x92\xf0s\xab=\x80\xa0\xc0\xa8Y\x93\xaa\xc7\x99\x19\xf6\xbaC\xd5\x00\xefpW\xc1I2\xd02\x80{VVX*7\x85\xb1z<\xd0\xd8+\x9c\xe4{\xa8\xf0\x9c\xe4\xef\xf7>f\x99\xaa\xf7M\xf4\x81R\x1f\x8bx\xfa^\xef\x1aU\x17]\x86$\x84\x91[\xdc\xb7\xaa\xbe\x92\xbfwL=\xf0\xc5\x87\x9b\xcfH\xa3\xee\xf1\x96\xb9\xabO\xfe\x01\x00\x00\xff\xff\x03\x00PK\x03\x04\x14\x00\x06\x00\x08\x00\x00\x00!\x00i\x8a a\x1d\x01\x00\x00\xe1\x02\x00\x00\x0b\x00\x08\x02_rels/.rels \xa2\x04\x02(\xa0\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac\x92QK\xc30\x14\x85\xdf\x05\xffC\xc8\xfb\x9au\x8a\x88\xac\xdd\x8b\x08{\x13\xa9?\xe0.\xb9\xedJ\x9b\xdc\x90\\\xb5\xfb\xf7\xa6\xd3\xe9\ns\x08\xfa\x98\xe4\xe4\xe4;\xe7f\xb9\x1al/^1\xc4\x96\\!\xf3l.\x05:M\xa6uM!\x9f\xab\x87\xd9\xad\x14\x91\xc1\x19\xe8\xc9a!w\x18\xe5\xaa\xbc\xbcX>a\x0f\x9c.\xc5m\xeb\xa3H..\x16r\xcb\xec\xef\x94\x8az\x8b\x16bF\x1e]:\xa9)X\xe0\xb4\x0c\x8d\xf2\xa0;hP-\xe6\xf3\x1b\x15\x8e=d9\xf1\x14kS\xc8\xb06WRT;\x9f^\xfe\x8b\xb7\xb2\xc8`\x80Ai\n8\xf3!\x91\x05nS\x16QAh\x90\x0biH?\xa6\xed\xb8Wd\x89Z\xaa\xd3@\x8b\x1f\x80l\xab\x03E\xaa9\xd3d\x15\xd5u\xab\xc7\x98y>\x8d\xa9\xdep\x83\x03\xa3\x1b\x1bg\x88\x9d\x07w\xcc1\xf4\x13ET_\x9asP\xf9\xef[\xfa \xbb\'\xfdb\xd1\xf1\x89A|\xb2\x1f\x14\xdf\x15\x8dh\x14\xba\rQw\x8e\xe5\xfa?Y\xf6U\x194\xe7g\x06\xde\x1f\x88\xd4\xe4c\x96\xef\x00\x00\x00\xff\xff\x03\x00PK\x03\x04\x14\x00\x06\x00\x08\x00\x00\x00!\x00A\x1aB\xa8\xdb\x04\x00\x00\xab\r\x00\x00\x0f\x00\x00\x00xl/workbook.xml\xacV[O\xe38\x14~_i\xffC6\x9a\xd7\x908\x97^"\xca\x886\xcd\xd0\x19\n\x9d\xd2\x85\x17\xa4\xc8\xa4n\xe3%\x89;\x8eC\x8b\xd0\xfc\xf7=v\x9b\x92R\xb4\n3\x8b\xc0\xc1\xf69\x9f\xcf\xfd\x9c\xd3\xcf\x9b,\xd5\x9e\x08/(\xcb{::\xb1t\x8d\xe41\x9b\xd3|\xd9\xd3\xff\x9e\x85FG\xd7\n\x81\xf39NYNz\xfa3)\xf4\xcfg\x7f\xfeq\xbaf\xfc\xf1\x81\xb1G\r\x00\xf2\xa2\xa7\'B\xac|\xd3,\xe2\x84d\xb88a+\x92\xc3\xcd\x82\xf1\x0c\x0b\xd8\xf2\xa5Y\xac8\xc1\xf3"!Dd\xa9i[V\xcb\xcc0\xcd\xf5-\x82\xcf\x9b`\xb0\xc5\x82\xc6$`q\x99\x91\\lA8I\xb1\x00\xf1\x8b\x84\xae\x8a\n-\x8b\x9b\xc0e\x98?\x96+#f\xd9\n \x1ehJ\xc5\xb3\x02\xd5\xb5,\xf6G\xcb\x9cq\xfc\x90\x82\xda\x1b\xe4i\x1b\x0e\xbf-\xf8C\x16,v\xf5\x12\\\x1d=\x95\xd1\x98\xb3\x82-\xc4\t@\x9b[\xa1\x8f\xf4G\x96\x89\xd0\x81\t6\xc76h\x86\xe4\x9a\x9c<Q\xe9\xc3\xbdT\xbc\xf5\x8bR\xb5\xf6X\xadW0d\xfd6\x1a\x82\xd0R\xb1\xe2\x83\xf1~\x11\xcd\xdb\xcbf\xebg\xa7\x0b\x9a\x92\xdbm\xe8jx\xb5\xba\xc2\x99\xf4T\xaak).\xc4pN\x05\x99\xf7\xf46l\xd9\x9a\x1c\x1c\xf0r\xd5/i\n\xb7v\xa7\xedX\xbay\xb6\x0f\xe7\t\xd7\xe6d\x81\xcbT\xcc \x90+x\xc8\x8cV\xabk{\x92\x12\x02\xe3<\x15\x84\xe7X\x90\x01\xcb\x05\xc4\xe1N\xaf\xdf\x8d9\x85=H\x18D\xb86%?J\xca\t$\x16\xc4\x17\xe8\n+\x8e}\xfcPL\xb0H\xb4\x92\xa7==\xf0\xef\xc7\x82\xc4\x896\xe1\xec\x1f\x12\x8b\xfb;HI\xc8[\x8dlb\x92\x16\xf7a\xca\x18\x87\xfd\xfd\xd4\xbe\xaf\x05+>\xce\x8c\x0f\x84+\x8e\xa5\rL0\xc2V\xd0\xed\xffo\r\x02\xf2r\xbf\n\xc9\x89\xe0\x1a\xfc?\n.\xc1-7\xf8\t\x9c\x04\xa10\xdf\xe5\xf0\x08\xbc\x80\x9c(\x8f\xb9\x8f\xa2\x97s\xab\xefz\x81snt\x87N`\xb8\x0eBF\xc7\x1eZF\xe8\x82\xf9;N\xdb\x0e:\xeeOP\x86\xb7\xfc\x98\xe1R$;\xffK\xe8\x9e\xee\x82\xb3\x8f\xae\xc6xS\xdd \xcb/\xe9\xfcU\x8c\x17k\xf7c\xc8\xef\x9b\xa5\xba\xfb)\x15\x96\x95\xee\x96\x92u\xf1\x1a)r\xabm\xeeh>g\xeb\x9en \x0b*\xe5\xf3\xe1v\xad.\xef\xe8\\$\x10j\x8e\xedAFm\xcf.\x08]& 1\xb2]y\x88cA\x9f\xc8\x0c?\xf4tG\xaa`K9{\xfaK\xcb\xf5:N\x88@\xb4\x9650\xdc6X\xa2\xdfo\x9d\x1b\xb6\xdd\xee\xb4]\xc7\xb1\x9c\xf3\xae\x92\xcf\xac\t\xa8*,\x08\xaa\xbeZ\xae\xb2b\x94\x17\x82\x97\xf0\n\x94I\xa3\x10D\x16Ju/\xcd\x0fOr_\xbe\xc7Gs$\xb5\xadsNp\xfc\x88\x97P\xf5_\xe9\xa1\xf4\xed\xe9\xed\xb7\xf4U\xd4\xd5\xe8Q\x8d\xde9\xa2\xc7iA\xb4\x98@\xed\xcd\x975&\xaf\xc6\xe4\xaa\x98\xab\xf4\x82\xfc\xa49\x99\xcbt\x07-k\xbb\x9d\xae\x03\xc21Dt4\x83\xf2\xa0\x9fU\xf2\xff\xf5i\xfc\xc9\xf5aA\x96uj\xd6\xb8\xde\x83\x08 s\x8a:\xef\xb5\xe4\xbdn\xc4\x1bJ\x85\xa2J\xa1\xda\xfbS\x891m\x86\xc1J\xe8\xb8\xd2[u!\x02\t\x104\x02\x18\x13\x81\xd3h\x8a\x95U#h\xdf\xd1\x92\xd34\x8dd\xd7>Pl"1\'\x8d0\xafX\x1em\xa3\xa8\xe4\x00\xbe\xc6iz\x00\xf5UB}m\x04u-\x12\xc2\xeb\xaa\xddH\xde\x9bF\xbc\x13\x98\x19\x84\x8c\x95\x9ai\xbfK\xf6\xef\xcd\xd8es \xb2.\xd6\x01.%\xc0e#\x80)\x98\x96\xe6\xc0\xaf,\x101\x1e\x05\x14\xaf\x12\x8e\x97\x99:\xa9\xc3\x0e%\xec\xb0\x11\xec\x8d\xcaOeY\xe8*1\'ou\xbc\x90X\x17\x1f\xc5Z@.\x10\xe5\xf6\xba\\_$\xd6\x97\x8fb\x8dY\xce`BJh\\\xc7\xfa&\xb1\xbe}\x14kJh\x0e\xc3a\x0c=6\x17u\xb8\x91\x84\x1b5\x82\xbb\x83\x0e\xccW\x9c1\xa8\x07\x07\xde\x0c%F\xd8\x0cC\x95\xe8\x838\xbe\x92\xdcW\xefp\xd7\xab\x06T\x9e\x18\xa71\x8c\x0b\xf2\xa3\x9aX\x17YvWV*\xb2\x11\x97\x85P_\xe8\xd4\x14\xea8r\xad\xf3\xb6\xd5u\rk\xe8x\x86\xdb\xe9\xdaF\xc7ulc\xe0\x06\xf6\xd0k\x0f\x83a\xdf\x93mM\x8e\xd2\xfe\xff1P\xaa\x81\xc1\xafft)e\x82\xb9\x98q(\xe6`\xab)Y\xf4q\x01}XU{\x13\xe4\xad\x0b\xdb\xf7:}\xcb\x01\x11\xdd\x10\x85\x86\x8b\xba\xaa\xe9\xb8\x86\x17\x84\x8e\xd7F\xc1`\xe8\x85\xaf\xc2J\xf5\x17\xbf8\xceuL\xc5M\xb0(a\xd4\x91S\x8e\xda\xfbr\rw\xa7\xfb\xc3\xc5\xf6`W\xe4\x0fF\x16\x7f\x1aH\xbb\xef\xb8\xff\x8b\xf0\x06\xb4\x87\xae\xd0\x8c8\xbcmH8\xb8\x1a\xcf\xc6\ri/\x87\xb3\xe8.T\r\xed]m\xb7\xde\x90\xab\x8a!\xb3\xf2\xe1\xd9\xbf\x00\x00\x00\xff\xff\x03\x00PK\x03\x04\x14\x00\x06\x00\x08\x00\x00\x00!\x00DY\x84\x93-\x01\x00\x00n\x05\x00\x00\x1a\x00\x08\x01xl/_rels/workbook.xml.rels \xa2\x04\x01(\xa0\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xbc\x94\xcbj\xc30\x10E\xf7\x85\xfe\x83\xd1\xbe\x91\xed\xa4\xe9\x83\xd8Y\xb4\x14\xb2\xe8\xa6M?`\x90\xc7\x0fbKF3}\xf8\xef+\xdc\xd6N \xa8\x1b\xe3\x8d`F\xe8\xde\xc3\x1dI\x9b\xedWS\x07\x1fh\xa92:\x11\xd1"\x14\x01je\xb2J\x17\x89x\xdb?]\xdd\x8a\x80\x18t\x06\xb5\xd1\x98\x88\x0eIl\xd3\xcb\x8b\xcd\x0b\xd6\xc0\xee\x10\x95UK\x81S\xd1\x94\x88\x92\xb9\xbd\x97\x92T\x89\r\xd0\xc2\xb4\xa8\xddNnl\x03\xecJ[\xc8\x16\xd4\x01\n\x94q\x18\xae\xa5=\xd6\x10\xe9\x89f\xb0\xcb\x12aw\x99\xf3\xdfw\xads\xfe_\xdb\xe4y\xa5\xf0\xd1\xa8\xf7\x065\x9f\xb1\x90T"\xf232d\xc0\xe0\x84\xc1\x16\xc8\x89h~;\x0b\x07+\xe4y\x8e\xe5\x94\x1c\x9f\xc6\x1ez\x96\x91ah\xd1\x0f\xe5\xd2\x07s3m(`1{e\xebfN#\x10\x95Gm\x1fL<s2\xb1\x0f&\x9a\x19&\xf2\xc1\xac\'\x1d\x13w\xb5{|\xc3\xa5\xa5\xbe\xf6\xd9_Oi\xcf\xeeI\xe3\xe8\xde\x97\xb2_\xbd\x11\xacf\x9e\xc7\xca\x17\xc8\xdd\x940\nj\xf5PB\xa5\xc7P\x86\xd6\x1f\x84<\xf9%\xd3o\x00\x00\x00\xff\xff\x03\x00PK\x03\x04\x14\x00\x06\x00\x08\x00\x00\x00!\x00\xb7\xd0\x07\xf4\xc6\x03\x00\x00\x8e\n\x00\x00\x18\x00\x00\x00xl/worksheets/sheet1.xml\x9c\x93\xdb\x8e\x9b0\x10\x86\xef+\xf5\x1d,\xdf\x83\x81\x90\x90\xa0\x90U\x8e\xea\xdeUU\x0f\xd7\x8e\x19\x82\x15\x8c\xa9\xed\x9cT\xf5\xdd;8Mv\xa5\xdcD+\x013`\xfb\x9b\x7f\xf0\xef\xe9\xcbY5\xe4\x08\xc6J\xdd\x164\x0e#J\xa0\x15\xba\x94\xed\xae\xa0?\xbeo\x821%\xd6\xf1\xb6\xe4\x8dn\xa1\xa0\x17\xb0\xf4e\xf6\xf9\xd3\xf4\xa4\xcd\xde\xd6\x00\x8e \xa1\xb5\x05\xad\x9d\xebr\xc6\xac\xa8Aq\x1b\xea\x0eZ\x1c\xa9\xb4Q\xdc\xe1\xab\xd91\xdb\x19\xe0\xa5_\xa4\x1a\x96D\xd1\x88).[z%\xe4\xe6\x19\x86\xae*)`\xa5\xc5AA\xeb\xae\x10\x03\rw\xa8\xdf\xd6\xb2\xb37\x9a\x12\xcf\xe0\x147\xfbC\x17\x08\xad:Dle#\xdd\xc5C)Q"\x7f\xdd\xb5\xda\xf0m\x83}\x9f\xe3\x94\x0br6x%x\x0fne\xfc\xf7\x87JJ\n\xa3\xad\xae\\\x88dv\xd5\xfc\xd8\xfe\x84M\x18\x17w\xd2c\xffOa\xe2\x94\x198\xca~\x03\xdfP\xc9\xc7$\xc5\xc3;+y\x83\r>\x08\x1b\xdda\xfd\xef2\xf9A\x96\x05\xfd\xb3\x1e-\xd7\x93d\xb8\x0c&Y6\x08\xd2\xd5<\n\xe6Y\xb2\x08\xb2q\xb2\x98\xaf7Y\x9cN\xa2\xbft6-%\xeep\xdf\x151P\x15t\x1e\xe7\xcbx@\xd9l\xea\r\xf4S\xc2\xc9\xbe\xcbI\xef\xc7\xad\xd6\xfb~\xe0\x15\xebD\x88\xb0\xd0\x80\xe8\x9dA8\x86#,\xa1i\n\xba\x88G\xe8\xe9\xdf\x9e\xda\xe7\x88dw\xe6\xfb\xfc\xc6\xdfx\x0f\x7f5\xa4\x84\x8a\x1f\x1a\xf7M\x9f\xbe\x80\xdc\xd5\x0e\x0fL\x1a\xa6\xd8[o\x8e\xbc\xbc\xac\xc0\nt%\x16\x0f\xbdR\xa1\x1bd\xe0\x93(\xd9\x9f.4\x15?\xfbx\x92\xa5\xab1\xcb\xc2$\x1egCJ\xb6`\xddF\xf6DJ\xc4\xc1:\xad~\xfd\x9f\xd2\xeb\xbb#pW<\x02\xe3\r\x11\x0f\xc2\xe10\x1dy\xca\xe3J\xe65\xfc\x03\x00\x00\xff\xff\x00\x00\x00\xff\xff\xa4T[n\x830\x10\xbc\n\xf2\x01\x00?x$\x02\xa4\xd2\\\x04Q$\xaaJI\x15P\xda\xde\xbe\xbb\xd8\xc2^\xd7A\xa4\xf9\x83\xd1xgg\xbd\x9ej\x1a\x87a>us\xd7T\xd7\xcbWt\xad\x19g\xd1\xf4\xd9\x9d\'\xf8:J\x16\x8d3|d,\x9a\xc7\xf7\xfe\xa3\xbd\xe0\x1f\x8b\xbe\xb9\xea\xfa\xe3\xdb\xcfi\x98\xfa\xe1\x0cX\x1a\xcb\x8c5U\x8f\x05^\xb0B\xcd\xf2\x12\x0e\xd5l\x02\xf8\xd6d\xa2JnM\x95\xf4\x86\xd3\xae\x9c\x04PP^\xe5\x05\x95\x0f)\xadB\xc8\xad\x99\x84.W!\xa5<!\xcd\x11\xcam&\xa7\x9cW\xc3\x91\xcco\x06*\xbb\xb3\xd8l\x06\xb9\xd0\x8c\xc2"\xcb\x1cZ\x8d\x88\xdcm/[\xa5\x89kh\xef\xc9\xa1c\x05\x90\xcf\xac\xbcFD\xf9\xc7\x15\xdc\xe6nW\xc8\xf5G|\xf0F\xac9\xe2\xe0\xfa,\xc2>a\x16O\xfa\xc4\n\xd4\xa7F\x02>\x8b\x07|"\xd7\xf7\xe9\xadI\xab9\xd4g\x19\xf6\t\xbb\xbf{\xc4\xc8\xad\x99pnN#2uw6\r\x0b\xc1\xd0\xfd\x81*\x19\xc3Bo\xee*\x9e\xa2\x92\x1a\xa1\x92<,\xc9\xa1\xaf\xdd\xe6\x162\x952\x90\x84\x08\xb0\xcf\xf6\x9eV \x8dD\x19\xc3\x806\xfdq\x1d/\xeeL\rD\x1d\xca;\x0e\x1f\t!n\xd2\xc3\xb9?\x03Q-\x1bL\xe4\xe5s/c\xfe\x93\xb7&h\n\xfb\xf6\x97\xaa\xb0\xcf\xd0\x9b\xcd`?{\x12\x1b\xfe\xbf\x00\x00\x00\xff\xff\x00\x00\x00\xff\xffD\x8dQ\n\xc20\x10D\xaf\xb2\xec\x01l\x83\x88 i\xa0\xf6\xdbCD\xdd$\xa5i\xb7lV\xbc\xbe\xb6\x10\xfd\x9b\xf7\x98a\xecL\x12i\xa0\x9c\x0b<\xf8\xb5h\x87\x06\x9d\xfdY\x10\n\x1d\xf6\xe6r5\xd88\xdb\xfc\xeb\xce\xae>\xd2\xcdK\x1c\x97\x02\x99\xc2w\xda\x1e\xce\x082\xc6T\xb3\xf2\xba\xdb\x13\xc2\x9dUy\xae\x94\xc8?I6:"\x04f\xad\xb0\x9d\xbcY\xa6\x92\x88\xd4}\x00\x00\x00\xff\xff\x03\x00PK\x03\x04\x14\x00\x06\x00\x08\x00\x00\x00!\x00~\x06\xb0\x82\\=\x00\x00\xba\xcf\x01\x00\x18\x00\x00\x00xl/worksheets/sheet2.xml\x9cT]\x8f\xda0\x10|\xaf\xd4\xff\x10\xf9\x9d$NB\x08\x88p\xba\xe3\x8e\xf6\xa4>T\xa7\xb6\xf7l\x1c\x07\xacK\xe2\xd46\x07\xa8\xea\x7f\xef\xda\xf9\xa2BB\xd1I\xc0.\xe0\x99\xd9\xf5\xcefyw*\x0b\xe7\x9dI\xc5E\x95"\xec\xfa\xc8a\x15\x15\x19\xafv)\xfa\xf9c3I\x90\xa34\xa92R\x88\x8a\xa5\xe8\xcc\x14\xba[}\xfe\xb4<\n\xf9\xa6\xf6\x8ci\x07\x18*\x95\xa2\xbd\xd6\xf5\xc2\xf3\x14\xdd\xb3\x92(W\xd4\xac\x82\x7fr!K\xa2\xe1\xab\xdcy\xaa\x96\x8cd\x16T\x16^\xe0\xfb\xb1W\x12^\xa1\x86a!\xc7p\x88<\xe7\x94=\nz(Y\xa5\x1b\x12\xc9\n\xa2\xa1~\xb5\xe7\xb5\xea\xd8J:\x86\xae$\xf2\xedPO\xa8(k\xa0\xd8\xf2\x82\xeb\xb3%ENI\x17\xcf\xbbJH\xb2-\xa0\xef\x13\x8e\x08uN\x12^\x01\xbc\xc3N\xc6\xfe~\xa5Tr*\x85\x12\xb9v\x81\xd9kj\xben\x7f\xee\xcd=B{\xa6\xeb\xfeG\xd1\xe0\xc8\x93\xec\x9d\x9b\x01\x0eT\xc1\xc7J\xc2\xd3\x9e+\x18\xc8\xc2\x0f\x92\xc5=\x99\xb9.\xb98\xf0,E\x7f\xd6\xfef\x83\xef\x1f\xfc\xc9<\\\xe3It?\x85,N\xfc\xc94\x88\x9f\xa2\xf0a\x9e<\x05\xb3\xbfh\xb5\xcc8L\xd8t\xe5H\x96\xa7\xe8\x1e/\xd6\xaf\xd8\xf7\x91\xb7ZZ\x0b\xfd\xe2\xec\xa8.rG\x8b\xfa\x1b\xcb\xf5\x9a\x15E\x8a\xbe`\xe4\x18\x8bn\x85x3\'\x9fA\xda\x07V\xc5\nF\x8dY\x1c\x02\xe1\x9d5\xa7_0\x1cW\xbf\xad\x90\xc9A\xc3\xebE.\xf3Npcm\xfd]:\x19\xcb\xc9\xa1\xd0/\xe2\xf8\x95\xf1\xdd^\xc3\x0eEn\x04\xed\x1a\xbf,\xb2\xf3#S\x14\x8c\n\xe2nhh\xa9(\x80\x03>\x9d\x92\x9b\x85\x03\x9f\x91\x93\x8dG\x9e\xe9}\x8a\x127I\xe2\x19NfS\xb3xg\xe3=[O\x0f\x81\xc1X\x08\xc4\x16\x12\x02w\x18\xf8!\x0e\x00\xb3eJo\xb8\xa9\x039\xf4\xa0\xb4(_\x1b\xe2\xffY\xa0D\xcb\x02\xb1e\xc1\xf8B\xf9\x06\x124,\x12b\x87\x9c\x8eC\xc6-\x12b\x87\x0c]\xec\xcfC\xd3\xeb\xc8\xbag-\x07\xc4\x8e\xc3\x1f\xa7\x0e\x0f2[7\xc4\xbe\xe3\x9bW4o\x01\x10\x07\xa98\x8e\xfc\xd8\xdc\xf3\x8d\x1b\xc2\xf0\x10m\xa6\n\xc9\xd0\xe90\xd7[\xd8\xde\x11\xc6\xc0\xed\xe4\xb0\x1bEx\x84ng\r<x\xc3\x18\xfb\x96\x1clfS*$\xad\\\x00\xf3\x199\r\xdc\xd9\xc8$\xc3%\x8d\xab\xb6\xb3\x03\xbe\xf0C0n\x96\xb8\x1b\xa6I\xfa\xb2\xdd\xe94\x8a\xed\xe2\\w\xec\xd9\xc5\xfb\x07\x00\x00\xff\xff\x00\x00\x00\xff\xff\x94\x9d\xdbr\xdc\xd6\xb9u_\xc5\xa5\xab\xfd\xdfl[\xa4\x0e\x89\xcbv\xd5Z@w\xa3\x0fh\xa0\xd1\xe7\xbeq\xa9\x149VmYJ\xd1J\xb2\xf7\xdb\xff\x13$hbaL#\xcd\xbbd`\x02<\xcc\x0f\xc3\x00\xf5Q\xfa\xe1\xf7_?|\xf8\x9a\xbf\xfb\xfa\xee\xa7\x1f\xee\xbe\xfc\xfb\x9b\xbb\x1f_\xbc|\xf1\xcd\xef\xffx\xf7\xf9w\xfd\xaf\xef_~\xa7\xff\xf7\xeb\xd7\x1f_\xdc~\xf7\xe2\x9b\xf7\xff\xfc\xfd\xeb\x97\xdf\x8a\x0f\x1f\xff\xde\x12\x1d\xf8\xdf\x97\xaf\xde\xbd\xff\xfeo\xff\x97\x7f\xf8\xfd\xfd\x87\xcfb\xdf\xfd\xf7\xed\x8b\x9f~x\xdf^%\xb4\x97\xf9\xf1\xc5\x9b\xbf\xbe\xf8F\x07~\x17\xfe\xd7O\xaf\xdf\xfc\xf0\xed\xbf~\xfa\xe1\xdb\xf7]&>d\xde~\xf7\xe2\xdb\x8e\xe4\x0f\xe4\xf6m\xef\xac\xdb\xbf\xa6gM\x1e2/\xdf\xfcq\xd6\x14d\x06R\x80\xcc;\xf2\xf6\x8f\xeb,\x1e\xc8_\xfe\x00\xcb\xee\xd3y\xd3\xfbt^}\x97~:\xab\x87\xcc\xcd\xd3\x17Q\x82\xac\xfb\xe4[}\x9f\xff\xf8f\xdf\x0c\xbf\xd9\xfa\x9e\xe9[\xf6\xf0\xad\x9e~\xb9\xfb\xed\xdd\x7f\xfeVg\xedET\xc8\xcb\xa7o\xe3\x03i/\xf4[\xdb\xd4O?\xfc\xd2\xb6\xf0\xee\xee\xee\xdd\xff\xbd\xf8\xe6\xee\xc3/?\xbe\xc8o\xbe\xcf\x8e7/~\xda5a\xbd\xad\xab\xed\xe4\xbf\xc2\xab\xef\x83\xfa\xfe\x7f?|\xfbK[\xd6\xcb\xc1w\xfd\xf1\x92\xed\xb1\x9b\xf4\xd8\xb4\x7f\xec6=6\xeb\x1f{\x95\x1e+\xfa\xc7^\xa7\xc7\xe6\xfdc\x83\xb9Y\xf4\x8f\xbdM\xcf[\xf6\x8f\xfdePU\xff\xd8`\xaa\xca\xfe\xb1\x97\x83\x8e\xd7\xc9\xc1\xc1w\xa6J\x0e\x0e\xbe5urp\xf0\xbd\xd9$\x07\x07\xdf\x9c&98\xf8\xeel\x93\x83\x83o\xcf\xae\x7fp\xf0\x95\xecG\x8e\x1dF\x8eiT\xda\x19\xfb\xeb\xfd}<\xb8\xe6i\xe4\xd8y\xe4\xd8e\xe4X\x08c\x07\xe3\xd8\xc1\xeev\xb0\x9fj\xc8\xc7\xce\x9c\x8c\x1dL\x86|\xf0\x1d\x08\xc9\x94\x0f\x0f&c><\x98\xcc\xf9\xf0`2\xe8\xc3\x83\xc9\xa4\x0f\x0f\xae\xc6\xbe\x94d\xd6\x87g&\xb3><\x98\xcc\xfa\xf0`2\xeb\xc3\x83\xc9\xac\x0f\x0f&\xb3><\x98\xcc\xfa\xf0\xe0\xd8\xac\x87\xb1a\x0fc\xd3\x1e\xc6\xc6=\x8c\xcd{\x18\x1b\xf806\xf1ql\xe2\xe3\xd8\xc4\xc7\xb1\x89\x8fc\x13\x1f\xbb\x89\x7f\xf9\x9d\xbb\xaf\xe3\xd8\xc8\xc7\xb1\x91\x8fc#\x1f\xc7F>\x8e\x8d|\x1c\x1b\xf986\xf2ql\xe4\xe3\xd8\xc8\xc7\xb1\x91\x8fc#\x1f\xc7F>\x8e\x8d|\x1c\x1b\xf986\xf2ql\xe4\xe3\xd8\xc8\xc7\xb1\x91\x8fc#\x1f\xc7F>\x8e\x8d|66\xf2\xd9\xd8\xc8gc#\x9f\x8d\x8d|6&\xf9ll\xe2\xb3\xb1\x89\xcf\xc6&>\x1b\x9b\xf8ll\xe2\xb3\xb1\x89\xcf\xc6&>\x1b\x9b\xf8ll\xe2\xb3\xb1\x89\xcf\xc6&>\x1b\x9b\xf8ll\xe2\xb3\xb1\x89\xcf\xc6&>\x1b\x9b\xf8ll\xe2\xdb\xc7_\xf7L\x93<\x9f\xdf\x9a\xe7\xf3\x97\xaf\xcc\x03z\xfbJ\xf4\xea\xf6\xbfu\xc9\xd1\xb7\xa2\xf6z\xf7O\xf8\x7f\xbc\x14\xdd\x0c\x1e\'\xe3CD\x17zzo\x1a<\xe3f\x0f\x91\x97\xb7O\x0f\xfc\x1d\xd1g\xd6\x9e\xf5\xf5n\xec\xc9\xffVO\xfezO{z\xf2\x8f\xaf\xbe\x8f\xbd\'\xff\xe9\x97\x7f~\xfe\xdb\xbb\xaf\x1f\xbf|\x1e\xbc\x02\xe0\x83\xb4\xef\x02\xcd\x87\xaf\xef>~\xfe\xf8\xf9\xef?\xff\xfb\xdd\xa7O?\x7f\xb9\xfb9\xff\xf8\xee\x1f\xbf\xde\xbd\xfb\xfbo\xf7d\xf0\xaa`\xafq|\xf7\xf5\xc3\xdd?\xee\xbe|\xf9E\xd7\x19\xbc?\xd8\x13\xb6_\xef\xfe\xf9\xfe\xeb?\xef\xde}\xfa\xf9\x97\xbbw\xbf}\xf8\xf9\xdf_\xee\xfeg\xf0r\xf1\x9fN\xcc\xbe|~\x7f\xf7\xe1+>\xe2\xfc?\x9d\xd8|\xf8\xf8\xf9\x97/w\xef?\xfc\xa6\x97\xde\xf4\x83.\xec\xb9\xeb/\x9f\x7fV\'\x8f\x9fq\xfb}\xfa}\xf0\xd6\xe2\xce\xfb\xe6\x7f\x7f\xfb\xf4\xbd^\xc5\xdf\x7f\xf8\xf1\xc5?\xee>\xfc\xfe\xe1\xee_\x1f^\xfc\xd4\xfb\xd2\xcb/\x9f\xbf|\xfa\xf8\xf5\xd7\x8f\xef\xbf\x19\xbc\xe8\xd8O\xa3\xfe\xf4\xeew}\x9f\xf1\x05\x976=\xfd\xf4\xe5\x0b\xb3k\xdf\xdf\xc7\xcf\x7f\xfb\xf2\xef\xc1\xd7T\xd9h\xae\xab\x0e\x82\xb5\r\x96\x9a\xabO?7\xef>~jg\xeb\xdd\xe7\xbf\xfd\xfc\xf7\xbb\x8f\x1a\xb0\xb6\xe9\xc1\x056\xfe\xcb\xd5X\xb2\xdd\xc6\x7f\xb1\xef>\xfd\xfe\xe1\x9b\xf7\x1f\xee?X\xfa\xbd\xdc\xda\x13\xaa\xaf\xbf~\xb8K\x83\xbb?\x82\xedm1|\xef\x1a;x\x18;\xa8[\xf5\xfe\xed\xfe\x95}\xf5\x1a;x\x1e;x\x19;\x18\xc2\xe8\xd1NQ\xf2\xa0\xf9J\xc3\xa3\x9d\xfc\xd1|\xf4\xca\x93\xd1\xa3\xd3\xd1\xa3\xb3\xd1\xa3\xc5\xe8\xd1\xa7{\xde}EOw\xb5;\xba\x1c\xbd\xf2j\xf4\xe8\xd3\xad\xe7\xae\xfct\xb3\xb9\xa3O\xf7\x97;\xfatS\xb9\xa3Ow\x8c;\xfat\x8f\xb8\xa3O7\x84;:z\x17\x84\xfd\xe8wc\xf4>\x08\xa37B8\x8d^y\xf4V\x08\xa3\xf7B\x1c\xbd\x17\xe2\xe8\xbd\x10G\xef\x858z/\xc4\xc7{\xe1\xb5\x7f7\x1b\xfbz\xe3\xe8\xbd\x10G\xef\x858z/\xc4\xd1{!\x8e\xde\x0bq\xf4^\x88\xa3\xf7B\x1c\xbd\x17\xe2\xe8\xbd\x10G\xef\x858z/\xc4\xd1{!\x8e\xde\x0bq\xf4^\x88\xa3\xf7B\x1c\xbd\x17\xe2\xe8\xbd\x10G\xef\x858z/\xc4\xd1{!\x1b\xbd\x17\xb2\xd1{!\x1b\xbd\x17\xb2\xd1{!\x1b\xfd\xefB6\xfa\xdf\x85l\xf4^\xc8F\xef\x85l\xf4^\xc8F\xef\x85l\xf4^\xc8F\xef\x85l\xf4^\xc8F\xef\x85l\xf4^\xc8F\xef\x85l\xf4^\xc8F\xef\x85l\xf4^\xc8F\xef\x85l\xf4^\xc8F\xef\x85\xf6]\xc6> %\xefqz1J\xffPk\xf4-\xadM\xff\xf8\xe2A\xbc\xc3\xd7\xb3\x87c/\xfb\xefg7\x83\x1f\xfa\xe7]\xe6\xaf\x7f\xbc\x9fM@\xa6 3\x90\x02d\x0e\xb2\x00Y\x82\xac@\xca\x07\xd2\xbd.\xde\xff\x07f\xf0\xc7\x0fk\x9cS\x81\xd4 \x1b\x90\x86\x1f\xe9\xed\xe0\xd9x\x8b\x93v {\x90\x03\xc8\x11\xe4\x04r\x06\xb9\x80\x84@\x14\x892"\x16\x1f\xd8|`\xf5\x81\xdd\x07\x96\x1f\xd8~`\xfd\x81\xfd\x07\x0e@\xe8&\xe0\xe5\xd3\x8c\x06V\x1e\xd8y`\xe9\x81\xad\x87\xae\xf6\xfe\xe5Ys`\xcf\x81E\x076\x1dXu`\xd7\x81e\x07\xb6\x1d\xd9vd\xdb\x91m\xc7\xa4\xed\xc46\xaf\x9fe\x9b6\xfd\xe3\x8b\xb7\xf7w\xe1\xc0$\xf1\xe1\x98&\xed\x8f\x1f\x06\xdd\x0e\x84\x94?Dz\xdf\xe9\t\xc8\x14d\x06R\x80\xccA\x16 K\x90\x15H\xc9/\xe2\xcd\xe0O_\xd78\xa9\x02\xa9A6 \r?\xd4\xdb\xc1\xf7k\x8b\x93v {\x90\x03\xc8\x11\xe4\x04r\x06\xb9\x80\x84@\xd4\xd5\xde\xbf{2\xa6\xd8|`\xf5\x81\xdd\x07\x96\x1f\xd8~`\xfd\x81\xfd\x07\x0e@\xe0\x04\x84n\x04\x12\xdb\xf0\x0bb\xe7\x81\xa5\x07\xb6\x1e\xba\xda\x13\xdb\xf0\xf2\xec9\xb0\xe8\xc0\xa6\x03\xab\x0e\xec:\xb0\xec\xc0\xb6#\xdb\x8el;\xb2\xed\x98\xb4\x9d\xd8F\xdb)\xcfx\xb6i\xd3\x8f\xb6\x19\xec#\xc4\x87c}\xdb\xdc\x0c"\xf9C\xa4o\x1b\x90)\xc8\x0c\xa4\x00\x99\x83,@\x96 +\x90\x92_\xc4`yb\x8ds*\x90\x1ad\x03\xd2\xf0#\xbd\x1d\xf8{\x8b\x93v {\x90\x03\xc8\x11\xe4\x04r\x06\xb9\x80\x84@\xd4\xb5\x9e\xc8\x86)\x16\x1f&L\xb1\xfa\xc0\xee\x03\xcb\x0fl?\xb0\xfe\xc0\xfe\x03\x07 t\x13\x90\xc8\x86\x9f*;\x0f,=\xb0\xf5\xd0\xd5\x9e\xc8\x86\x97g\xcf\x81E\x076\x1dXu`\xd7\x81e\x07\xb6\x1d\xd9vd\xdb1\xc3g\x1f\x93\xb6\x13\xd9h3\xef\x19\xb2i\xd3\x8f\xb2\x19\xbc`\xc4\x87c\xc9\xa3\xcd\xf0=\xea!\xd2\x97\r\xc8\x14d\x06R\x80\xccA\x16 K\x90\x15H\xc9/b\xb0\x8c\xb5\xc69\x15H\r\xb2\x01i\xf8\x91\xde\x0e\xdc\xbc\xc5I;\x90=\xc8\x01\xe4\x08r\x029\x83\\@B \xeaZOd\xc3TN4!b\xf5\x81\xdd\x07\x96\x1f\xd8~`\xfd\x81\xfd\x07\x0e@\xe8& \x91\r?Uv\x1eXz`\xeb\xa1\xab=\x91\r/\xcf\x9e\x03\x8b\x0el:\xb0\xea\xc0\xae\x03\xcb\x0el;\xb2\xed\xc8\xb6c\x86\xcf>&m\'\xb2\xf9\xcb\xb3d\xd3\xa6\x1fe3\xf8O~|8\x96\xc8f\xf8d\xf3\x10\xe9\xcb\x06d\n2\x03)@\xe6 \x0b\x90%\xc8\n\xa4\xe4\x171X\x0cX\xe3\x9c\n\xa4\x06\xd9\x804\xe6#\r\xf4\xbd\xc5I;\x90=\xc8\x01\xe4\x08r\x029\x83\\@B \xeaZOd\xc3TN4!b\xf5\x81\xdd\x07\x96\x1f\xd8~`\xfd\x81\xfd\x07\x0e@\xe8& \x91\r?Uv\x1eXz`\xeb\xa1\xab=\x91\r/\xcf\x9e\x03\x8b\x0el:\xb0\xea\xc0\xae\x03\xcb\x0el;\xb2\xed\xc8\xb6c\x86\xcf>&m\'\xb2\xd1\xb6\xfc3\x9el\xda\xf4\xa3l\x86\xbf\xd6\xf0p,\x91\xcd\xe0\xee\xc9\x1f"}\xd9\x80LAf \x05\xc8\x1cd\x01\xb2\x04Y\x81\x94\xfc"\x06\xdb\xf4k\x9cS\x81\xd4 \x1b\x90\x86\x1f\xe9\xedp\xdd\x1d\'\xed@\xf6 \x07\x90#\xc8\t\xe4\x0cr\x01\t\x81(\x12eD,>L\x98b\xf5\x81\xdd\x07\x96\x1f\xd8~`\xfd\x81\xfd\x07\x0e@\xe8& \x91\r?Uv\x1eXz`\xeb\xa1\xab=\x91\r/\xcf\x9e\x03\x8b\x0el:\xb0\xea\xc0\xae\x03\xcb\x0el;\xb2\xed\xc8\xb6#\xdb\x8eI\xdb\x89l\xb4q\xfd\x1c\xdb\xdc\xc7\x1fu3\xf8\x8f\xbeV\xf7\xee]\x94\xf8fp\x03\xe5]\xa6/\x1c\xa2)\xd1\x8c\xa8 \x9a\x13-\x88\x96D+\xa2\xd2|9\xc3\x9f\x16\xf3\xac\x8a\xa8&\xda\x105\xee\xbb70\xdd\x96\xa7\xed\x88\xf6D\x07\xa2#\xd1\x89\xe8Lt!\n\xfa}\xad\x87?\xfb\xec\xfd)\xce\xe38$O=&gF"LL\xce\x0cE0S\x11\xccX\x043\x17\xc1\x0cF0\x93\x11\xcch\x84\xc7\xd9H\x9cd>g3\r\xc1\x8cC0\xf3\x10\x1e\x07"\x11\x93\xf9\x18f\x02\x82\x19\x81`f \x98!\x08f\n\x82\x19\x83`\xe6 \x9a9\x88f\x0eb\xc6\xaf#\xa6s\x90J\n\xbf\n:\xfe\x1b\x9f\xdd\xafs\xde\xffA\xd6\xe0\x16\x8a\xfa\xed\xc4\xf6\x81)\x91\xd4\xe0\xb9)\xef2\x89\xa4\xba_\xd2|\x1a\xf0)S3\xa2\x82hN\xb4 Z\x12\xad\x88J\xf3\xe5\xe0\x97\x06yZET\x13m\x88\x1a\xf3\xf1\xde\x0e\xbe}[\x9e\xb6#\xda\x13\x1d\x88\x8eD\'\xa23\xd1\x85H\x96B\x89\xe1q\x1eRK1gfB\x96b\xceL\x85,\xc5\x9c\x99\x0bY\x8a93\x19\xb2\x14sf6d)\xe6\xd6\x86\x99i\x90\xa5x\xae\x99\x07Y\x8a93\x00\xc1L\x80,\xc5s\xcd\x0c\xc8R\xcc\x99)\x90\xa5\x983s K!\'K\x91e\x86\xa5s\x90Z\xaa\xfd5\x8e\xe4\x17\xd6\xc7-\xf5\xf0[\x1f\x0f\x7f\xdc>x\xb0\x88\xedZ\xcf\xc0R7\xc3W\xb7.\x93X\xea\xe1\xb4\x1e\x9a25#*\x88\xe6D\x0b\xa2%\xd1\x8a\xa84_\xce\xcb\xc1\x1f\x87\xafyZET\x13m\x88\x1a\xa2-\xd1\x8ehOt :\x12\x9d\x88\xceD\x17"I\t\x9dIJd\x99a\xb9a\x13\xc3\xcc\x10HJ\xfc\x18f\x0c$%\xe6\xcc HJ\xcc\x99Q\x90\x94\x983\xdd\x07S\xbe\xa4\xc4sM\xfd\x92\x12sf\x00$%\xe6\xcc\x08\xe8\xd1\x8993\x04ztb\xce\x8c\x81\x1e\x9d\x90\x93\x94\xc8\xcc\x1c\xe8\xd1\x89\xb9t\x0eR)\xb5K\x89\xcf\x90\xd2\xc3\x0e\xe3\x83\x94\x86\x0f\x12Q\xbf\xe8\x85g\xa7\xf4wO\xf2.\x92H\xa9\xdb\x8b\xec?:\x01\xcdxbA4\'Z\x10-\x89VD\xa5\xf9j^\x0e\xfe\xe0o\xcd\xd3*\xa2\x9ahC\xd4\x10m\x89vD{\xa2\x03\xd1\x91\xe8Dt&\xba\x10IJ(HR"\xcb\x0c3#\xa0\'%\x9e;5\xccL\x81\xde\xe7x\xae\x99\x03\xbd\xcf1g&A\xefs\xcc=\xceB\xfa>\xc7\x9c)_Rb\xce\xd4/)1g\x06@Rb\xce\x8c\x80\xa4\xc4\x9c\x19\x02I\x8993\x06\x92\x12r\x92\x12\x99\x99\x03I\x89\xb9t\x0eR)\xb5\x1b\xab\xcf\x90\xd2\xc3\x82k\'\xa5\xe1\x1et\xfb[\xb0\xc3G%\xfc\xd4\t+\xb2\x93\xee\xb4\xe4Q\t\xa9\x19S\x05\xd1\x9chA\xb4$Z\x11\x95Dk\xa2\x8a\xa8&\xda\x105D[\xa2\x1d\xd1\x9e\xe8@t$:\x11\x9d\x89.D\x92\x90Y\x7f6,3,7\xccT\x1e\xa6&gJ\x97\x84\xf8\xb9\x98\xda%!\xe6L\xf1\x92\x10s\xa6\xfa`\xba\xd7\x93\x11\xcf5\xed\xeb\x87J\xcc\x99\xfe\x83\x19\x00I\x88\xe7\x9a\x11\x90\x84\x983C \t1g\xc6@\x12BN\x12"\x8b\x86\x999\xd0\x0f\x95\xfa\xe7\xa6\x12j\x173\x9f!\xa1\x87=\xceNB\xc3\xf5\xe8\x97\xdc\xf7\xbd\xc1O\x95\xb0\t:\xe9NK$\x84\xd4\x8c\xa9\x82hN\xb4 Z\x12\xad\x88J\xa25QET\x13m\x88\x1a\xa2-\xd1\x8ehOt :\x12\x9d\x88\xceD\x17"I\xc8lE\x1b\x96\x19\x96\x1bf*\x97\x84\xf81L\xe9\x92\x10s\xa6vI\x889S\xbc$\xc4\x9c\xa9^\x122+\xd2\x86\x99\xf6%!\x9ek\xfa\x97\x84\xcc\x9e\xb4af\x04$!\x9ek\x86@\x12b\xce\x8c\x81$\x84\x9c$D\x16\r3s \t\xf5\xcfM%\xd4\xae<>CB\x0f\x1b\x92\x9d\x84\x86[\xd3\xfa\x9b\x08\xf1z6\xf83\xba\xbc\xcb$\xefgX\xbb\x9c25#*\x88\xe6D\x0b\xa2%\xd1\x8a\xa8$Z\x13UD5\xd1\x86\xa8!\xda\x12\xed\x88\xf6D\x07\xa2#\xd1\x89\xe8Lt!\x92\x84\xcc\xb6\xb4a\x99a\xa6q\xbd\x8e\x99\x8di\xc3L\xe9\x92\x10\xcf5\xb5KB\xcc\x99\xe2%!\xe6L\xf5\x92\x90Y\x9d6\xcc\xb4/\t\xf1\\\xd3\xbf$d\xf6\xa7\r3# \t\xf1\\3\x04\x92\x10sf\x0c$!nC\x9b9\xd0\x0f\xae\x993s \t\xf5s\xa9\x84\xdaU\xc8G\t\xbdVl\xfc\xe7\xd6\x0f\x8b\x93\x9d\x83\x86\xcb\xd4/\x1f\x8e\xea\xa9\xeb\xe9/\x16\x82\x83\xb0z9\xe9NK\x1e\x84\x90\x9a1U\x10\xcd\x89\x16DK\xa2\x15QI\xb4&\xaa\x88j\xa2\rQC\xb4%\xda\x11\xed\x89\x0eDG\xa2\x13\xd1\x99\xe8B$\x07\x99%j\xc32\xc3r\xc3L\xe5z\x10\xe2\xc70\xa5\xcbA\xcc\x99\xda\xe5 \xe6L\xf1r\x10s\xa6z9\xc8lT\x1bf\xda\x97\x83x\xae\xe9_\x0e2k\xd5\x86\x99\x11\x90\x83x\xae\x19\x029\x8893\x06r\x10\x97\xa4\xcd\x1c\xc8A\xcc\x999\x90\x83\xfa\xb9\xd4A\xed\x86\xe4\xf5\x0ez\xd8\xa7\xec\x1c4\xdc\xb1~\xf9p\xb4\xef\xa0\xdb\xc1\xafz\xe7]&y\x0e\xc2\x92\xe6\x94\xa9\x19QA4\'Z\x10-\x89VD%\xd1\x9a\xa8"\xaa\x896D\r\xd1\x96hG\xb4\':\x10\x1d\x89NDg\xa2\x0b\x91\x1cdv\xab\r\xcb\x0c3\x8d\xeb9\xc8\xecW\x1bfJ\x97\x83x\xae\xa9]\x0eb\xce\x14/\x071g\xaa\x97\x83\xcc\xa2\xb5a\xa6}9\x88\xe7\x9a\xfe\xe5 \xb3mm\x98\x19\x019\x88\xe7\x9a!\x90\x83\x983c \x07qw\xda\xcc\x81\x1c\xc4\x9c\x99\x039\xa8\x9fK\x1d\xd4\xae}^\xef\xa0\x87%\xd1\xf6/\x9a\xd7_R\x8e\xbfQ\xfe\xe1h\xf2\x1c4XE\xca%\x9f\xfb\xbf0\xa4\xf7\xd7s\x10M\x89fD\x05\xd1\x9chA\xb4$Z\x11\x95Dk\xa2\x8a\xa8&\xda\x105D[\xa2\x1d\xd1\x9e\xe8@t$:\x11\x9d\x89.Dr\x90Y\xb96,3\xcc4.\x07\x99\xb5k\xc3L\xe9r\x10\xcf5\xb5\xcbA\xcc\x99\xe2\xe5 \xe6L\xf5r\x90\xd9\xbf6\xcc\xb4/\x07\xf1\\\xd3\xbf\x1cd\x96\xb0\r3# \x07\xf1\\3\x04r\x10sf\x0c\xe4 \xe4\xf4\x03!\xb2h\x98\x99\x039\xa8\x7fn\xe2 \xfd\xf3\r\xcfp\xd0}Z\xff\xb0\xc2\xd3\xbf\x14\x11\x1f\xd1\x93Tr\xa2\t\xd1\x94hFT\x10\xcd\x89\x16DK\xa2\x15QI\xb4&\xaa\x88j\xa2\rQC\xb4%\xda\x11\xed\x89\x0eDG\xa2\x13\xd1\x99\xe8B\xa4\x7fw\xc0\xacT\x1b\x96\x19f\x1a\x0f\xa6\xf2`:\xd7\xbf \xc0\x8fkZ\x0f\xa6\xf6`z\x0f\xa6\xf8`\x9a\x0f\xa6\xfa`\xba\x0f\xa6\xfc`\xda\x0f\xa6\xfe`\xfa\x0ff\x00\x82\x99\x00\xfd\x1d\xfe\xfc\xbe\x98\x19\xd0\xdf\xd8\xcf\x9c\x99\x02\xfd\xfd\xfc\xcc\x999\xd0\xdf\xc6\x8f\x9c\xfe\x12~23\x07\xfa+\xf7\xfb\xb9\xd43\xed\xba\xe3\xd5\xcf:7\xddrd\xdf3\xd8\x97\xcc\x1fS\xbd\xe7\x19\xa2)\xd1\x8c\xa8 \x9a\x13-\x88\x96D+\xa2\x92hMT\x11\xd5D\x1b\xa2\x86hK\xb4#\xda\x13\x1d\x88\x8eD\'\xa23\xd1\x85H\x9e\xe1\xd2l4,3\xcc4.\xcf\x98\xa5h\xc3L\xe9\xc1\xb4.\xcf\x98\xa5h\xc3L\xf1\xf2\x0c\xcf5\xd5\xcb3\xcc\x99\xf2\xe5\x19\xb3\x14m\x98\xe9_\x9e\xe1\xb9f\x02\xe4\x19\xb3\x14m\x98\x19\x02\xfd\x83 <\xd7\x8c\x81\xfe\xf9\x0f.;\x9b9\x90g\xccR\xb4a\xe9\x1c\xa4\x9ei\xb7\x15\xaf\xf7L\xb7\xdb\xd8\xf7\x0c\xd6\x1d\xf3\x1b\xa0\t\xd1\x94hFT\x10\xcd\x89\x16DK\xa2\x15QI\xb4&\xaa\x88j\xa2\rQC\xb4%\xda\x11\xed\x89\x0eDG\xa2\x13\xd1\x99\xe8B$\xcfp76\x1a\x96\x19f\x1a\x97gx=\xd3\xb9\x9eg\x983\xad\xcb3\xcc\x99\xde\xf5<\xc3\x9ci^\xcf3\xcc\x99\xee\xf5<\xc3\x9ci_\xcf3\xcc\x99\xfe\xe5\x19\xe6\xcc\x04\xc83\xcc\x99\x19\xd0\xf3\x0csf\n\xf4<\xc3\x9c\x99\x03=\xcf \'\xcf\x90\x999\xd0\xf3L?\x97z\xa6]@\xbc\xde3\xdd\xbab\xdf3\xd8`\xcco\x80&DS\xa2\x19QA4\'Z\x10-\x89VD%\xd1\x9a\xa8"\xaa\x896D\r\xd1\x96hG\xb4\':\x10\x1d\x89NDg\xa2\x0b\x91<\xc3u\xd7hXf\x98i\\\x9e\xe1\xf5L\xe7\xf2\x0cs\xa6uy\x869\xd3\xbb<\xc3\x9ci^\x9ea\xcet/\xcf0g\xda\x97g\x983\xfd\xcb3\xcc\x99\t\x90g\x9833 \xcf0g\xa6@\x9ea\xce\xcc\x81<\x83\x9c<Cf\xe6@\x9e\xe9\xe7R\xcf\xb4\xfb\x84\xd7{\xa6\xdb>\xec{\x06\xcb\x8c\xf9\r\xd0\x84hJ4#*\x88\xe6D\x0b\xa2%\xd1\x8a\xa8$Z\x13UD5\xd1\x86\xa8!\xda\x12\xed\x88\xf6D\x07\xa2#\xd1\x89\xe8Lt!\x92g\xb8\xd1\x1a\r\xcb\x0c3\x8d\xcb3\xbc\x9e\xe9\\\x9ea\xce\xb4.\xcf0gz\x97g\x983\xcd\xcb3\xcc\x99\xee\xe5\x19\xe6L\xfb\xf2\x0cs\xa6\x7fy\x8693\x01\xf2\x0csf\x06\xe4\x19\xe6\xcc\x14\xc83\xcc\x999\x90g\x90\x93g\xc8\xcc\x1c\xc83\xfd\\\xea\x99ve\xf0z\xcft\x0b\x86}\xcf`_1\xbf\x01\x9a\x10M\x89fD\x05\xd1\x9chA\xb4$Z\x11\x95Dk\xa2\x8a\xa8&\xda\x105D[\xa2\x1d\xd1\x9e\xe8@t$:\x11\x9d\x89.D\xf2\x0c\x97V\xa3a\x99a\xa6qy\x86\xd73\x9d\xcb3\xcc\x99\xd6\xe5\x19\xe6L\xef\xf2\x0cs\xa6yy\x869\xd3\xbd<\xc3\x9ci_\x9ea\xce\xf4/\xcf0g&@\x9ea\xce\xcc\x80<\xc3\x9c\x99\x02y\x8693\x07\xf2\x0cr\xf2\x0c\x99\x99\x03y\xa6\x9fK=\xd3n\x05^\xef\x99n\x87\xb0\xef\x19\xac\x1f\xe67@\x13\xa2)\xd1\x8c\xa8 \x9a\x13-\x88\x96D+\xa2\x92hMT\x11\xd5D\x1b\xa2\x86hK\xb4#\xda\x13\x1d\x88\x8eD\'\xa23\xd1\x85H\x9e\xe1^j4,3\xcc4.\xcf\xf0z\xa6sy\x869\xd3\xba<\xc3\x9c\xe9]\x9ea\xce4/\xcf0g\xba\x97g\x983\xed\xcb3\xcc\x99\xfe\xe5\x19\xe6\xcc\x04\xc83\xcc\x99\x19\x90g\x983S \xcf0g\xe6@\x9eAN\x9e!3s \xcf\xf4s\xa9g\xda\xcd\xbf\xeb=\xd3\xed\t\xf6=\x83\x15\xc3\xfc\x06hB4%\x9a\x11\x15Ds\xa2\x05\xd1\x92hET\x12\xad\x89*\xa2\x9ahC\xd4\x10m\x89vD{\xa2\x03\xd1\x91\xe8Dt&\xba\x10\xc93\xdc=\x8d\x86e\x86\x99\xc6\xe5\x19^\xcft.\xcf0gZ\x97g\x983\xbd\xcb3\xcc\x99\xe6\xe5\x19\xe6L\xf7\xf2\x0cs\xa6}y\x869\xd3\xbf<\xc3\x9c\x99\x00y\x8693\x03\xf2\x0csf\n\xe4\x19\xe6\xcc\x1c\xc83\xc8\xc93df\x0e\xe4\x99~.\xf5L\xbb\xddw\xbdg\xba]\xc0\xbeg\xb0F\x98\xdf\x00M\x88\xa6D3\xa2\x82hN\xb4 Z\x12\xad\x88J\xa25QET\x13m\x88\x1a\xa2-\xd1\x8ehOt :\x12\x9d\x88\xceD\x17"y\x86\xfb\xa5\xd1\xb0\xcc0\xd3\xb8<\xc3\xeb\x99\xce\xe5\x19\xe6L\xeb\xf2\x0cs\xa6wy\x869\xd3\xbc<\xc3\x9c\xe9^\x9ea\xce\xb4/\xcf0g\xfa\x97g\x983\x13 \xcf0gf@\x9ea\xceL\x81<\xc3\x9c\x99\x03y\x069y\x86\xcc\xcc\x81<\xd3\xcf\xa5\x9ei7\xf8\xae\xf7L\xb7\xef\xd7\xf7\x0c\xd6\x07\xf3\x1b\xa0\t\xd1\x94hFT\x10\xcd\x89\x16DK\xa2\x15QI\xb4&\xaa\x88j\xa2\rQC\xb4%\xda\x11\xed\x89\x0eDG\xa2\x13\xd1\x99\xe8B$\xcfp\x874\x1a\x96\x19f\x1a\x97gx=\xd3\xb9<\xc3\x9ci]\x9ea\xce\xf4.\xcf0g\x9a\x97g\x983\xdd\xcb3\xcc\x99\xf6\xe5\x19\xe6L\xff\xf2\x0csf\x02\xe4\x19\xe6\xcc\x0c\xc83\xcc\x99)\x90g\x983s \xcf \'\xcf\x90\x999\x90g\xfa\xb9\xc43\xb7\xcf\xda\x07\xbeO\xa7\xfb\xc0\x8f\xa8\xb7\x0fL4!\x9a\x12\xcd\x88\n\xa29\xd1\x82hI\xb4"*\x89\xd6D\x15QM\xb4!j\x88\xb6D;\xa2=\xd1\x81\xe8Ht":\x13]\x88B0,\x1a\x96\x19\x96\x1bf*\x0f\xa6\xf3`J\x0f\xa6\xf5`j\x0f\xa6\xf7`\x8a\x0f\xa6\xf9`\xaa\x0f\xa6\xfb`\xca\x0f\xa6\xfd`\xea\x0f\xa6\xff`\x06 \x98\t\xd0\xbf o\xf6\x81\r3C\xa0\x7f#\x9e\xe7\x9a1\xd0\xbf\x07\xcf=_3\x07\xfa\xb7\xdf\xcd>\xb0a\xe9\x1c\xa4\x9ey\xd6>\xf0-\xf7\x81\x1fQ\xdf3\xd8\x1e\x9c05%\x9a\x11\x15Ds\xa2\x05\xd1\x92hET\x12\xad\x89*\xa2\x9ahC\xd4\x10m\x89vD{\xa2\x03\xd1\x91\xe8Dt&\xba\x10\xc93f\x1f\xd8\xb0\xcc\xb0\xdc0S\xb9<\xc3\x8faJ\x97g\x983\xb5\xcb3\xcc\x99\xe2\xe5\x19\xb3\x0fl\x98\xe9^\x9e\xe1\xb9\xa6}y\x869\xd3\xbf<c\xf6\x81\r3#\x10\xcc\x0c\x043\x04\xf2\x8c\xd9\x076\xcc\xccA4s \xcf\x98}`\xc3\xd29H=\xd3n\xf0]\xfd\xdet\xdb\xed\xfb\xf5\xde\x9b\x1eQ\xdf3\xd8\x1e\x9c05%\x9a\x11\x15Ds\xa2\x05\xd1\x92hET\x12\xad\x89*\xa2\x9ahC\xd4\x10m\x89vD{\xa2\x03\xd1\x91\xe8Dt&\xba\x10\xc93\xdc\x17\x8d\x86e\x86\xe5\x86\x99\xca\xe5\x19~\x0cS\xba<\xc3\x9c\xa9]\x9ea\xce\x14/\xcf0g\xaa\xd7\xf3\x0cs\xa6|=\xcf0g\xea\xd7\xf3\x0csf\x00\xf4<\xc3\x9c\x19\x01y\x8693\x04\xf2\x0csf\x0c\xf4<\xc3=_3\x07\xf2\x0csf\x0eb:\x07\xa9g\xda\r\xbe\xeb=\xd3\xed\xfb\xf5=\x83U\xc1\xfc\x16hB4%\x9a\x11\x15Ds\xa2\x05\xd1\x92hET\x12\xad\x89*\xa2\x9ahC\xd4\x10m\x89vD{\xa2\x03\xd1\x91\xe8Dt&\xba\x10\xc93\xdc\x17\x8d\x86e\x86\x99\xc6\x83\xa9\\\x9e\xe1\xc70\xa5\xcb3\xcc\x99\xda\xe5\x19\xe6L\xf1\xf2\x0cs\xa6zy\x869S\xbe<\xc3\x9c\xa9_\x9ea\xce\x0c\x80<\xc3\x9c\x19\x01y\x8693\x04\xf2\x0csf\x0c\xe4\x19\xe4\xf4<Cf\xe6 \x9a9\x90g\xfa\xe7\xa6\x9ei7\xf8\xae\xf7L\xb7\xef\xd7\xf7\x0cV\x05\xf3[\xa0\t\xd1\x94hFT\x10\xcd\x89\x16DK\xa2\x15QI\xb4&\xaa\x88j\xa2\rQC\xb4%\xda\x11\xed\x89\x0eDG\xa2\x13\xd1\x99\xe8B$\xcfp_4\x1a\x96\x19f\x1a\x97gx=\xd3\xb9~>\xc3\x9ci]?\x9fa\xce\xf4\xae\x9f\xcf0g\x9a\xd7\xcfg\x983\xdd\xeb\xbd\x899\xd3\xbe\xde\x9b\x983\xfd\xeb\xbd\x8993\x01\xfa\xf9\x0csf\x06\xf4\xde\xc4\x9c\x99\x82`\xc6@\x9e\xc1\xb9\xf2\x0c\x99\x99\x03y\x86\xb9t\x0eR\xcf\xb4\x1b|\xd7{\xa6\xdb\xf7\xeb{\x06\xab\x82\xf9-\xd0\x84hJ4#*\x88\xe6D\x0b\xa2%\xd1\x8a\xa8$Z\x13UD5\xd1\x86\xa8!\xda\x12\xed\x88\xf6D\x07\xa2#\xd1\x89\xe8Lt!\x92g\xb8/\x1a\r\xcb\x0c3\x8d\xcb3\xbc\x9e\xe9\\\x9ea\xce\xb4.\xcf0gz\x97g\x983\xcd\xcb3\xcc\x99\xee\xe5\x19\xe6L\xfb\xf2\x0cs\xa6\x7fy\x8693\x01\xf2\x0csf\x06\xe4\x19\xe6\xcc\x14\xc83\xcc\x999\x90g\x90\xd3{\x13\x99\x99\x03=\xcf\xf4s\xa9g\xda\r\xbe\xeb=\xd3\xed\xfb\xf5=\x83U\xc1\xfc\x16hB4%\x9a\x11\x15Ds\xa2\x05\xd1\x92hET\x12\xad\x89*\xa2\x9ahC\xd4\x10m\x89vD{\xa2\x03\xd1\x91\xe8Dt&\xba\x10\xc93\xdc\x17\x8d\x86e\x86\x99\xc6\xe5\x19^\xcft.\xcf0gZ\x97g\x983\xbd\xcb3\xcc\x99\xe6\xe5\x19\xe6L\xf7\xf2\x0cs\xa6}y\x869\xd3\xbf<\xc3\x9c\x99\x00y\x8693\x03\xf2\x0csf\n\xe4\x19\xe6\xcc\x1c\xc83\xc8\xc93df\x0e\xe4\x99~.\xf5L\xbb\xc1w\xbdg\xba}\xbf\xbeg\xb0*\x98\xdf\x02M\x88\xa6D3\xa2\x82hN\xb4 Z\x12\xad\x88J\xa25QET\x13m\x88\x1a\xa2-\xd1\x8ehOt :\x12\x9d\x88\xceD\x17"y\x86\xfb\xa2\xd1\xb0\xcc0\xd3\xb8<\xc3\xeb\x99\xce\xe5\x19\xe6L\xeb\xf2\x0cs\xa6wy\x869\xd3\xbc<\xc3\x9c\xe9^\x9ea\xce\xb4/\xcf0g\xfa\x97g\x983\x13 \xcf0gf@\x9ea\xceL\x81<\xc3\x9c\x99\x03y\x069y\x86\xcc\xcc\x81<\xd3\xcf\xa5\x9ei7\xf8\xae\xf7L\xb7\xef\xd7\xf7\x0cV\x05\xf3[\xa0\t\xd1\x94hFT\x10\xcd\x89\x16DK\xa2\x15QI\xb4&\xaa\x88j\xa2\rQC\xb4%\xda\x11\xed\x89\x0eDG\xa2\x13\xd1\x99\xe8B$\xcfp_4\x1a\x96\x19f\x1a\x97gx=\xd3\xb9<\xc3\x9ci]\x9ea\xce\xf4.\xcf0g\x9a\x97g\x983\xdd\xcb3\xcc\x99\xf6\xe5\x19\xe6L\xff\xf2\x0csf\x02\xe4\x19\xe6\xcc\x0c\xc83\xcc\x99)\x90g\x983s \xcf \'\xcf\x90\x999\x90g\xfa\xb9\xd43\xed\x06\xdf\xf5\x9e\xe9\xf6\xfd\xfa\x9e\xc1\xaa`~\x0b4!\x9a\x12\xcd\x88\n\xa29\xd1\x82hI\xb4"*\x89\xd6D\x15QM\xb4!j\x88\xb6D;\xa2=\xd1\x81\xe8Ht":\x13]\x88\xe4\x19\xee\x8bF\xc32\xc3L\xe3\xf2\x0c\xafg:\x97g\x983\xad\xcb3\xcc\x99\xde\xe5\x19\xe6L\xf3\xf2\x0cs\xa6{y\x869\xd3\xbe<\xc3\x9c\xe9_\x9ea\xceL\x80<\xc3\x9c\x99\x01y\x8693\x05\xf2\x0csf\x0e\xe4\x19\xe4\xe4\x1923\x07\xf2L?\x97x\xe6\xd5\xb3\xf6\x81\xef\xd3\xe9>\xf0#\xea\xed\xcf\x10M\x88\xa6D3\xa2\x82hN\xb4 Z\x12\xad\x88J\xa25QET\x13m\x88\x1a\xa2-\xd1\x8ehOt :\x12\x9d\x88\xceD\x17\xa2\x10\x0c\x8b\x86e\x86\xe5\x86\x99\xca\x83\xe9<\x98\xd2\x83i=\x98\xda\x83\xe9=\x98\xe2\x83i>\x98\xea\x83\xe9>\x98\xf2\x83i?\x98\xfa\x83\xe9?\x98\x01\x08f\x02\x82\x19\x81`f \x98!\x08f\n\x82\x19\x83`\xe6 \x9a9\x88f\x0e\xa2\x99\x83\x98\xceA\xea\x99g\xed\x03\xbf\xe2>\xf0#\xea{\x86\xfb\xc0LM\x89fD\x05\xd1\x9chA\xb4$Z\x11\x95Dk\xa2\x8a\xa8&\xda\x105D[\xa2\x1d\xd1\x9e\xe8@t$:\x11\x9d\x89.D\xf2\x8c\xd9\x076,3,7lb\x98\xe9\\\x9e\xe1\xc75\xad\xcb3\xcc\x99\xde\xe5\x19\xe6L\xf3\xf2\x0cs\xa6{y\xc6\xec\x03\x1bf\xea\x97gx\xae\x19\x00y\x8693\x02\xf2\x0csf\x08\xe4\x19\xb3\x0fl\x98\x99\x03y\x86\xbb\xbf\xd103\x07\xf2L\xff\xdc\xd43\xcf\xda\x07~\xc5}\xe0G\xd4\xf7\x0c\xf7\x81\x99\x9a\x12\xcd\x88\n\xa29\xd1\x82hI\xb4"*\x89\xd6D\x15QM\xb4!j\x88\xb6D;\xa2=\xd1\x81\xe8Ht":\x13]\x88\xe4\x19\xb3\x0flXfXn\xd8\xc40\xd3\xb9<\xc3\x8fkZ\x97g\x983\xbd\xcb3\xcc\x99\xe6\xe5\x19\xe6L\xf7\xf2\x0cs\xa6}=\xcf0g\xfa\xd7\xf3\x0csf\x02\xf4<\xc3\x9c\x99\x01=\xcf0g\xa6@\xcf3\xcc\x999\x90g\xb8\xfb\x1b\r3s \xcf\xf4\xcfM=\xd3n\xf0]\xfd\xf3\x99W\xdd\xbe_\xef\xe73\x8f\xa8\xef\x19l\x14N\x98\x9a\x12\xcd\x88\n\xa29\xd1\x82hI\xb4"*\x89\xd6D\x15QM\xb4!j\x88\xb6D;\xa2=\xd1\x81\xe8Ht":\x13]\x88\xe4\x19\xee\x90F\xc32\xc3r\xc3L\xe5zo\xe2\xc70\xa5\xeb\xbd\x899S\xbb\xde\x9b\x983\xc5\xeb\xbd\x899S\xbd\xde\x9b\x983\xe5\xeb\xbd\x899S\xbf\x9eg\x983\x03\xa0\xe7\x19\xe6\xcc\x08\xe8y\x8693\x04z\x9ea\xce\x8c\x81\xde\x9b\xb8\xfbk\xe6@\xefM\xcc\x999\x90g\xfa\xb9\xd43\xedV\xdf\xf5\x9e\xe9v\x00\xfb\x9e\xc1Z`\xfe\nhB4%\x9a\x11\x15Ds\xa2\x05\xd1\x92hET\x12\xad\x89*\xa2\x9ahC\xd4\x10m\x89vD{\xa2\x03\xd1\x91\xe8Dt&\xba\x10\xc93\xdc+\x8d\x86e\x86\x99\xc6\x83\xa9\\\x9e\xe1\xc70\xa5\xcb3\xcc\x99\xda\xe5\x19\xe6L\xf1\xf2\x0cs\xa6zy\x869S\xbe<\xc3\x9c\xa9_\x9ea\xce\x0c\x80<\xc3\x9c\x19\x01y\x8693\x04\xf2\x0csf\x0c\xe4\x19\xee\xf4\x9a9\x90g\x983s \xcf\xf4s\xa9g\xda\r\xbe\xeb=\xd3\xed\xfb\xf5=\x83U\xc1\xfc\x15\xd0\x84hJ4#*\x88\xe6D\x0b\xa2%\xd1\x8a\xa8$Z\x13UD5\xd1\x86\xa8!\xda\x12\xed\x88\xf6D\x07\xa2#\xd1\x89\xe8Lt!\x92g\xb8/\x1a\r\xcb\x0c3\x8d\xcb3\xbc\x9e\xe9\\\xefM\xcc\x99\xd6\xf5\xde\xc4\x9c\xe9]\xefM\xcc\x99\xe6\xf5\xde\xc4\x9c\xe9^\xefM\xcc\x99\xf6\xf5\xde\xc4\x9c\xe9_\xefM\xcc\x99\t\xd0{\x13sf\x06\xf4\xde\xc4\x9c\x99\x02\xbd71g\xe6@\xefM\xc8\xc93df\x0e\xe4\x99~.\xf5L\xbb\xc1w\xbdg\xba}\xbf\xbeg\xb0*\x98\xbf\x02\x9a\x10M\x89fD\x05\xd1\x9chA\xb4$Z\x11\x95Dk\xa2\x8a\xa8&\xda\x105D[\xa2\x1d\xd1\x9e\xe8@t$:\x11\x9d\x89.D\xf2\x0c\xf7E\xa3a\x99a\xa6qy\x86\xd73\x9d\xcb3\xcc\x99\xd6\xe5\x19\xe6L\xef\xf2\x0cs\xa6yy\x869\xd3\xbd<\xc3\x9ci_\x9ea\xce\xf4/\xcf0g&@\x9ea\xce\xcc\x80<\xc3\x9c\x99\x02y\x8693\x07\xf2\x0cr\xf2\x0c\x99\x99\x03y\xa6\x9fK=\xd3n\xf0]\xef\x99n\xdf\xaf\xef\x19\xac\n\xe6\xaf\x80&DS\xa2\x19QA4\'Z\x10-\x89VD%\xd1\x9a\xa8"\xaa\x896D\r\xd1\x96hG\xb4\':\x10\x1d\x89NDg\xa2\x0b\x91<\xc3}\xd1hXf\x98i\\\x9e\xe1\xf5L\xe7\xf2\x0cs\xa6uy\x869\xd3\xbb<\xc3\x9ci^\x9ea\xcet/\xcf0g\xda\x97g\x983\xfd\xcb3\xcc\x99\t\x90g\x9833 \xcf0g\xa6@\x9ea\xce\xcc\x81<\x83\x9c<Cf\xe6@\x9e\xe9\xe7R\xcf\xb4\x1b|\xd7{\xa6\xdb\xf7\xeb{\x06\xab\x82\xf9+\xa0\t\xd1\x94hFT\x10\xcd\x89\x16DK\xa2\x15QI\xb4&\xaa\x88j\xa2\rQC\xb4%\xda\x11\xed\x89\x0eDG\xa2\x13\xd1\x99\xe8B$\xcfp_4\x1a\x96\x19f\x1a\x97gx=\xd3\xb9<\xc3\x9ci]\x9ea\xce\xf4.\xcf0g\x9a\x97g\x983\xdd\xcb3\xcc\x99\xf6\xe5\x19\xe6L\xff\xf2\x0csf\x02\xe4\x19\xe6\xcc\x0c\xc83\xcc\x99)\x90g\x983s \xcf \'\xcf\x90\x999\x90g\xfa\xb9\xd43\xed\x06\xdf\xf5\x9e\xe9\xf6\xfd\xfa\x9e\xc1\xaa`\xfe\nhB4%\x9a\x11\x15Ds\xa2\x05\xd1\x92hET\x12\xad\x89*\xa2\x9ahC\xd4\x10m\x89vD{\xa2\x03\xd1\x91\xe8Dt&\xba\x10\xc93\xdc\x17\x8d\x86e\x86\x99\xc6\xe5\x19^\xcft.\xcf0gZ\x97g\x983\xbd\xcb3\xcc\x99\xe6\xe5\x19\xe6L\xf7\xf2\x0cs\xa6}y\x869\xd3\xbf<\xc3\x9c\x99\x00y\x8693\x03\xf2\x0csf\n\xe4\x19\xe6\xcc\x1c\xc83\xc8\xc93df\x0e\xe4\x99~.\xf1\xcc\xebg\xed\x03\xdf\xa7\xd3}\xe0G\xd4\xfbsm\xa2\t\xd1\x94hFT\x10\xcd\x89\x16DK\xa2\x15QI\xb4&\xaa\x88j\xa2\rQC\xb4%\xda\x11\xed\x89\x0eDG\xa2\x13\xd1\x99\xe8B\x14\x82a\xd1\xb0\xcc\xb0\xdc0Sy0\x9d\x07Sz0\xad\x07S{0\xbd\x07S|0\xcd\x07S}0\xdd\x07S~0\xed\x07S\x7f0\xfd\x073\x00\xc1L@0#\x10\xcc\x0c\x043\x04\xc1LA0c\x10\xcc\x1cD3\x07\xd1\xccA4s\x10\xd39H=\xf3\xac}\xe0\xd7\xdc\x07~D}\xcfp\x1f\x98\xa9)\xd1\x8c\xa8 \x9a\x13-\x88\x96D+\xa2\x92hMT\x11\xd5D\x1b\xa2\x86hK\xb4#\xda\x13\x1d\x88\x8eD\'\xa23\xd1\x85H\x9e1\xfb\xc0\x86e\x86\xe5\x86M\x0c3\x9d\xcb3f\x1f\xd80S\xbb<\xc3sM\xf1\xf2\x0cs\xa6zy\x869S\xbe<\xc3\x9c\xa9_\x9e1\xfb\xc0\x86\x99\t\x90gx\xae\x99\x01y\x8693\x05\xf2\x0csf\x0e\xe4\x19\xb3\x0fl\x98\x99\x03y\xe6O\xf7\x81_?k\x1f\xf8>=x\x9e\xc1\xfa`\xfe\x98zR\xcf\x84hJ4#*\x88\xe6D\x0b\xa2%\xd1\x8a\xa8$Z\x13UD5\xd1\x86\xa8!\xda\x12\xed\x88\xf6D\x07\xa2#\xd1\x89\xe8Lt!\x92g\xcc>\xb0a\x99a\xa6\xf1`*\xd7\xf3\x0c?\x86)]\xcf3\xcc\x99\xda\xe5\x19\xe6L\xf1\xf2\x0cs\xa6zy\x869S\xbe<\xc3\x9c\xa9_\x9ea\xce\x0c\x80\x9eg\x983#\xa0\xe7\x19\xe6\xcc\x10\xe8y\x8693\x06z\x9e\xe1\xee\xaf\x99\x03=\xcf0g\xe6@\x9e\xf9\xd3}\xe0\xd7\xed\x06\xdf\xd5?\x9f\xb9O\x0f<\x83U\xc1\xfc1\xd5\xf7\x0cRS\xa6fD\x05\xd1\x9chA\xb4$Z\x11\x95Dk\xa2\x8a\xa8&\xda\x105D[\xa2\x1d\xd1\x9e\xe8@t$:\x11\x9d\x89.D\xf2\x0cwH\xa3a\x99a\xa6qy\x86\xd73\x9d\xeby\x869\xd3\xba\xde\x9b\x983\xbd\xeb\xbd\x899\xd3\xbc\xde\x9b\x983\xdd\xeb\xbd\x899\xd3\xbe\xde\x9b\x983\xfd\xeb\xbd\x8993\x01z\x9ea\xce\xcc\x80\x9eg\x983S\xa0\xe7\x19\xe6\xcc\x1c\xe8y\x069y\x86\xcc\xcc\x81<\xd3\xcf\xa5\xefM\xed\x06\xdf\xf5\x9e\xe9\xf6\xfdz?\x07~\x8dU\xc1\x9chB4%\x9a\x11\x15Ds\xa2\x05\xd1\x92hET\x12\xad\x89*\xa2\x9ahC\xd4\x10m\x89vD{\xa2\x03\xd1\x91\xe8Dt&\xba\x10\xc93\xdc!\x8d\x86e\x86\x99\xc6\xe5\x19^\xcft.\xcf0gZ\x97g\x983\xbd\xcb3\xcc\x99\xe6\xe5\x19\xe6L\xf7\xf2\x0cs\xa6}y\x869\xd3\xbf<\xc3\x9c\x99\x00y\x8693\x03\xf2\x0csf\n\xe4\x19\xe6\xcc\x1c\xc83\xc8\xc93df\x0e\xe4\x99~.\xf5L\xbb\xc1w\xbdg\xba}\xbf\xbeg\xb0*\x98\xbf\x06\x9a\x10M\x89fD\x05\xd1\x9chA\xb4$Z\x11\x95Dk\xa2\x8a\xa8&\xda\x105D[\xa2\x1d\xd1\x9e\xe8@t$:\x11\x9d\x89.D\xf2\x0c\xf7E\xa3a\x99a\xa6qy\x86\xd73\x9d\xcb3\xcc\x99\xd6\xe5\x19\xe6L\xef\xf2\x0cs\xa6yy\x869\xd3\xbd<\xc3\x9ci_\x9ea\xce\xf4/\xcf0g&@\x9ea\xce\xcc\x80<\xc3\x9c\x99\x02y\x8693\x07\xf2\x0cr\xf2\x0c\x99\x99\x03y\xa6\x9fK=\xd3n\xf0]\xef\x99n\xdf\xaf\xef\x19\xac\n\xe6\xaf\x81&DS\xa2\x19QA4\'Z\x10-\x89VD%\xd1\x9a\xa8"\xaa\x896D\r\xd1\x96hG\xb4\':\x10\x1d\x89NDg\xa2\x0b\x91<\xc3}\xd1hXf\x98i\\\x9e\xe1\xf5L\xe7\xf2\x0cs\xa6uy\x869\xd3\xbb<\xc3\x9ci^\x9ea\xcet/\xcf0g\xda\x97g\x983\xfd\xcb3\xcc\x99\t\x90g\x9833 \xcf0g\xa6@\x9ea\xce\xcc\x81<\x83\x9c<Cf\xe6@\x9e\xe9\xe7R\xcf\xb4\x1b|\xd7{\xa6\xdb\xf7\xeb{\x06\xab\x82\xf9k\xa0\t\xd1\x94hFT\x10\xcd\x89\x16DK\xa2\x15QI\xb4&\xaa\x88j\xa2\rQC\xb4%\xda\x11\xed\x89\x0eDG\xa2\x13\xd1\x99\xe8B$\xcfp_4\x1a\x96\x19f\x1a\x97gx=\xd3\xb9<\xc3\x9ci]\x9ea\xce\xf4.\xcf0g\x9a\x97g\x983\xdd\xcb3\xcc\x99\xf6\xe5\x19\xe6L\xff\xf2\x0csf\x02\xe4\x19\xe6\xcc\x0c\xc83\xcc\x99)\x90g\x983s \xcf \'\xcf\x90\x999\x90g\xfa\xb9\xd43\xed\x06\xdf\xf5\x9e\xe9\xf6\xfd\xfa\x9e\xc1\xaa`\xfe\x1ahB4%\x9a\x11\x15Ds\xa2\x05\xd1\x92hET\x12\xad\x89*\xa2\x9ahC\xd4\x10m\x89vD{\xa2\x03\xd1\x91\xe8Dt&\xba\x10\xc93\xdc\x17\x8d\x86e\x86\x99\xc6\xe5\x19^\xcft.\xcf0gZ\x97g\x983\xbd\xcb3\xcc\x99\xe6\xe5\x19\xe6L\xf7\xf2\x0cs\xa6}y\x869\xd3\xbf<\xc3\x9c\x99\x00y\x8693\x03\xf2\x0csf\n\xe4\x19\xe6\xcc\x1c\xc83\xc8\xc93df\x0e\xe4\x99~.\xf5L\xbb\xc1w\xbdg\xba}\xbf\xbeg\xb0*\x98\xbf\x06\x9a\x10M\x89fD\x05\xd1\x9chA\xb4$Z\x11\x95Dk\xa2\x8a\xa8&\xda\x105D[\xa2\x1d\xd1\x9e\xe8@t$:\x11\x9d\x89.D\xf2\x0c\xf7E\xa3a\x99a\xa6qy\x86\xd73\x9d\xcb3\xcc\x99\xd6\xe5\x19\xe6L\xef\xf2\x0cs\xa6yy\x869\xd3\xbd<\xc3\x9ci_\x9ea\xce\xf4/\xcf0g&@\x9ea\xce\xcc\x80<\xc3\x9c\x99\x02y\x8693\x07\xf2\x0cr\xf2\x0c\x99\x99\x03y\xa6\x9fK<\xf3\xe6Y\xfb\xc0\xf7\xe9\xf4\xcf\xb5\x1fQoO\x8fhB4%\x9a\x11\x15Ds\xa2\x05\xd1\x92hET\x12\xad\x89*\xa2\x9ahC\xd4\x10m\x89vD{\xa2\x03\xd1\x91\xe8Dt&\xba\x10\x85`X4,3,7\xccT\x1eL\xe7\xc1\x94\x1eL\xeb\xc1\xd4\x1eL\xef\xc1\x14\x1fL\xf3\xc1T\x1fL\xf7\xc1\x94\x1fL\xfb\xc1\xd4\x1fL\xff\xc1\x0c@0\x13\x10\xcc\x08\x043\x03\xc1\x0cA0S\x10\xcc\x18\x043\x07\xd1\xccA4s\x10\xcd\x1c\xc4t\x0eR\xcf<k\x1f\xf8\r\xf7\x81\x1fQ\xdf3\xdc\x07fjJ4#*\x88\xe6D\x0b\xa2%\xd1\x8a\xa8$Z\x13UD5\xd1\x86\xa8!\xda\x12\xed\x88\xf6D\x07\xa2#\xd1\x89\xe8Lt!\x92g\xcc>\xb0a\x99a\xb9a\x13\xc3L\xe7\xf2\x8c\xd9\x076\xcc\xd4.\xcf\x98}`\xc3L\xf3\xf2\x0c\xcf5\xdd\xcb3\xcc\x99\xf6\xe5\x19\xe6L\xff\xf2\x0csf\x02\xe4\x19\xb3\x0fl\x98\x19\x02y\x86\xe7\x9a1\x90g\xb8\xfbk\xe6@\x9ea\xce\xcc\x81<\xf3\xa7\xfb\xc0o\x9e\xb5\x0f|\x9f\x1e<\xcfp\x1f\xf81\xd5\xdb\xd3#\x9a\x12\xcd\x88\n\xa29\xd1\x82hI\xb4"*\x89\xd6D\x15QM\xb4!j\x88\xb6D;\xa2=\xd1\x81\xe8Ht":\x13]\x88\xe4\x19\xb3\x0flXfXn\xd8\xc40\xd3\xb9<\xc3\x8fkZ\xd7\xf3\x0cs\xa6w=\xcf0g\x9a\x97g\x983\xdd\xcb3\xcc\x99\xf6\xe5\x19\xe6L\xff\xf2\x0csf\x02\xe4\x19\xe6\xcc\x0c\xe8y\x8693\x05z\x9ea\xce\xcc\x81\x9eg\xb8\xfb\x1b\r3s \xcf\xfc\xe9>\xf0\x9bv\x83\xef\xea\x9f\xcf\xdc\xa7\x07\x9e\xc1\xaa`\xfe\x98\xea{\x06\xa9)S3\xa2\x82hN\xb4 Z\x12\xad\x88J\xa25QET\x13m\x88\x1a\xa2-\xd1\x8ehOt :\x12\x9d\x88\xceD\x17"y\x86\xfb\xa2\xd1\xb0\xcc0\xd3x\x98\x98\x9c\xe9\\\x9e\xe1\xc75\xad\xcb3\xcc\x99\xde\xe5\x19\xe6L\xf3\xf2\x0cs\xa6{y\x869\xd3\xbe<\xc3\x9c\xe9_\x9ea\xceL\x80<\xc3\x9c\x99\x01y\x8693\x05\xf2\x0csf\x0e\xe4\x19\xee\xfe\x9a9\xd0{\x13s\xe9\x1c\xa4\xefM\xed\x06\xdf\xf5\x9e\xe9\xf6\xfdz?\x07~\x83U\xc1\x9chB4%\x9a\x11\x15Ds\xa2\x05\xd1\x92hET\x12\xad\x89*\xa2\x9ahC\xd4\x10m\x89vD{\xa2\x03\xd1\x91\xe8Dt&\xba\x10\xc93\xdc\x17\x8d\x86e\x86\x99\xc6\xe5\x19^\xcft.\xcf0gZ\x97g\x983\xbd\xcb3\xcc\x99\xe6\xe5\x19\xe6L\xf7\xf2\x0cs\xa6}y\x869\xd3\xbf<\xc3\x9c\x99\x00y\x8693\x03\xf2\x0csf\n\xe4\x19\xe6\xcc\x1c\xc83\xc8\xe9\xbd\x89\xcc\xcc\x81\x9eg\xfa\xb9\xd43\xed\x06\xdf\xf5\x9e\xe9\xf6\xfd\xfa\x9e\xc1\xaa`\xfe\x06hB4%\x9a\x11\x15Ds\xa2\x05\xd1\x92hET\x12\xad\x89*\xa2\x9ahC\xd4\x10m\x89vD{\xa2\x03\xd1\x91\xe8Dt&\xba\x10\xc93\xdc\x17\x8d\x86e\x86\x99\xc6\xe5\x19^\xcft.\xcf0gZ\x97g\x983\xbd\xcb3\xcc\x99\xe6\xe5\x19\xe6L\xf7\xf2\x0cs\xa6}y\x869\xd3\xbf<\xc3\x9c\x99\x00y\x8693\x03\xf2\x0csf\n\xe4\x19\xe6\xcc\x1c\xc83\xc8\xc93df\x0e\xe4\x99~.\xf5L\xbb\xc1w\xbdg\xba}\xbf\xbeg\xb0*\x98\xbf\x01\x9a\x10M\x89fD\x05\xd1\x9chA\xb4$Z\x11\x95Dk\xa2\x8a\xa8&\xda\x105D[\xa2\x1d\xd1\x9e\xe8@t$:\x11\x9d\x89.D\xf2\x0c\xf7E\xa3a\x99a\xa6qy\x86\xd73\x9d\xcb3\xcc\x99\xd6\xe5\x19\xe6L\xef\xf2\x0cs\xa6yy\x869\xd3\xbd<\xc3\x9ci_\x9ea\xce\xf4/\xcf0g&@\x9ea\xce\xcc\x80<\xc3\x9c\x99\x02y\x8693\x07\xf2\x0cr\xf2\x0c\x99\x99\x03y\xa6\x9fK=\xd3n\xf0]\xef\x99n\xdf\xaf\xef\x19\xac\n\xe6o\x80&DS\xa2\x19QA4\'Z\x10-\x89VD%\xd1\x9a\xa8"\xaa\x896D\r\xd1\x96hG\xb4\':\x10\x1d\x89NDg\xa2\x0b\x91<\xc3}\xd1hXf\x98i\\\x9e\xe1\xf5L\xe7\xf2\x0cs\xa6uy\x869\xd3\xbb<\xc3\x9ci^\x9ea\xcet/\xcf0g\xda\x97g\x983\xfd\xcb3\xcc\x99\t\x90g\x9833 \xcf0g\xa6@\x9ea\xce\xcc\x81<\x83\x9c<Cf\xe6@\x9e\xe9\xe7R\xcf\xb4\x1b|\xd7{\xa6\xdb\xf7\xeb{\x06\xab\x82\xf9\x1b\xa0\t\xd1\x94hFT\x10\xcd\x89\x16DK\xa2\x15QI\xb4&\xaa\x88j\xa2\rQC\xb4%\xda\x11\xed\x89\x0eDG\xa2\x13\xd1\x99\xe8B$\xcfp_4\x1a\x96\x19f\x1a\x97gx=\xd3\xb9<\xc3\x9ci]\x9ea\xce\xf4.\xcf0g\x9a\x97g\x983\xdd\xcb3\xcc\x99\xf6\xe5\x19\xe6L\xff\xf2\x0csf\x02\xe4\x19\xe6\xcc\x0c\xc83\xcc\x99)\x90g\x983s \xcf \'\xcf\x90\x999\x90g\xfa\xb9\xd43\xed\x06\xdf\xf5\x9e\xe9\xf6\xfd\xfa\x9e\xc1\xaa`\xfe\x06hB4%\x9a\x11\x15Ds\xa2\x05\xd1\x92hET\x12\xad\x89*\xa2\x9ahC\xd4\x10m\x89vD{\xa2\x03\xd1\x91\xe8Dt&\xba\x10\xc93\xdc\x17\x8d\x86e\x86\x99\xc6\xe5\x19^\xcft.\xcf0gZ\x97g\x983\xbd\xcb3\xcc\x99\xe6\xe5\x19\xe6L\xf7\xf2\x0cs\xa6}y\x869\xd3\xbf<\xc3\x9c\x99\x00y\x8693\x03\xf2\x0csf\n\xe4\x19\xe6\xcc\x1c\xc83\xc8\xc93df\x0e\xe4\x99~.\xf1\xcc\xdbg\xed\x03\xdf\xa7\xd3?\xd7~D\xbd==\xa2\t\xd1\x94hFT\x10\xcd\x89\x16DK\xa2\x15QI\xb4&\xaa\x88j\xa2\rQC\xb4%\xda\x11\xed\x89\x0eDG\xa2\x13\xd1\x99\xe8B\x14\x82a\xd1\xb0\xcc\xb0\xdc0Sy0\x9d\x07Sz0\xad\x07S{0\xbd\x07S|0\xcd\x07S}0\xdd\x07S~0\xed\x07S\x7f0\xfd\x073\x00\xc1L@0#\x10\xcc\x0c\x043\x04\xc1LA0c\x10\xcc\x1cD3\x07\xd1\xccA4s\x10\xd39H=\xf3\xac}\xe0\xb7\xdc\x07~D}\xcfp\x1f\x98\xa9)\xd1\x8c\xa8 \x9a\x13-\x88\x96D+\xa2\x92hMT\x11\xd5D\x1b\xa2\x86hK\xb4#\xda\x13\x1d\x88\x8eD\'\xa23\xd1\x85H\x9e1\xfb\xc0\x86e\x86\xe5\x86M\x0c3\x9d\xcb3f\x1f\xd80S\xbb<c\xf6\x81\r3\xcd\xcb3f\x1f\xd80S\xbe<\xc3sM\xfd\xf2\x0csf\x00\xe4\x19\xe6\xcc\x08\xc83\xcc\x99!\x90g\xcc>\xb0af\x0e\xe4\x19\xee\xfeF\xc3\xcc\x1c\xc83\x7f\xba\x0f\xfc\xf6Y\xfb\xc0\xf7\xe9\xc1\xf3\x0c\xf7\x81\x1fS\xbd==\xa2)\xd1\x8c\xa8 \x9a\x13-\x88\x96D+\xa2\x92hMT\x11\xd5D\x1b\xa2\x86hK\xb4#\xda\x13\x1d\x88\x8eD\'\xa23\xd1\x85H\x9e1\xfb\xc0\x86e\x86\xe5\x86M\x0c3\x9d\xcb3f\x1f\xd80S\xbb<\xc3sM\xf1z\x9ea\xceT\xaf\xe7\x19\xe6L\xf9\xf2\x0cs\xa6~y\x8693\x00\xf2\x0csf\x04\xe4\x19\xe6\xcc\x10\xc83\xcc\x991\xd0\xf3\x0cw\x7f\xcd\x1c\xe8y\x8693\x07\xf2\xcc\x9f\xee\x03\xbf}\xd6>\xf0}z\xe0\x19\xee\x03?\xa6\xfa\x9e\xe1>0S3\xa2\x82hN\xb4 Z\x12\xad\x88J\xa25QET\x13m\x88\x1a\xa2-\xd1\x8ehOt :\x12\x9d\x88\xceD\x17"y\xc6\xec\x03\x1b\x96\x19\x96\x1b61lj\x98)]\xefM\xfc\\L\xed\xf2\x0cs\xa6xy\x869S\xbd<\xc3\x9c)_\x9ea\xce\xd4/\xcf0g\x06@\x9ea\xce\x8c\x80<\xc3\x9c\x19\x02y\x8693\x06\xf2\x0cwz\xcd\x1c\xc83\xcc\x999\x90g\xfa\xb9\xf4\xbd\xa9\xdd\xe0\xbb\xfa\xe7\xc0o\xbb}\xbf\xde\xcf\x81\x1fQ\xff\xbd\t\xdb\x83\x13\xa6\xa6D3\xa2\x82hN\xb4 Z\x12\xad\x88J\xa25QET\x13m\x88\x1a\xa2-\xd1\x8ehOt :\x12\x9d\x88\xceD\x17"y\x86\xfb\xa2\xd1\xb0\xcc\xb0\xdc0S\xb9~>\xc3\x8faJ\x97g\x983\xb5\xcb3\xcc\x99\xe2\xe5\x19\xe6L\xf5\xf2\x0cs\xa6|y\x869S\xbf<\xc3\x9c\x19\x00y\x8693\x02\xf2\x0csf\x08\xe4\x19\xe6\xcc\x18\xc83\xdc\xf35s \xcf0g\xe6@\x9e\xe9\xe7R\xcf\xb4\x1b|\xd7{\xa6\xdb\xf7\xeb{\x06\xab\x82\xf9[\xa0\t\xd1\x94hFT\x10\xcd\x89\x16DK\xa2\x15QI\xb4&\xaa\x88j\xa2\rQC\xb4%\xda\xfd\x7fJ\xcdd7r\xf4\x0c\x82\x8fd\xfb\xd4\xd2\xc5\xc0O\xb2\xf6}!Y\xe4m\x0e\x03\xf8\xeey\x7f8K#\x19\xa4"\x1a(]\x03\xa9\xea\x062\x11\xa8"?\xa2\x96\xa8#\xea\x89\x1eD\x03\xd1H\x14\xcf\xf0^\xb4\x12V\x0b\x93\xc6\x8bT\x1e\xcf\xf0\xdf\x90\xd2\xe3\x19\xe6\xa4\xf6x\x869)>\x9eaN\xaa\x8fg\x98\x93\xf2\xe3\x19\xe6\xa4\xfex\x869\x19@<\xc3\x9cL \x9eaNF\x10\xcf0\'3\x88g\x90\xcb\xf3\x192\xd9A\x9e\x0337\xdf\xc1\xdc3\xcf\x0b\xbe\xd7=\xf3y\xef7\xf5\x0cN\x05\x9b_@\x0b\xa2%\xd1\x8ahM\xb4!\xda\x12\xed\x88\xf6D\x07\xa2#\xd1\x89\xe8Lt!\xba\x12\xdd\x88\xeeD-QG\xd4\x13=\x88\x06\xa2\x91(\x9e\xe1\xbdh%\xac\x16&\x8d\xc73\xfc<\xe9<\xcfg\x98\x93\xd6\xf3\xbe\x899\xe9=\xef\x9b\x98\x93\xe6\xf3\x1c\x989\xe9>\xef\x9b\x98\x93\xf6\xf3\xbe\x899\xe9?\xef\x9b\x98\x93\x05\xe4}\x13s\xb2\x81\xbcobNV\x90\xf7M\xcc\xc9\x0e\xe2\x19\xe4\xf2}\x86Lv\x90\xef3\xd3\xdc\xdc3\xcf\x0b\xbe\xd7=\xf3y\xef7\xf5\x0cN\x05\x9b_@\x0b\xa2%\xd1\x8ahM\xb4!\xda\x12\xed\x88\xf6D\x07\xa2#\xd1\x89\xe8Lt!\xba\x12\xdd\x88\xeeD-QG\xd4\x13=\x88\x06\xa2\x91(\x9e\xe1\xbdh%\xac\x16&\x8d\xc73\xfc<\xe9<\x9eaNZ\x8fg\x98\x93\xde\xe3\x19\xe6\xa4\xf9x\x869\xe9>\x9eaN\xda\x8fg\x98\x93\xfe\xe3\x19\xe6d\x01\xf1\x0cs\xb2\x81x\x869YA<\xc3\x9c\xec \x9eA.\x9e!\x93\x1d\xc43\xd3\xdc\xdc3\xcf\x0b\xbe\xd7=\xf3y\xef7\xf5\x0cN\x05\x9b_@\x0b\xa2%\xd1\x8ahM\xb4!\xda\x12\xed\x88\xf6D\x07\xa2#\xd1\x89\xe8Lt!\xba\x12\xdd\x88\xeeD-QG\xd4\x13=\x88\x06\xa2\x91(\x9e\xe1\xbdh%\xac\x16&\x8d\xc73\xfc<\xe9<\x9eaNZ\x8fg\x98\x93\xde\xe3\x19\xe6\xa4\xf9x\x869\xe9>\x9eaN\xda\x8fg\x98\x93\xfe\xe3\x19\xe6d\x01\xf1\x0cs\xb2\x81x\x869YA<\xc3\x9c\xec \x9eA.\x9e!\x93\x1d\xc43\xd3\xdc\xdc3\xcf\x0b\xbe\xd7=\xf3y\xef7\xf5\x0cN\x05\x9b_@\x0b\xa2%\xd1\x8ahM\xb4!\xda\x12\xed\x88\xf6D\x07\xa2#\xd1\x89\xe8Lt!\xba\x12\xdd\x88\xeeD-QG\xd4\x13=\x88\x06\xa2\x91(\x9e\xe1\xbdh%\xac\x16&\x8d\xc73\xfc<\xe9<\x9eaNZ\x8fg\x98\x93\xde\xe3\x19\xe6\xa4\xf9x\x869\xe9>\x9eaN\xda\x8fg\x98\x93\xfe\xe3\x19\xe6d\x01\xf1\x0cs\xb2\x81x\x869YA<\xc3\x9c\xec \x9eA.\x9e!\x93\x1d\xc43\xd3\xdc\xcc3o?\xba\x07\xfeH\xcf\xdfk\x7f\xa1\xc9\xfb&\xa2\x05\xd1\x92hE\xb4&\xda\x10m\x89vD{\xa2\x03\xd1\x91\xe8Dt&\xba\x10]\x89nDw\xa2\x96\xa8#\xea\x89\x1eD\x03\xd1HT\x8a\xb0JX-\xac\x11&\x95\x17\xe9\xbcH\xe9EZ/R{\x91\xde\x8b\x14_\xa4\xf9"\xd5\x17\xe9\xbeH\xf9E\xda/R\x7f\x91\xfe\x8b\x0c\xa0\xc8\x02\x8aL\xa0\xc8\x06\x8a\x8c\xa0\xc8\n\x8a\xcc\xa0\xc8\x0e*\xd9A%;\xa8d\x07\xd5|\x07s\xcf\xfc\xe8\x1e\xf8\x8d\xf7\xc0_h\xea\x19\xde\x033\xb5$Z\x11\xad\x896D[\xa2\x1d\xd1\x9e\xe8@t$:\x11\x9d\x89.DW\xa2\x1b\xd1\x9d\xa8%\xea\x88z\xa2\x07\xd1@4\x12\xc53r\x0f,\xac\x16\xd6\x08[\x08\x93\xce\xe3\x19\xb9\x07\x16&\xb5\xc73r\x0f,L\x9a\x8fg\xe4\x1eX\x98\x94\x1f\xcf\xc8=\xb00\xe9?\x9e\xe1\xdf\xca\x02\xe2\x19\xe6d\x03\xf1\x0cs\xb2\x82x\x869\xd9A<#\xf7\xc0\xc2d\x07\xf1\xcco\xef\x81\xdf~t\x0f\xfc\x91\xfe\xf6}\x86\xf7\xc0_\xa9\xc9\x9d\x1e\xd1\x92hE\xb4&\xda\x10m\x89vD{\xa2\x03\xd1\x91\xe8Dt&\xba\x10]\x89nDw\xa2\x96\xa8#\xea\x89\x1eD\x03\xd1H\x14\xcf\xc8=\xb0\xb0ZX#l!L:\x8fg\xe4\x1eX\x98\xd4\x1e\xcf\xc8=\xb00i>\x9e\xe1\xdfJ\xf7\xf9>\xc3\x9c\xb4\x9f\xef3\xccI\xff\xf1\x0cs\xb2\x80x\x869\xd9@<\xc3\x9c\xac \x9eaNv\x10\xcf\xf0\xf6\xb7\x12&;\x88g~{\x0f\xfc\xf6\xa3{\xe0\x8f\xf47\xcf\xf0\x1e\xf8+5\xf5\x0c\xef\x81\x99Z\x11\xad\x896D[\xa2\x1d\xd1\x9e\xe8@t$:\x11\x9d\x89.DW\xa2\x1b\xd1\x9d\xa8%\xea\x88z\xa2\x07\xd1@4\x12\xc53r\x0f,\xac\x16\xd6\x08[\x08[\n\x93\xd2\xf3\xbbI\xee\x81\x85I\xef\xf9\xdd\xc4\xbf\x95\xe6\xe3\x19\xe6\xa4\xfbx\x869i?\x9eaN\xfa\x8fg\x98\x93\x05\xc43\xcc\xc9\x06\xe2\x19\xe6d\x05\xf1\x0cs\xb2\x83x\x86\xb7\xbf\x950\xd9A<\xf3\xdb{\xe0\xb7\xe7\x05\xdf\xcb\xcf\x81?\xd2\xdf<\x83S\xc1\xe6+5\xf5\x0cRK\xa6VDk\xa2\r\xd1\x96hG\xb4\':\x10\x1d\x89NDg\xa2\x0b\xd1\x95\xe8Ft\'j\x89:\xa2\x9e\xe8A4\x10\x8dD\xf1\x0coH+a\xb50i\xbc,$\'\x9d\xe7\xfb\x0c\xff]i=\xcfg\x98\x93\xde\xe3\x19\xe6\xa4\xf9x\x869\xe9>\x9eaN\xda\x8fg\x98\x93\xfe\xe3\x19\xe6d\x01\xf1\x0cs\xb2\x81x\x869YA<\xc3\x9c\xec \x9e\xe1\xed\xaf\xec \xcfg\x98\x9b\xef`\xfe|\xe6y\xd5\xf7\xbag>o\x00\'\xef\x9b\xdep\x16\xd8\x10-\x88\x96D+\xa25\xd1\x86hK\xb4#\xda\x13\x1d\x88\x8eD\'\xa23\xd1\x85\xe8Jt#\xba\x13\xb5D\x1dQO\xf4 \x1a\x88F\xa2x\x867\xa4\x95\xb0Z\x984\x1e\xcf\xf0\xf3\xa4\xf3x\x869i=\x9eaNz\x8fg\x98\x93\xe6\xe3\x19\xe6\xa4\xfbx\x869i?\x9eaN\xfa\x8fg\x98\x93\x05\xc43\xcc\xc9\x06\xe2\x19\xe6d\x05\xf1\x0cs\xb2\x83x\x86w\xbe\xb2\x83x\x86\xb9\xf9\x0e\xe6\x9ey^\xf0\xbd\xee\x99\xcf{\xbf\xa9gp*\xd8\xbc\x01-\x88\x96D+\xa25\xd1\x86hK\xb4#\xda\x13\x1d\x88\x8eD\'\xa23\xd1\x85\xe8Jt#\xba\x13\xb5D\x1dQO\xf4 \x1a\x88F\xa2x\x86\xf7\xa2\x95\xb0Z\x984\x1e\xcf\xf0\xf3\xa4\xf3x\x869i=\x9eaNz\x8fg\x98\x93\xe6\xe3\x19\xe6\xa4\xfbx\x869i?\x9eaN\xfa\x8fg\x98\x93\x05\xc43\xcc\xc9\x06\xe2\x19\xe6d\x05\xf1\x0cs\xb2\x83x\x06\xb9\xbco"\x93\x1d\xe4w\xd347\xf7\xcc\xf3\x82\xefu\xcf|\xde\xfbM=\x83S\xc1\xe6\rhA\xb4$Z\x11\xad\x896D[\xa2\x1d\xd1\x9e\xe8@t$:\x11\x9d\x89.DW\xa2\x1b\xd1\x9d\xa8%\xea\x88z\xa2\x07\xd1@4\x12\xc53\xbc\x17\xad\x84\xd5\xc2\xa4\xf1x\x86\x9f\'\x9d\xc73\xccI\xeb\xf1\x0cs\xd2{<\xc3\x9c4\x1f\xcf0\'\xdd\xc73\xccI\xfb\xf1\x0cs\xd2\x7f<\xc3\x9c, \x9eaN6\x10\xcf0\'+\x88g\x98\x93\x1d\xc43\xc8\xc53d\xb2\x83xf\x9a\x9b{\xe6y\xc1\xf7\xbag>\xef\xfd\xa6\x9e\xc1\xa9`\xf3\x06\xb4 Z\x12\xad\x88\xd6D\x1b\xa2-\xd1\x8ehOt :\x12\x9d\x88\xceD\x17\xa2+\xd1\x8d\xe8N\xd4\x12uD=\xd1\x83h \x1a\x89\xe2\x19\xde\x8bV\xc2ja\xd2x<\xc3\xcf\x93\xce\xe3\x19\xe6\xa4\xf5x\x869\xe9=\x9eaN\x9a\x8fg\x98\x93\xee\xe3\x19\xe6\xa4\xfdx\x869\xe9?\x9eaN\x16\x10\xcf0\'\x1b\x88g\x98\x93\x15\xc43\xcc\xc9\x0e\xe2\x19\xe4\xe2\x192\xd9A<3\xcd\xcd=\xf3\xbc\xe0{\xdd3\x9f\xf7~S\xcf\xe0T\xb0y\x03Z\x10-\x89VDk\xa2\r\xd1\x96hG\xb4\':\x10\x1d\x89NDg\xa2\x0b\xd1\x95\xe8Ft\'j\x89:\xa2\x9e\xe8A4\x10\x8dD\xf1\x0c\xefE+a\xb50i<\x9e\xe1\xe7I\xe7\xf1\x0cs\xd2z<\xc3\x9c\xf4\x1e\xcf0\'\xcd\xc73\xccI\xf7\xf1\x0cs\xd2~<\xc3\x9c\xf4\x1f\xcf0\'\x0b\x88g\x98\x93\r\xc43\xcc\xc9\n\xe2\x19\xe6d\x07\xf1\x0cr\xf1\x0c\x99\xec \x9e\x99\xe6f\x9ey\xff\xd1=\xf0Gz\xfe\xbe\xe9\x0bM\xee\xf4\x88\x16DK\xa2\x15\xd1\x9ahC\xb4%\xda\x11\xed\x89\x0eDG\xa2\x13\xd1\x99\xe8Bt%\xba\x11\xdd\x89Z\xa2\x8e\xa8\'z\x10\rD#Q)\xc2*a\xb5\xb0F\x98T^\xa4\xf3"\xa5\x17i\xbdH\xedEz/R|\x91\xe6\x8bT_\xa4\xfb"\xe5\x17i\xbfH\xfdE\xfa/2\x80"\x0b(2\x81"\x1b(2\x82"+(2\x83";\xa8d\x07\x95\xec\xa0\x92\x1dT\xf3\x1d\xcc=\xf3\xa3{\xe0w\xde\x03\x7f\xa1\xa9gx\x0f\xcc\xd4\x92hE\xb4&\xda\x10m\x89vD{\xa2\x03\xd1\x91\xe8Dt&\xba\x10]\x89nDw\xa2\x96\xa8#\xea\x89\x1eD\x03\xd1H\x14\xcf\xc8=\xb0\xb0ZX#l!L:\x8fg\xe4\x1eX\x98\xd4\x1e\xcf\xc8=\xb00i>\x9e\x91{`aR~<#\xf7\xc0\xc2\xa4\xffxF\xee\x81\x85\xc9\x04\xe2\x19\xfe\xad\x8c \x9eaNf\x10\xcf\xf0\xf6Wv\x10\xcf0\';\x88g~{\x0f\xfc\xfe\xa3{\xe0\x8f\xf4\xb7\xef3\xbc\x07\xfeJM\xeeg\x88\x96D+\xa25\xd1\x86hK\xb4#\xda\x13\x1d\x88\x8eD\'\xa23\xd1\x85\xe8Jt#\xba\x13\xb5D\x1dQO\xf4 \x1a\x88F\xa2xF\xee\x81\x85\xd5\xc2\x1aa\x0ba\xd2y<#\xf7\xc0\xc2\xa4\xf6xF\xee\x81\x85I\xf3\xf1\x8c\xdc\x03\x0b\x93\xf2\xe3\x19\xfe\xad\xd4\x9f\xef3\xcc\xc9\x00\xf2}\x869\x99@<\xc3\x9c\x8c \x9eaNf\x10\xcf\xf0\xf6Wv\x10\xcf0\';\x88g~{\x0f\xfc\xfe\xa3{\xe0\x8f\xf47\xcf\xf0\x1e\xf8+5\xf5\x0c\xef\x81\x99Z\x11\xad\x896D[\xa2\x1d\xd1\x9e\xe8@t$:\x11\x9d\x89.DW\xa2\x1b\xd1\x9d\xa8%\xea\x88z\xa2\x07\xd1@4\x12\xc53r\x0f,\xac\x16\xd6\x08[\x08[\n\x93\xd2\xf3\xbbI\xee\x81\x85I\xef\xf9\xdd$\xf7\xc0\xc2\xa4\xfa\xfcn\xe2\xdfJ\xf9\xf1\x0csR\x7f<\xc3\x9c\x0c \x9eaN&\x10\xcf0\'#\x88g\x98\x93\x19\xc43\xbc\xfd\x95\x1d\xc43\xcc\xc9\x0e\xe2\x99\xdf\xde\x03\xbf\xff\xe8\x1e\xf8#\xfd\xcd3\xbc\x07\xfeJM=\xc3{`\xa6VDk\xa2\r\xd1\x96hG\xb4\':\x10\x1d\x89NDg\xa2\x0b\xd1\x95\xe8Ft\'j\x89:\xa2\x9e\xe8A4\x10\x8dD\xf1\x8c\xdc\x03\x0b\xab\x855\xc2\x16\xc2\x96\xc2\xa4\xf4x\x86\xff\x17\xa9=\xdfg\x98\x93\xe2\xf3|\x869\xa9>\x9eaN\xca\x8fg\x98\x93\xfa\xe3\x19\xe6d\x00\xf1\x0cs2\x81x\x869\x19A<\xc3\x9c\xcc \x9e\xe1M\xaf\xec \x9eaNv\x10\xcfLs\xf3\xe73\xcf\xab\xbe\x97\xdf7\xbd\x7f\xde\x00N\xde7}\xa1\xe9\xf3\x19\\\n.\x98Z\x12\xad\x88\xd6D\x1b\xa2-\xd1\x8ehOt :\x12\x9d\x88\xceD\x17\xa2+\xd1\x8d\xe8N\xd4\x12uD=\xd1\x83h \x1a\x89\xe2\x19\xde\x8bV\xc2ja\x8d0\xa9<\xcf\x81\xf9oH\xe9\xf1\x0csR{<\xc3\x9c\x14\x1f\xcf0\'\xd5\xc73\xccI\xf9\xf1\x0csR\x7f<\xc3\x9c\x0c \x9eaN&\x10\xcf0\'#\x88g\x98\x93\x19\xc43\xbc\xe9\x95\x1d\xc43\xcc\xc9\x0e\xe2\x99in\xee\x99\xe7\x05\xdf\xeb\x9e\xf9\xbc\xf7\x9bz\x06\xa7\x82\xcd;\xd0\x82hI\xb4"Z\x13m\x88\xb6D;\xa2=\xd1\x81\xe8Ht":\x13]\x88\xaeD7\xa2;QK\xd4\x11\xf5D\x0f\xa2\x81h$\x8agx/Z\t\xab\x85I\xe3E*\x8fg\xf8oH\xe9\xf1\x0csR{<\xc3\x9c\x14\x1f\xcf0\'\xd5\xc73\xccI\xf9\xf1\x0csR\x7f<\xc3\x9c\x0c \x9eaN&\x10\xcf0\'#\x88g\x98\x93\x19\xc43\xc8\xe5}\x13\x99\xec \xef\x9b\x98\x9b\xef`\xee\x99\xe7\x05\xdf\xeb\x9e\xf9\xbc\xf7\x9bz\x06\xa7\x82\xcd;\xd0\x82hI\xb4"Z\x13m\x88\xb6D;\xa2=\xd1\x81\xe8Ht":\x13]\x88\xaeD7\xa2;QK\xd4\x11\xf5D\x0f\xa2\x81h$\x8agx/Z\t\xab\x85I\xe3\xf1\x0c?O:\xcfs`\xe6\xa4\xf5\xbc\xd7fNz\xcf\xf3\x19\xe6\xa4\xf9<\x07fN\xba\xcf{m\xe6\xa4\xfd\xbc\xd7fN\xfa\xcf\xfb&\xe6d\x01y\xaf\xcd\x9cl \xef\xb5\x99\x93\x15\xe4\xbd6s\xb2\x83x\x06\xb9|\x9f!\x93\x1d\xe4\xfb\xcc47\xf7\xcc\xf3\x82\xefu\xcf|\xde\xfbM=\x83S\xc1\xe6\x1dhA\xb4$Z\x11\xad\x896D[\xa2\x1d\xd1\x9e\xe8@t$:\x11\x9d\x89.DW\xa2\x1b\xd1\x9d\xa8%\xea\x88z\xa2\x07\xd1@4\x12\xc53\xbc\x17\xad\x84\xd5\xc2\xa4\xf1x\x86\x9f\'\x9d\xc73\xccI\xeb\xf1\x0cs\xd2{<\xc3\x9c4\x1f\xcf0\'\xdd\xc73\xccI\xfb\xf1\x0cs\xd2\x7f<\xc3\x9c, \x9eaN6\x10\xcf0\'+\x88g\x98\x93\x1d\xc43\xc8\xc53d\xb2\x83xf\x9a\x9b{\xe6y\xc1\xf7\xbag>\xef\xfd\xa6\x9e\xc1\xa9`\xf3\x0e\xb4 Z\x12\xad\x88\xd6D\x1b\xa2-\xd1\x8ehOt :\x12\x9d\x88\xceD\x17\xa2+\xd1\x8d\xe8N\xd4\x12uD=\xd1\x83h \x1a\x89\xe2\x19\xde\x8bV\xc2ja\xd2x<\xc3\xcf\x93\xce\xe3\x19\xe6\xa4\xf5x\x869\xe9=\x9eaN\x9a\x8fg\x98\x93\xee\xe3\x19\xe6\xa4\xfdx\x869\xe9?\x9eaN\x16\x10\xcf0\'\x1b\x88g\x98\x93\x15\xc43\xcc\xc9\x0e\xe2\x19\xe4\xe2\x192\xd9A<3\xcd\xcd<\xf3\xaf\x7f\xfe\xe8 \xf8\xef\xf8\xfc\x8d\xd3\xff\xd9\xe4Q\xb0\xb0\x85\xb0\xa5\xb0\x95\xb0\xb5\xb0\x8d\xb0\xad\xb0\x9d\xb0\xbd\xb0\x83\xb0\xa3\xb0\x93\xb0\xb3\xb0\x8b\xb0\xab\xb0\x9b\xb0\xbb\xb0VX\'\xac\x17\xf6\x106\x08\x1b\x85\x95b\xb02X\x1bl\x0c\xda\x18\x8a\xad\xa1\xd8\x1c\x8a\xed\xa1\xd8 \x8a-\xa2\xd8$\x8am\xa2\xd8(\x8a\xad\xa2\xd8,\x8a\xed\xa2\xd80\x8a-\xa3\xd84\x8am\xa3\xd88\x8a\xad\xa3\xd8<\x8a\xed\xa3\xd8@\x8a-\xa4\xb2\x85T\xb6\x90\xca\x16R}[\xc8\xdf~\xfa\xc7\x7f\xff\xf3\xe7\x9f\x7f5\x7f\xfc\xf5\xc7\xbf\xff\x07\x00\x00\xff\xff\x00\x00\x00\xff\xffD\x8dQ\n\xc20\x10D\xaf\xb2\xec\x01l\x83\x88 i\xa0\xf6\xdbCD\xdd$\xa5i\xb7lV\xbc\xbe\xb6\x10\xfd\x9b\xf7\x98a\xecL\x12i\xa0\x9c\x0b<\xf8\xb5h\x87\x06\x9d\xfdY\x10\n\x1d\xf6\xe6r5\xd88\xdb\xfc\xeb\xce\xae>\xd2\xcdK\x1c\x97\x02\x99\xc2w\xda\x1e\xce\x082\xc6T\xb3\xf2\xba\xdb\x13\xc2\x9dUy\xae\x94\xc8?I6:"\x04f\xad\xb0\x9d\xbcY\xa6\x92\x88\xd4}\x00\x00\x00\xff\xff\x03\x00PK\x03\x04\x14\x00\x06\x00\x08\x00\x00\x00!\x00\xb3s\xe1x?\x08\x00\x00\xdf\x1c\x00\x00\x18\x00\x00\x00xl/worksheets/sheet3.xml\x9c\x94[\x8f\xda0\x10\x85\xdf+\xf5?D~\'\x89\x93\x90\x9b\x08+v\x01u\xdf\xaaU/\xcf\xc6q\x88E\x1cS\xdb\xdcT\xf5\xbfwbHX\t\x89E+\x01\xc7`\x9do\xce\xd8\x13&OG\xd18{\xa64\x97m\x81\xb0\xeb#\x87\xb5T\x96\xbc]\x17\xe8\xe7\x8f\xe5(E\x8e6\xa4-I#[V\xa0\x13\xd3\xe8i\xfa\xf5\xcb\xe4 \xd5F\xd7\x8c\x19\x07\x08\xad.Pm\xcc6\xf7<Mk&\x88v\xe5\x96\xb5\xb0SI%\x88\x81\xafj\xed\xe9\xadb\xa4\xb4&\xd1x\x81\xef\xc7\x9e \xbcEgB\xae\x1ea\xc8\xaa\xe2\x94\xcd%\xdd\t\xd6\x9a3D\xb1\x86\x18\xc8\xafk\xbe\xd5=M\xd0Gp\x82\xa8\xcdn;\xa2Rl\x01\xb1\xe2\r7\'\x0bE\x8e\xa0\xf9\xeb\xba\x95\x8a\xac\x1a\xe8\xfb\x88#B\x9d\xa3\x82W\x00\xef\xb0/c\x7f\xbf\xa9$8UR\xcb\xca\xb8@\xf6\xce\x99o\xdb\xcf\xbc\xcc#t \xdd\xf6\xff\x10\x06G\x9eb{\xde]\xe0\x15\x15|.\x12\x1e\x0f\xac\xe0\n\x0b?\t\x8b\x07Xw\\*\xdf\xf1\xb2@\x7f1\x8e\x824\xc4\xd9\xc8_\x06\xc9(Z$\xcb\xd1,K\xe6\xa3\xc5s\x9c\xbd\xcc\xc6\x8b\xc8O\xd3\x7fh:)9\xdcp\xd7\x95\xa3XU\xa0\x19\xce_q\x88\xbc\xe9\xc4\x0e\xd0/\xce\x0e\xfa\xdd\xda\xe9\xe6q%\xe5\xa6\xdbx\x85:> 4k\x18\xed&\xc3! {\xf6\xc2\x9a\xa6@\xcfc\x18\xe9?\x16\nK\x00z\x03\xf1\xfd\xba\xa7/\xed\x04\x7fWN\xc9*\xb2k\xcc\x9b<|c|]\x1bx\\"7\x82\xce\xba\xd1\xc8\xcb\xd3\x9ci\n3\t\xa5]\x9b\x93\xca\x06\x18\xf0\xe9\x08\xde=[0R\xe4h\xf5\xc0KS\xc3\n\xbbi\x1a\'8M \x11\xddi#\xc5\xef\xcbN\x17kp\xc2UX\'\xe8\xc5\x19\xc4\xc8Y1m\x96\xbcKq\xd7\x0cGo\xcd\xa0}\xd9\xcc\xc5~\x16~P\x14\x1a\xb3>\xd0\x8b/\xf4\xdd\xf18\x8am\xda\x07\x8bC_\x16\x02z\x81D\x90\xe3A3\xf4h\xcd\xa0}\xf2\xd0\r><\xad\xe4b\x03\xbd\xda\xe28\xf2\xe3\xe0\xfe1\xc3?\x9d\xad\x07:\x1c\xb3\x1b\x86\x81\x1f\xe2\xce\xf9`\xea\xecB\x01\xed\xcb\'w\xaf\xd9\xb3s\xf2\x1f\x00\x00\xff\xff\x00\x00\x00\xff\xff\xac\x98[o\xd30\x14\x80\xdf\x91\xf8\x0f\xc6\xaa\xd0&Uksiv\xa1\xadDzI+1\x84\xd0\x84\x10/(t\xe9\x16\xb1\xb6(\t\x1b\xec\xd7c\xef\x9c\xb8\xf6I\xe6\x1a\xc1\x1e\xd8p\xbe8\xcew\x8e\x8f\xed\x0c\xcb\xdb,\xab\xa6i\x95\x8e\x87\xc5\xee\x81\x15#\xeeqV\xfeH\xb7\xa5\xf8\xeb\xe2\x9c\xb3\xdbj\xc4\xfd\xf3\x93\x90\xb3\xd5\xcf\xb2\xdam\x16Y~#\xdb\x04V\xdd\xe6\xab\xef\xf1\x0e\xfe\xf3\xcb\x0b\xd3\xd5\xc5\xf5\xefiV\xae\xb2\xadh\xeb\x9f\x04\x03>\x1e\xaed\x9foe\xa7#\x1e\x89{F\xbc\x14\xad\xf7c\xff|\xd8\xbb\x1f\x0f{+Db@|\xd9o\xcd\x04&2\x01$8\xd3\x90\xc1\x99\xc9L\x819\r4&\xea\x9b\xcc\x0c\x99\x90\xf7\xf0\xe1\xf3FK\x82-\x03\xc5,\xdaz\xf6\xcc\x9e\x97\xfa]=!TY\xf5\x9bV\xbd\xc1_)\x94=\x8cx B\xb2wH\x1e\x1f\x03\x13\xf65\x86\xbc\xfb\x04\x90\x81\x1e\no@\x1c"s\xaau\xe3\x9d\x12\x87m\x0c\x89\xc5\xbc\x8d1\xbbI\x10\xd1C\xea\x9b\xc8\x02_JO\x8c\x880Kd\xc4/%Gc\x8cH\x88\xcc\xa0\xf9\x1d\xf8\xff\x9a\xdf\xb2\xd3\x11?\xd5\xc78\xa0\t\x8e\x8c\xaf2j\x02-\x91\x9e\xab^Db\x81\x8c\x98\x7f\xea\xcd\xbc\x90\xc4\xa2\x8d!O\x9f+\xa6\xce\xf9\x04[\xb4\x0c\x87\x96\xd0\x98;d\x0e.\x91\xd1\xc7\x13\xed\xc7c\x98\x16\x8cn\xba\xadB\xa8\x02!\xd9\x11\x1f\xf4\x9fj\x03Mk\xbc\x88v\xabB\xd4\xa2\x8d\xac@\xe3\xe1ZZI\x8b"\xfd\xcdY\x91\xadG<\x0e/b/\xe0\xe3\xaf\xbf\xee\xd6\xdb\x13\xf1\xefCy2_\xbe\xbb\x9a}<z\xf9\x82\x89\x9f\xe5\xfb\xe9\xec\xf3\xd1\x87t\xf5=\xbd\xc9\xcaW\x9di\'\xbc\xe8|\xe9x\xfd~\x97u\xd9\xe5\xdb\xab\xc9\xe2\xa8\x13w\xbc.\xd3\x99@2A\x97\xf5\x8f\x8f\xbb\xff\xa9\x1f\xf6\xfa\xaez\xf3\xfa\xa6z\xc38\x7f\xf9\xe2x\xd8[\xcb\xb28\xc9\x8at\x93\xaf\xd8U~\x97\x91\xea\x87\x16\xceU\xfeL\xa1%\xd2\xa7{D\xf2g\xd6\xc2\x84d\xf6\xcc\x91\xd1\xb3\xd7\'u#AF\x9fa\x94Y\x00\x13\xca\xbaV\x97\xf0\x88\xd4\x84%\xf6c\xd4\x9f}\x8e\x19\xf9#\xfaq\xce\x1f\xc9\x8a\xfc\xf1am!K\x0b^\xc4\xbc\x16\xf9#M\x7f\xca\xab"_\xe7\xd95\xd1\x0c\xb0x\x89z\xa2L\xa1\xc5\xd3+oCs\x0b\x13\x92\xa93\x07\xc6\xb7)L\xf0\xe9\xc6JIB\xb1P#\xb4h\x06&r\xd1,\x18g\xcd\x92U\x9a\xc9\xfb\xc5x\xf1\x19\xcd\xcc\xefo6\xc45\xdc\xa1\xbb\x86\x16\xbb\xeb\x16\xa6\xe1\x1a\x18\xbbk|\xba\xd5\xb5\x1a\xa1\xc550N\xae\xc5\x92\xea\xecZ\xb2\xca5)\xf91^4]\'E\xba\xcd+Z7\x00\xd5%C\x8b)\x99\xae\xef\xc0X\x05\xce\x1d\x98\x04\x9fn\x95\xacFh\x91\x0c\x8c\x93d\xb1\x99p\x96,Y%\x99\xec\x83b\xbchJ\xbeL\x8bo\x8d\xda\x0c\xa4\xee\x18Z\xec\x8e\x81\xb1;v`\x12|\xba\xd5\xb1\x1a\xa1\xc510N\x8eE1tv,Y\xe5\x98\xacO1^4\x1d_ebI\x7f|\xdc\xb1I\xb6\x11\x87\t\xf6--\xb3k\xe6\xf9\x8d\x02\x02w\xeb\xde\xa1\xc5^@Z\x98\xc6\x9a\x08\x8c\xbd\x80\xe0\xd3\xad\xde\xd5\x08-\xde\x81q\xf2\xee\x89\xc5\xdeY\xfc\x13\xac\xcc\x93\x19\x1e\xd7W\x9fQ_de\xbe}\xde<\xde\xad\xab\xc7&\xbb\xfb6\xa8!\x1f!\xbb\xfdz\x04V\xfd\xfbaZ\xfc#\xe4\x16\x00r>\xb6\xeej=8\x0f\xe2\xb6\x84l\x85\xe2\xfa\xaaK\xee\xb7,\x9ex\xbb\x11\x01x\xde\x81\x08\xb4@\xcd\x08\x00t \x02\x00\x85\xf6\x08 d\xdd\x15\xe2\xbb\xb8E\x80\x9c\xa5\xed\x11\xc0\x03&l\x0c\x1b\xdf\x1c\xf0\xaa\xc3\x14h\x0b\x00\x9e:\xb5\xad\xa2\x07M\x07\x02\xd0\x025\x03\x00\xd0\x81\x00\xe0\x08\xec\x01P\xc3\xb4M\x01\x80\xdc\x02 \xcf\x80\xe4\x13\xd1_~\xcc\x10G\xb4\xa75!\x84\xf3\x1e\xd9\xe1\xca\x13\xdc\xd3e\xcc\x19\xdc\xb1\xcf\xb67\xf96\xcb\n\xb1\x14,\xd2\xe2\xfaa\xb7\xa3{w\xbc/4\xbe\\\x90m\xea\xb4\x86\xce\xd4\x0e\x7f\xb6o\xd2>\xae\x90A\xcd]\xa0\xa4\x86\x8c\xcf4t\x03\x8fP\xa4\x0f\x93\x1e\xa6\x96\x07z\x82\x93Ro\xff\xfd\xee\x0f\x00\x00\x00\xff\xff\x00\x00\x00\xff\xff\x8cR\xc1\x8e\x9b0\x10\xfd\x15j\xed\xd51\x8e!\x8bQ\x82\x84\x81\xb4+u\xa5\x9ez\xf7\x12\x13P\x0c\xa6\xb6\xa3\xa4\xaa\xf2\xef\x9d\x90&U\xda\xac\xb4\x17\x8f\xe7y4o\xde</{e\xb7\xaaPZ\xbb\xa06\xfb\xc1\xaf\x10C\xd9\xf2\x86\x06V5+\x94\xb3T0D\xfe\xc3K\x9a~\xa6\x0f\xf0/4}\x99p\xf2\xb7}\xb6\xdcH/\xbfK\xddA\xec\xccp\xe3\xa3\xc0w\xff\x14H\xad\xcdAh9\xecV\x88\xa2\xc0\xb5\xe6PZ3\x96\xe60\xdc\x80\x97a\xdc\xfbW\xe5\x9c\xdc\xaa\x1bXYk\xec\x1d\xf8c\x12 "\x14\x1cm\xba\xef6+\xf4+\x8a\xab\x88\x159\xc5\t-s\x1c\x89\x05\xc3I\x19&\x98F\x94\x89\x90\xc5q)\x92\xd3Y\x15\xf9g\xe2l9\x02\xd9\xab\xb4\xdb\x0e\xc6\xd7\xaa\x81m\x85\xb3g\x14\xd8n\xdb^\xef\xde\x8c\x13\x1a\xa3\xe0\xcdxo\xfak\xd6*\xb9Q\xf6\x9c1\x144\xc6\xf8k\x02L\xea\xe8\xbf:?\xc5`o;\x18\xb2(\xaaE\x1e\xc7\xcf\x98?\x8b\x02Go\t\xc7y)\x16\xb8\xe4\x05\x87\xe1s\xc1\xca\xf5\tD\xf5zp\xe9\x91F+\xd4z?\xa6\x84\xb8\xbaU\xbdt\xb3\xbe\xab\xadq\xa6\xf1\xb3\xda\xf4\xc44MW+\xe2F\x0bS\xb8V)\xdfk2\x0fCN8\xe9e7\x80\x07\xd0$}\xd7\xa2+\x11\xa8\xf9\x08\x8f:\xd6j\xea\xbfx\xbf{\xe0\x7f\x8e\xe0\x9c\xee\x9cG\x8f\x1c\xff\x98\xc17W+\xce\x12\xb0\x8f\xe3X\xf09\x8eJ^a\x9e\xcf+\xbcf\x85`\xe1|\x11\xaf\xcb\xe2\xf4Gfcl\xbf\xd7\x92\x82\xe8>m\xb2o\xb2\xde\x81\xb1\xee\xd3\x93x\x8aR8h\xb2$\xd3\x0b\x04\xd8\xca]\xb9;\xff\xa8L\xd0\xa9\xe2\x92\\\xaa\xeew\x07\xbf\xe7\xc1B\x01\x05\xab/\xe7d89\x18\xbb\x9b\xfc\xc8~\x03\x00\x00\xff\xff\x03\x00PK\x03\x04\x14\x00\x06\x00\x08\x00\x00\x00!\x00\xec\x84\x8b;\xbb\x07\x00\x00\xc5\x1a\x00\x00\x18\x00\x00\x00xl/worksheets/sheet4.xml\x9c\x94\xdb\x8e\xda0\x10\x86\xef+\xf5\x1d,\xdf\x93\xc4q\x08\x07\x11V,\x14u\xef\xaa\x1e\xaf\x8d\xe3\x10\x8b8NmsR\xd5w\xdf\x89\xc3a%$\x16\xadD\x18\'\xce\xff\xfd3\x9e\x81\xc9\xd3AUh\'\x8c\x95\xba\xce0\t"\x8cD\xcdu.\xebu\x86\x7f\xfd\\\xf6\x86\x18Y\xc7\xea\x9cU\xba\x16\x19>\n\x8b\x9f\xa6\x9f?M\xf6\xdall)\x84C@\xa8m\x86K\xe7\x9aq\x18Z^\n\xc5l\xa0\x1bQ\xc3N\xa1\x8db\x0en\xcd:\xb4\x8d\x11,\xf7"U\x85q\x14\xa5\xa1b\xb2\xc6\x1dal\x1ea\xe8\xa2\x90\\,4\xdf*Q\xbb\x0ebD\xc5\x1c\xe4oK\xd9\xd83M\xf1Gp\x8a\x99\xcd\xb6\xe9q\xad\x1a@\xacd%\xdd\xd1C1R|\xfc\xb2\xae\xb5a\xab\n\xea>\x90\x84qt0\xf0\x89\xe1\xa2g\x1b\xff\xfc\xc6IIn\xb4\xd5\x85\x0b\x80\x1cv9\xdf\x96?\nG!\xe3\x17\xd2m\xfd\x0faH\x12\x1a\xb1\x93m\x03\xaf\xa8\xf8c)\x91\xfe\x85\x15_a\xf4\x83\xb0\xf4\x02k\x8f\xcb\x8c\xb72\xcf\xf0\xbf\xc1sDi?\x8az4\x1a\xd2^2\xfbBz\xb3\xd1<\xe9\r\x96\x0b\xba\x9c\xa7\xcf\xe9"\xee\xff\xc7\xd3I.\xa1\xc3mU\xc8\x88"\xc332~!\x04\x87\xd3\x89\x1f\xa0\xdfR\xec\xed\x9b5rl\xf5CT\x82;\x01&\x04\xa3v>WZo\xda\x17_\xe0Q\x04H\xeb_h\x91\x8c;\xb9\x13sQU\x19^\x90\x11\xcc\xf8_\xef\xd2\xae\xc1"\xbcx\xbc]\x9f\xfd\x96~\xa6\xbf\x19\x94\x8b\x82m+\xf7]\xef\xbf\n\xb9.\x1d\x18\'A\x02\xb5\xb6\xc32\xce\x8f\x0ba9L)\x98\x07\xb4\xc5r]\x01\x03\xbe\x91\x92\xed\xaf\r\x86\x8c\x1d\xbale\xeeJX\x91`8L\x07d8\xe8c\xc4\xb7\xd6i\xf5\xe7\xb4s\xd2wJh\x8eWB\xdcw\xfbq\x8a\xd1JX\xb7\x94m\x16w\xc5\xd0\x0c/\x86x\x12\x93Q@\xa2\x11}\xc7\x14\n\xf3:\x88\'\x1d\x8d\x82~?I}\xb6\x0f\x9aC]\x1e\x02\xf1\x04I \x8f\x07\xc5P\xa3\x17C<gN\x83\xf8\xdd\xd3\x1a\x9cd\x10\xaf\xb24M\xa24\xbe\x7f\xcc\xf0\xdf\xe7\xfd ^\x8e9\xa04\x8e(i\x95\x0ff\r\xd3\xe5)\x10\xcf\xf6\x83\xbbm\x0e\xfd\x9c\xbc\x02\x00\x00\xff\xff\x00\x00\x00\xff\xff\xac\x98[O\xdb0\x14\x80\xdf\x91\xf8\x0fYT!\x90\xba\xb6Iz\x81\xd2V"ms\x91\xb6\t\r\xb4M{\x99L\xea\x96\x88\xb4EI\xb8\xf4\xdf\xcf\xc6n\xb0\x0f\x999\xd3\xc6\x03\x17\xfb\xf3Iz\xbe\xe3\xe3\x84QqKi9#%\x99\x8c\xf2\xed\x93\x95\x8fm\xc7\xb6\x8a{\xb2)\xd8o\xc33\xdb\xba-\xc7\xb6{\xd6\xea\xdaV\xf2P\x94\xdbuD\xd3\x15\x1fcXy\x9b&w\xfeV\xfc\xf1\xectI2\\\xecf\xb4H\xe8\x86\x8duZ^\xcf\x9e\x8c\x12\x1e\xf3\x82\x07\x1d\xdb}\xb6fl\x17l\xf4q\xe2\x9e\x8d\xda\x8f\x93Q;\x91\x88/\x10\x97\xc7\xdd3^Gg\xa6\x82\xf1N\x15\xa6w\xaa33\xc1\x0c<\x85\xe9\x838s\xc9t\xed\xb6\xbcz\xf0f$\x94#\xbd\x8a\x89\xea";\xfa\xd5cuU\x9be\xb4J\xab\xfb6\xadN\xef\xafr\xc8#\x8cm\x8f9yM"\xb8\xbc/\x98nGa`\x0e\x05\xd2S]8=\x90C\xc9\x0c\x940\xce@g\xe6u\x0cp\x11\xd41z\x98P"\xaaRWG"\xf9\xa1\xd4\xca\xe8\x03&\x96\x0c\xfbQ%Ga4\x13\xac2`\x81{\xee\xbf\x168\x0f:\xb6\x07\xea=\xf6`\x85K\xc6\xad*j*F\xfaj\xad:]\xe0B2l\x03V\x9fl\x00]\xd40\x0e\xb8zP1\xfb\x9a\x0f\xe5\x88R\xe1b\xa4\xab\xed\x1d\x0fT\xb8d\xd4\xfb\xe9\xbf\xde\xb3\x96i\xc6\xa8\x99\xaek\x11U\x87\xe0\xec\xd8\xeeu^\x9a\x03,k9)\xb3[\xe6\xac\x19\xady\x0b\x9a\x8c\x96<+$\xcf\xc9\xce\xb6r\xba\x1c\xdb~w\xe8;l\xe6\xd7s\xb6\xdc\xb4\xd8\xf7\xa7\xa2\x15\xc4\x9f\xae\xe7_\x8f\x0f\x0f,\xf6\x15\x7f\x99\xcd\x7f\x1c_\x92\xe4\x8e\xach\xf1\xa11kt\x87\x8d\x9f\r\xa7\xd3iZM\xeb\xf3\xc5\xf54:n\xf8\r\xa7i\xa9\x8c\xc7\x19\xafiuNN\x9a\xff)\x8eu\x94\x95\xe7G\xab\xf2\xdc\xb2\xed\xc3\x83\x93Q{\xc9\xfb\xe2%\xb9\xa7\xf9\xc7%I\xe8\xc2\nw\xf7\xc5\xc3\xda\xba\xd9\x92|Q\x80V(S\xa2v\x83>\xdc\xc6\x82\xe9\xab\x9bb\x00\xb6\xe8\xbc\x8e\x81\xa5S\xc3\xb8\xa0\xad\x84\x08&B0\xb1\x99\xd1\xca\x8b\xb5Otyq\x96\x95\x97+\xce\x1ep\xf4\xc8IY\xf6\xac\xbc\xb8\x88 \xcd\xe9\xc7\x9c\x16iQ\x92Mit!\xd7\x1b]\x08\xc6\xec\xa2\x8e\x81.j\x987.\x10L\x84`b3\xa3\xb9`\xc7\t\xda\x05g+\x17\xa0\xbd\xf8rRw\xf1-\xdd\xec2\xc4\xa6\x90\x8b\x8d"\x04\xa3\x89\x80\t\x9c#\x98\x00\xc1\x84\x08&B0\xb1\x99\xd1D\xb03\x1b-\x82\xb3\x95\x08p\xee\xf8rR\x17q\x91=\xac\xd3M\xca\x9b\x12)X\x87Z\xd3\x92d\xd6\x94\xa6Y\xbaY\xc1\x16%#\x18m\x08\xc6l\x03\xc1\x04\x08&D0\x11\x82\x89\xcd\x8cf\x83=\xd6\xa0mp\xb6\xb2\x01Z\xb9/\'u\x1bW%\xa5\x19\xc6\x84\\m4!\x18\xb3\t\x04\x13 \x98\x10\xc1D\x08&63\x9a\t\xf6\xd9\xd1&8[\x99\xe8\x83\xc3BN\xea&\xbeo\xb7\x8b?m\x03\xb9\xc0\x98|\xc1\x98\x93_\xc3\x9c\x82S8@\xc4\t\x11L\x84`b3\xa3%\xdfa/$\xe8\xec\xbf\xc0U\xfa\xc1\xa3\xae\xbf\x9f\x85\x87\xf5\r\xcdW\x19)\n\x8b\xbd\xbb\xd2\x0c\xb6\xa2\xfd*\xa3\x04\t\x99-`\xa0\x00\x03\x85\x18(\xc2@\xf1;\x90\xae\x02\xbc\xdf\x1b\x1f\xca\xd9\x83\xb4\xb2\x13\xc0\xa3#\x7f\xcc~y\'\x91\x0fLS\x92%\xfcd\xb8b\x87ABJ\n\xdf\xdde,\xb3\x02\x01\xbd\xa3\x00\x01\x05\xf2\xd6\x8d\x91B\x0c\x14a\xa0\xf8\x1dH(h\xbf\xfe\xb7\xe57\x00\x00\x00\xff\xff\x00\x00\x00\xff\xff\x94S]\x8f\x9b0\x10\xfc+\xd4\xbaW\x02>\x13\xbeD\x900\x84\xf6\xa4\x9etO}w\x88\tVlLmGIU\xdd\x7f\xef\x86(\xa9\xd2\xa6\xd2\xf5\xc5\xcb\x8eW\xde\x9d\x99\xa5P\xdc\xecx\xcd\xa5\xb4^\xa7\x0f\xa3[!\x82\xca\xe2\x86z\x86\xf7+\xd4\xe0\xfc3F\xc1_\xf8\x17\x9c\xbf<\xc2+\x92Sr\xae\x0f~?_\x16[\xe6\xd87&\x05D\xa1G\xebm\x85e\x1b\xc9\xdf\x8cV\x93\xb3+\x84\xd1u\x04\x0c#\xdcW{LJ}\xa4\x92\x8d\xfb\xb9\xd0\x0e\xfa\xd8\x18=5\xfa8\xde\x80\x97q:\xb8Wn-\xdb\xf1\x1b\xb86F\x9b;\xf0\xfb\xcc\x89F\xc8;\x99\xfc \xb6+\xf4\x93\xc4!\xa9\x13\x8a\xfd\xa6m\x89\x1f%q\xeb\xa7\xcf\xb4\xf6qJ\x12\xd2\xd2\xb0\xc9\xd2\xfa}&\xf4\x07\x89\xb2\x98\xa0\xd9+3;\x01\x8c$\xefA\xc0p\x91 \xcf\x88\xddp\xfdvz\x9a\xd1%\xf26\xda9\xad\xae\xd9\xc0\xd9\x96\x9bsF\x90\xd7k\xed\xae\tH\xc7O\xee\xabus\xf4\x0eF\xc0\x90u\xbd\x8e\xab\xe52\xf1\xb3\x04F\x8b6i\xe6W\r\x8d\xfd&\xab3RW\x15%M\xfb\x0e\xa4\x94\x1cm~\xc2\xd1\n\r\xceMy\x10\xd8n\xe0\x8a\xd9\x85\x12\x9d\xd1V\xf7n\xd1i\x15\xe8\xbe\x17\x1d\x0f\xecd`\n;p\xee\x94\x0c\x9e\xc30\x0b\xb2@11\x82\x07\xf0H\xfe?\xae]{\x03\xc1\x8f\xb4\xe6\xa7\x8e\xcf-\xe3\x7f7\xf4\xdc\x8f\t\xcc\x94\xc2:\xf4h\t>\xe6\xf9\xcdh\nR\xa5\xcd\x12\xfbq\x1c\'~\x14Q\xe2WU\x16\x81\x86aV\xaf)&I\x0bF_\x98\xf7\xda\xa8\x83d\x182\x95\xf7\xe5\x1b\xeb\xf6\xe0\xb5\xfd\xf4D\x9f\xa2\x1c\x0e\x9c\x16\xc1|\x03\x01\x84\xba+\xb7\xe7%+)\x9e+.\xc9\xa5\xea^N\xf8C\x1eh\x0c(\xb8\x7f9\xe7\x1d\x08\x8e\xda\xecg\x8b\xca_\x00\x00\x00\xff\xff\x03\x00PK\x03\x04\x14\x00\x06\x00\x08\x00\x00\x00!\x00\xc1\x17\x10\xbeN\x07\x00\x00\xc6 \x00\x00\x13\x00\x00\x00xl/theme/theme1.xml\xecY\xcd\x8b\x1b7\x14\xbf\x17\xfa?\x0csw\xfc5\xe3\x8f%\xde\xe0\xcfl\x93\xdd$d\x9d\x94\x1c\xb5\xb6\xecQV32\x92\xbc\x1b\x13\x02%9\xf5R(\xa4\xa5\x97Bo=\x94\xd2@\x03\r\xbd\xf4\x8f\t$\xb4\xe9\x1f\xd1\'\xcd\xd8#\xad\xe5$\x9blJZv\r\x8bG\xfe\xbd\xa7\xa7\xf7\x9e~z\xf3t\xf1\xd2\xbd\x98zG\x98\x0b\xc2\x92\x96_\xbeP\xf2=\x9c\x8c\xd8\x98$\xd3\x96\x7fk8(4|OH\x94\x8c\x11e\tn\xf9\x0b,\xfcK\xdb\x9f~r\x11m\xc9\x08\xc7\xd8\x03\xf9Dl\xa1\x96\x1fI9\xdb*\x16\xc5\x08\x86\x91\xb8\xc0f8\x81\xdf&\x8c\xc7H\xc2#\x9f\x16\xc7\x1c\x1d\x83\xde\x98\x16+\xa5R\xad\x18#\x92\xf8^\x82bP{}2!#\xec\r\x95J\x7f{\xa9\xbcO\xe11\x91B\r\x8c(\xdfW\xaa\xb1%\xa1\xb1\xe3\xc3\xb2B\x88\x85\xe8R\xee\x1d!\xda\xf2a\x9e1;\x1e\xe2{\xd2\xf7(\x12\x12~h\xf9%\xfd\xe7\x17\xb7/\x16\xd1V&D\xe5\x06YCn\xa0\xff2\xb9L`|X\xd1s\xf2\xe9\xc1j\xd2 \x08\x83Z{\xa5_\x03\xa8\\\xc7\xf5\xeb\xfdZ\xbf\xb6\xd2\xa7\x01h4\x82\x95\xa6\xb6\xd8:\xeb\x95n\x90a\rP\xfa\xd5\xa1\xbbW\xefU\xcb\x16\xde\xd0_]\xb3\xb9\x1d\xaa\x8f\x85\xd7\xa0T\x7f\xb0\x86\x1f\x0c\xba\xe0E\x0b\xafA)>\\\xc3\x87\x9df\xa7g\xeb\xd7\xa0\x14_[\xc3\xd7K\xed^P\xb7\xf4kPDIr\xb8\x86.\x85\xb5jw\xb9\xda\x15d\xc2\xe8\x8e\x13\xde\x0c\x83A\xbd\x92)\xcfQ\x90\r\xab\xecRSLX"7\xe5Z\x8c\xee2>\x00\x80\x02R$I\xe2\xc9\xc5\x0cO\xd0\x08\xb2\xb8\x8b(9\xe0\xc4\xdb%\xd3\x08\x12o\x86\x12&`\xb8T)\rJU\xf8\xaf>\x81\xfe\xa6#\x8a\xb602\xa4\x95]`\x89X\x1bR\xf6xb\xc4\xc9L\xb6\xfc+\xa0\xd57 /\x9e={\xfe\xf0\xe9\xf3\x87\xbf=\x7f\xf4\xe8\xf9\xc3_\xb2\xb9\xb5*Kn\x07%SS\xee\xd5\x8f_\xff\xfd\xfd\x17\xde_\xbf\xfe\xf0\xea\xf17\xe9\xd4\'\xf1\xc2\xc4\xbf\xfc\xf9\xcb\x97\xbf\xff\xf1:\xf5\xb0\xe2\xdc\x15/\xbe}\xf2\xf2\xe9\x93\x17\xdf}\xf5\xe7O\x8f\x1d\xda\xdb\x1c\x1d\x98\xf0!\x89\xb1\xf0\xae\xe1c\xef&\x8ba\x81\x0e\xfb\xf1\x01?\x9d\xc40B\xc4\x92@\x11\xe8v\xa8\xee\xcb\xc8\x02^[ \xea\xc2u\xb0\xed\xc2\xdb\x1cX\xc6\x05\xbc<\xbfk\xd9\xba\x1f\xf1\xb9$\x8e\x99\xafF\xb1\x05\xdcc\x8cv\x18w:\xe0\xaa\x9a\xcb\xf0\xf0p\x9eL\xdd\x93\xf3\xb9\x89\xbb\x89\xd0\x91k\xee.J\xac\x00\xf7\xe73\xa0W\xe2R\xd9\x8d\xb0e\xe6\r\x8a\x12\x89\xa68\xc1\xd2S\xbf\xb1C\x8c\x1d\xab\xbbC\x88\xe5\xd7=2\xe2L\xb0\x89\xf4\xee\x10\xaf\x83\x88\xd3%Cr`%R.\xb4Cb\x88\xcb\xc2e \x84\xda\xf2\xcd\xdem\xaf\xc3\xa8k\xd5=|d#a[ \xea0~\x88\xa9\xe5\xc6\xcbh.Q\xecR9D15\x1d\xbe\x8bd\xe42r\x7f\xc1G&\xae/$Dz\x8a)\xf3\xfac,\x84K\xe6:\x87\xf5\x1aA\xbf\n\x0c\xe3\x0e\xfb\x1e]\xc46\x92Kr\xe8\xd2\xb9\x8b\x183\x91=v\xd8\x8dP<s\xdaL\x92\xc8\xc4~&\x0e!E\x91w\x83I\x17|\x8f\xd9;D=C\x1cP\xb21\xdc\xb7\t\xb6\xc2\xfdf"\xb8\x05\xe4j\x9a\x94\'\x88\xfae\xce\x1d\xb1\xbc\x8c\x99\xbd\x1f\x17t\x82\xb0\x8be\xda<\xb6\xd8\xb5\xcd\x893;:\xf3\xa9\x95\xda\xbb\x18St\x8c\xc6\x18{\xb7>sX\xd0a3\xcb\xe7\xb9\xd1W"`\x95\x1d\xecJ\xac+\xc8\xceU\xf5\x9c`\x01e\x92\xaak\xd6)r\x97\x08+e\xf7\xf1\x94m\xb0goq\x82x\x16(\x89\x11\xdf\xa4\xf9\x1aD\xddJ]8\xe5\x9cTz\x9d\x8e\x0eM\xe05\x02\xe5\x1f\xe4\x8b\xd3)\xd7\x05\xe80\x92\xbb\xbfI\xeb\x8d\x08Yg\x97z\x16\xee|]p+~o\xb3\xc7`_\xde=\xed\xbe\x04\x19|j\x19 \xf6\xb7\xf6\xcd\x10Qk\x82<a\x86\x08\n\x0c\x17\xdd\x82\x88\x15\xfe\\D\x9d\xabZl\xee\x94\x9b\xd8\x9b6\x0f\x03\x14FV\xbd\x13\x93\xe4\x8d\xc5\xcf\x89\xb2\'\xfcw\xca\x1ew\x01s\x06\x05\x8f[\xf1\xfb\x94:\x9b(e\xe7D\x81\xb3\t\xf7\x1f,kzh\x9e\xdc\xc0p\x92\xacs\xd6yUs^\xd5\xf8\xff\xfb\xaaf\xd3^>\xafe\xcek\x99\xf3Z\xc6\xf5\xf6\xf5Aj\x99\xbc|\x81\xca&\xef\xf2\xe8\x9eO\xbc\xb1\xe53!\x94\xee\xcb\x05\xc5\xbbBw}\x04\xbc\xd1\x8c\x070\xa8\xdbQ\xba\'\xb9j\x01\xce"\xf8\x9a5\x98,\xdc\x94#-\xe3q&?\'2\xda\x8f\xd0\x0cZCe\xdd\xc0\x9c\x8aL\xf5Tx3&\xa0c\xa4\x87u+\x15\x9f\xd0\xad\xfbN\xf3x\x8f\x8d\xd3Ng\xb9\xac\xba\x9a\xa9\x0b\x05\x92\xf9x)\\\x8dC\x97J\xa6\xe8Z=\xef\xde\xad\xd4\xeb~\xe8TwY\x97\x06(\xd9\xd3\x18aLf\x1bQu\x18Q_\x0eB\x14^g\x84^\xd9\x99X\xd1tX\xd1P\xea\x97\xa1ZFq\xe5\n0m\x15\x15x\xe5\xf6\xe0E\xbd\xe5\x87A\xdaA\x86f\x1c\x94\xe7c\x15\xa7\xb4\x99\xbc\x8c\xae\n\xce\x99Fz\x933\xa9\x99\x01Pb/3 \x8ftS\xd9\xbaqyjui\xaa\xbdE\xa4-#\x8ct\xb3\x8d0\xd20\x82\x17\xe1,;\xcd\x96\xfbY\xc6\xba\x99\x87\xd42O\xb9b\xb9\x1br3\xea\x8d\x0f\x11kE"\'\xb8\x81&&S\xd0\xc4;n\xf9\xb5j\x08\xb7*#4k\xf9\x13\xe8\x18\xc3\xd7x\x06\xb9#\xd4[\x17\xa2S\xb8v\x19I\x9en\xf8wa\x96\x19\x17\xb2\x87D\x94:\\\x93N\xca\x061\x91\x98{\x94\xc4-_-\x7f\x95\r4\xd1\x1c\xa2m+W\x80\x10>Z\xe3\x9a@+\x1f\x9bq\x10t;\xc8x2\xc1#i\x86\xdd\x18Q\x9eN\x1f\x81\xe1S\xaep\xfe\xaa\xc5\xdf\x1d\xac$\xd9\x1c\xc2\xbd\x1f\x8d\x8f\xbd\x03:\xe77\x11\xa4XX/+\x07\x8e\x89\x80\x8b\x83r\xea\xcd1\x81\x9b\xb0\x15\x91\xe5\xf9w\xe2`\xcah\xd7\xbc\x8a\xd29\x94\x8e#:\x8bPv\xa2\x98d\x9e\xc25\x89\xae\xcc\xd1O+\x1f\x18O\xd9\x9a\xc1\xa1\xeb.<\x98\xaa\x03\xf6\xbdO\xdd7\x1f\xd5\xcas\x06i\xe6g\xa6\xc5*\xea\xd4t\x93\xe9\x87;\xe4\r\xab\xf2C\xd4\xb2*\xa5n\xfdN-r\xaek.\xb9\x0e\x12\xd5yJ\xbc\xe1\xd4}\x8b\x03\xc10-\x9f\xcc2MY\xbcN\xc3\x8a\xb3\xb3Q\xdb\xb43,\x08\x0cO\xd46\xf8muF8=\xf1\xae\'?\xc8\x9d\xccZu@,\xebJ\x9d\xf8\xfa\xca\xdc\xbc\xd5f\x07w\x81<zp\x7f8\xa7R\xe8PBo\x97#(\xfa\xd2\x1b\xc8\x946`\x8b\xdc\x93Y\x8d\x08\xdf\xbc9\'-\xff~)l\x07\xddJ\xd8-\x94\x1aa\xbf\x10T\x83R\xa1\x11\xb6\xab\x85v\x18V\xcb\xfd\xb0\\\xeau*\x0f\xe0`\x91Q\\\x0e\xd3\xeb\xfa\x01\\a\xd0Evi\xaf\xc7\xd7.\xee\xe3\xe5-\xcd\x85\x11\x8b\x8bL_\xcc\x17\xb5\xe1\xfa\xe2\xbe\\\xd9|q\xef\x11 \x9d\xfb\xb5\xca\xa0Ymvj\x85f\xb5=(\x04\xbdN\xa3\xd0\xec\xd6:\x85^\xad[\xef\rz\xdd\xb0\xd1\x1c<\xf0\xbd#\r\x0e\xda\xd5nP\xeb7\n\xb5r\xb7[\x08j%e~\xa3Y\xa8\x07\x95J;\xa8\xb7\x1b\xfd\xa0\xfd +c`\xe5)}d\xbe\x00\xf7j\xbb\xb6\xff\x01\x00\x00\xff\xff\x03\x00PK\x03\x04\x14\x00\x06\x00\x08\x00\x00\x00!\x00\xe3b\x7fN\xbe\x06\x00\x00YF\x00\x00\r\x00\x00\x00xl/styles.xml\xdc\\\xdd\x8f\xda8\x10\x7f?\xe9\xfe\x87(\xefl>\x96\xb0\x80\x08U\xd9]\xa4J\xbd\xd3I\xbb\'\xddk\x08\x06\xac\xe6\x03%f\x0b=\xdd\xff~\xe3\x84@\xdc\x90\xc4\t\x0e\t\xdd\x87\x96\x18g\xfc\x9b\x0f\xcf\x8c\xc7\xc6\x93O{\xd7\x91>P\x10b\xdf3e\xedA\x95%\xe4\xd9\xfe\x12{kS\xfe\xfb}\xde\x1b\xcaRH,oi9\xbe\x87L\xf9\x80B\xf9\xd3\xf4\xf7\xdf&!98\xe8m\x83\x10\x91\x80\x84\x17\x9a\xf2\x86\x90\xedXQB{\x83\\+|\xf0\xb7\xc8\x83oV~\xe0Z\x04\x1e\x83\xb5\x12n\x03d-C\xfa\x92\xeb(\xba\xaa\x0e\x14\xd7\xc2\x9e\x1cS\x18\xbb6\x0f\x11\xd7\n\xbe\xed\xb6=\xdbw\xb7\x16\xc1\x0b\xec`r\x88h\xc9\x92k\x8f\xbf\xac=?\xb0\x16\x0e@\xddk}\xcb\x96\xf6\xda \xd0\xa5}\x90\x0c\x12\xb5f\xc6q\xb1\x1d\xf8\xa1\xbf"\x0f@W\xf1W+l\xa3,\xdc\x912R,\xfbL\t(\xd7\xa3\xa4\x19\x8a\xaa3\xbc\xef\x83\x9a\x94\xfaJ\x80>0U\x9f<\x9d\xac|\x8f\x84\x92\xed\xef<b\xca\x8f\x00\x94\x8a`\xfc\xcd\xf3\xbf{s\xfa\x15h\xf8\xd8k:\t\x7fH\x1f\x96\x03-\x9a\xacL\'\xb6\xef\xf8\x81D@u \xb9\xa8\xc5\xb3\\\x14\xf7x\xb6\x1c\xbc\x080\xed\xb6\xb2\\\xec\x1c\xe2f\x9d6D\xda>\xf6s1\xc8\x9e6*\x14G\x8cf:Y\xd0^-\x8f\x15\xac\x17\xa6<\x87?\x15\xfe(\xc2\xeb\x99\x8bx\x0c\x81I\xec8\'\x91\x1bT\xba\xd00\x9d\x80m\x12\x14xsx\x90\x8e\x9f\xdf\x0f[\x90\xad\x07\xd3(\x96Q\xd4\xaf\xa4\xf7:\xb0\x0e\x9an\xf0\xbf\x10\xfa\x0e^R\x14\xeb\xe7\xb4Fa\x16\x13L\x8dB}x\x1a\x8dFCm0\x1c\x0eG\xfdG\xad\xdf\x8f\xd4\xb88v\xc7\xde\x12\xed\xd1\xd2\x94\x07\xfdh\xcc\x14\x1bT\xad<\x90s\x10<\xb5\x8e\xc0\x10\x88 \x12\x05h\x7f\xe1\x07Kp\x9e\xc9\x94\xd3\x9f@\xf4q\xdbt\xe2\xa0\x15\x01S\x0b\xf0zC\xff\'\xfe\x16\xfe]\xf8\x84\x80\x87\x99N\x96\xd8Z\xfb\x9e\xe5\xd0\xe9\x92\xbc\x91~\x13\xbc.8XS&\x1bp\x90\xc9\xfc\xfcY=t\x88\xe3\x08\\\xfd#,\x11\x14\xae\xee\x009A\xcc\xd5?f\xaeu\xdeNbn\x04\xb4\x8b\x96x\xe7VQI\xc9\x1bY\xa5\x94\xbcpA-%o\xf0*&1\xd7{4\xa6\xeaz)\x9cZ\xd7h\xa5\xc1\xe9\xdd\xa0-q\xa0f\xddYb%\xfc\xe6Za\x08N\xe2\x1dUSE\xd3*\xec\x9e\x9a\xee\x15\x0c\xabC\xd3\xa1\x13\xb1\xe3\x06N\xb8P\x8bUcc\xe3\xfa\xe3\xb5\xb9\xfb\xd4^\xab\xdcuNw\x82\xd2\x83\xba9i\xe5\xb9WU{\x82\xf9\xe3\xd7_\x9c\xd7W\x0f\x84\x9coT\xcd\xdb:\x06\xe7\x061\\\xb0 \xabZ\xf8/\xb3\xaek\xd9Ct!\x15o\xcck7\xbb\x1e\xadZ \xe0v\xc6][F7f#-\xfb\x90\x9a\x8b\xed\xd6\x8a\x047\xcb\x02n\xca\xe1\xb1\x08\x075=\x1b9\xce\x1b-\xbe\xfd\xb3:\x15\xf6h\xd9|\xbf\x92\xbc\x9d;w\xc9\x17\xa8\x8f\xc2>\t-r\'\x1f\xa10z\xfc\x18\xd7\xf0\xe2\x07Z\xdbKS\x8bi\xa7\xc8>\rj\xd1\x95\xf6\xab\xd3\x00\xd5Q\x9d\xde\x96\xac\xed\xd69|v\xf0\xdas\x11-\x0eS.\xa1\xd6\x1f?J\x1b?\xc0?\x80G\xbaI`\xc3\xf7(\xae\xed\xefW\xf9\xa2\xd0@*\x97D\x01\xed\t\xe4xP\xba\x1bA\xc7\x8b\x9ffQ\x15\xf5\xfc\\\x05\x12\xdd\xbc"\xd8N\x81\x94\xbe\x07\xd6\xf6\x1d\xed\xa3\x01\xa8\n\x8a\x10S=r!\xbe\x06c\x03 \x80dU\xcdg\x94\xd0\xa2\xd8S\x86\xa2\xcbRz\xce\x14\x1a\n\xddN\xf9u\xcd$k\xca\x15\x0c\xa7D\x8cG\xc1\x15\x98M\'\xe6n\x19\xc3y \xfb\xb7t0uA\x82\xaf)\xf2\x82\xd7y\xbdv\x1d\x1d\xdd\x88\x92+9\xde<M\x8a\x14R\x95@\xd0\x86\xf9\x8b\xc0\xd7\xa4\xe5\xd7\x0c\xa4\x8c+\x82}\xdf\x9f\x8c\x9e\xf1\xe1\xe7\x18\xc4\x17\xd1\x18\xda\xb0\xab-\x926\x1c\x988G\xa2l\xca\x92\x83[|\x16\x95\xcaI\xeaA*\x10%\xc8/\xc9w\x18\xda%\xd3.\t\xbc|\xf1\x83\xa1L\x8f\xa1\x1c\xd3\xd5K\xb9\x1f\x1b\xd2\xc5\xa6$\x15|\xe2\xadt\x7fe\xba\x9aR\x1fh\x8c#o\xe23\x05\x86\x16\x1c\x08\x12\x93\xad\x0b\xc9\xc3\x81c\xd6|\xb8<F\x9e\x9c\xb4\x12k\xe4\xb6?!\xbce|wUo\xc8\xea\r\x0e\xb8\xe4\x89\xaa\xc4IU\xe1&W\xb4\xa2\xcc\xe6\xba\x05]\xe3\x9aoh\xbd\x991LnS\xcc\x00*s{\xb9"\xca\x18P\xcde\xfau"\xca\xcd\xc4Jb\x14\xd7\xe4\xc9%\x9e\xf13y\xbc\xd7YBq\'i\xcdE\xee\x12\x0fp\x8d\x1119Y\x89\r\xd5\x0c\xf7\xc2l\\\x94\xffo\xc6\xc4G\x9d\xad\x93\xe5\xce\x9b;\x84\xcc\xedG\xaa\xa7\xf6W\xa6w\xb9R\xeen\x015\x05\x19\xbc\\j\xfdT\xe2P\x9b\xcc\xfb\xeb\x16"X\x06Z\\\xb8\xd4-a\xb3\xab\x98\xac\x06\xaeZz\xb3\xc4\xb3\xd2\x11\xb6>\x16W\xd2g!g\xa3\xb08y\xe8Y\xa7\xd2yydCu\x07!\xb3K\x9c\x8c\x94[\xd9\x96)\xd8I\xa9\xb3/S\xb0\xc4m\xb4\xb8\xc4\x8a\xb6`\x01R\x87\xa9\x82\xb5\xed\r\x99*X\x12\xd7\xc8\xe3E\xad\x8f.\xec\xac6\x948\xe8w\x9180\x868\xb8\x87\xbdb&\xb0\xe8M\x06\xdaN\xd0\xbey"\x9cW\x02\xd7\xbb\x9bv\xe4%\xc2z\xc9\xe2\xbf\xf3\x890\xfc\xfc\xb0\xb5\n\xbe\x90L^/q)\x9d\xd1@\xee\xc6\x0f\xb7\xd5\xf3E\xea\x9ai\xf1\xcd\xbd@\xaaP\xc9,\xcdJj\x0e\xe2\xf4Y\xa1\x92z\x83"\xd8\xa5\xb4\xa1f\xe5\x9eA{\xbb\xe9!\x02\xadv/\xb39e\xbd\x8c\xb8\xb5\xec\x968s\x1a\xae3\xee(w\x9f\xa0\xc9\x14M\xc8VT\x89\x84\xaf\xdae\x16\x020{rA\xdc\x81\xc8K\x00\xa3c\xa8p\xf04u\xba\x959\xdbz:\xa5*\xd1\x9b\x11L\xf9Ozk\x87\x93\x8a\xfb\x8b\x1dv\xe0\x06\x81\x0b\xe7Z\x81\xe6r\x7f>)\x1b]\xaf@\xe8\r\x1c\xd1\x19\xda\xd3(\x10\xdb\x96he\xed\x1c\xf2~\xfa\xd2\x94\xcf\x9f\xff\x88~V\r&w\xec\xf5\x17\xfe\xf0ID\xc2\x94\xcf\x9f\xbf\xd2\x1f\xd3\x83\x07\x00\xc7\x0c\x07<\xbf\x86\xf0\xebw\xf8_\xda\x05\xd8\x94\xff}\x9d=\x8d^^\xe7zo\xa8\xce\x86\xbd\xfe#2z#c\xf6\xd23\xfa\xcf\xb3\x97\x97\xf9H\xd5\xd5\xe7\xffR\xf7\x80\\q\x0bHtm\t\x1c\xc1\xd4\xfa\xe3\xd0\x81\xbbB\x82#\xb3G\xf0o\xe76SN=\xc4\xf0\xa3\x9b\x15\x00v\x1a\xfbH\x1f\xa8\x9f\rM\xed\xcd\x1fU\xad\xd7\x1fX\xc3\xdep\xf0h\xf4\xe6\x86\xa6\xbf\x0c\xfa\xb3Wcn\xa4\xb0\x1b5o\x0bQ\x15M\x8b\xef\x1d\xa1\xe0\x8d1\xc1.r\xb0\x97\xe8*\xd1P\xba\x15\x94\x04\x8f\x05L(\x89&\x94\xf3\x9d0\xd3\xff\x01\x00\x00\xff\xff\x03\x00PK\x03\x04\x14\x00\x06\x00\x08\x00\x00\x00!\x002D\xe2\xeb#\x06\x00\x00\x9a\x11\x00\x00\x14\x00\x00\x00xl/sharedStrings.xml\xecX\xdbn\x1aI\x10}_i\xff\xa14\x0f\x91\x13\x99`\x9c\xc4I\x88M\xe4\xc5`;\xe2&\x06\xc7\xda\'\xd4\xcc4\xd0\x9b\x99\xeeIwcB\xbe~O\xcf\x80I\xa6\x07+\xbb\xfb\xba\x92%C_\xaa\xebr\xeaT\x15\xe7\x1f\xbf\xa5\t=pm\x84\x92\x17A\xe3\xe5I@\\F*\x16rq\x11\xdcM\xba\xb5w\x01\x19\xcbd\xcc\x12%\xf9E\xb0\xe1&\xf8\xd8\xfa\xfd\xb7sc,\xe1\xae4\x17\xc1\xd2\xda\xacY\xaf\x9bh\xc9Sf^\xaa\x8cK\xec\xcc\x95N\x99\xc5W\xbd\xa8\x9bLs\x16\x9b%\xe76M\xea\xa7\'\'g\xf5\x94\t\x19P\xa4V\xd2^\x04\xa7\'\xef\x03ZI\xf1u\xc5\xdb\xc5\xca\xbbF\xd0:7\xa2un[#-R\xa67\xd4g\x96k\xc1\x12:\x1a\xf5\x9f\x9f\xd7m\xeb\xbc\xee\x0e\x14\x87\xc2\xfe\xeb\xc7\x03\xc6\xdf|sx\xb3\x9b(\xa5an\xf9R\x9bk\x96\x8a\x88&"\xe1\xe5\xbd\xcf\xc2j1\x17<\xa6\xd3\x934-\xef^k&\x85\xf5.\xf5\x99\x9e\xf9\xa2&\\k\xf6\xfd\xbb\xa26O\xb9\xb44c\x06b\x1b\xa7\xbe\xd8\xc7\x93\x9a\x1b!\x7f\xe5\xe0O"\xab4\xad\x14Yu\xb0#\x17Br\xae\xa1\xda\r\xd3\xf1Z\xa9\xd8\xf3\x97\x92\x91\xe6\x96S\x88\x7f\xdc\xdb\xee\x8ao\xbe\x93\x1d\x82\x9a&c\x11\x90\x05\x88\x18\xae\x1fx\xd0\n\xfb\x8d}\xb8\xa8\xfcN!\x88\xccjf\xac\x06$J\xfb\x87D\x9e\x1e\x16y\xe8\xca\xab\'\xb5\x90\xc2,+`3\xa8_z\xf0KH*\xcf\x0c\xe0<f\x16iW\xde\xb9w8\xcf\xb4R\xf3\n\xf1\xa3\x84\x19\x97\x06>^\xef\x85\x8c\xd5\xda\xc3\xfe\x15\xd0\xed-\x8e\x90|\xb6B\xc6\xd0.\xb9\xf6\xd4\xe7\t\x8f,\xdd+\xfd\x85F,\xfa\xc2\x16\x1e\xb4\xbb,1\x9c".\x92\n\xa1cn\xf1\x1c6\xa6k\x96$S\xa5\xa7W\x82eK\xcd\x16i\xbe\xe2\xbdg\xf5*\xb2+\xcd\x92\xe9\x1c)\xc8\xa7k\xbc\xfc\xc4\xa1v\x01\xbc\x8a\x97\xc3\xbd\xa41\x17\x12\x8c\x14\xe5IV\x166Pr\n0\xed^uj\x96]v\x00#\xfbK}%U"\xec\x12\x8cQ\x16\xdf\x87\x03\x92\xe9\x98\xe5\xde\x99\x82K\xa7\x0b-\xe0\tg\x97\x17\x9a\xae\x98q\xbd@\x94\reLrO\x91V8\xe9\x8c\xe8\xb4I=\x01\x06\x86\xa6\x84\x98\x91F\x8c\x1e\x18\xe8#\xdb\x92%\xa87\'K\x03Z\x8d\xb9\xce\x0f\xb9\xf7\xc0\xb8\xd2\x08\xac \x93\xf3\xfc\x81\xdbh\xaeUJc\xb5\xa6\xd7\x9eg\x86\x93N\x93.{=jwz\xbd\x90\xeeo\'74\xb9\xb9\r\xa9=\xec\r\xef\xc6\x14\xde\x0c\xefzW\xf4G\x87\xba\xb7\xbd^\x07\x9f\xfe\xc4~\x87\xee\xc2\xce\xb8,\xecE\xc8\xf1z\xec\xb8|\xaf\x9e*tc2\x82K~\xda:&\xa69\x81HSC8\x95\'<\x8eq\x98\xe4(\x12\x14hVY\xa6\xb4%5\xcf\xed\xdb\xd9\x1e\xa94C\xb1\x92\xd6\xb8C\x0c>Q\x7f9\x04C\x08>B\x80\xe7\xf4-Q^k\xb5\xb2\xf4\xea\x04\x9cN\x16\xb4\x7f\xdc\xc9\xd4\xb7\r-J\xcb~\xa5\xc8\x99\xbb\xb8}V}{\xbf\xec!\xd9UE\n\xb6\x99\x15x\xdb\xff-\xdcE\xf4wA\xcf\xf9\xc6\xd5s\xed\xb2\xff\xa9\xb8\xf35\x85N\xb1Ju^5\xa9\xad\xb2M\xee\xf4\xfc\x14I\xe4iL\xc1\xae\x96\x06$\x8a\x90\xe4%\x9f\x90x@\xe8\xd7\x95p\xa8\xcbQ(\x0c(\xd1\xc1\xd7\xf5\x05\x1bb\x0fH\x0eVQ\x1ds\xb0\xbfnRXp\x90\x83z~\x1f%\xc3\xf1PaA\xacU\x06\xea\xf3\x88t\xb03\x82P\x91*\xa96\x17\xff\xa6I\xb71\xd0"\xe6PD\xc6t\xaf\x819\xcaV:S 5`+\x16\xf39\x12\x06\xd9e<\x00S\x84D[\xa0\x81\xe0~\xd7\xe1"w\xb6M\xd4\x19O\x90_\xfbt\xdd:\xc3\x17h^\x00\xde.8@1\xba)\xc2\x9f\xe1\x19C\xa5C\xa9\xd8{\xd1\xb9\xd4yc\xbe\x92\x91\xdbq7\xb0\xe4\xa0\x9f\xa0\x08K\x80\xdc\xa9^\xa6\x03\xb2\x8a\x18R\xc1\t&\xb3A)I\x89\xcdA\x15\xc8\x14\xc0\x02\x19\x98?S\xa0\x86\xb3h\xb9\xb3o\xe3\xa4U\x98\x1fsT)D\x95E\x91\xd2\xaekt/8\xc5\xb6\xfe;L(\xb7\x83p2\xbekOn\x87\x83\x90.\xc7\x1d\xba\x1d\xd0\x18\x04\xd2\x1d\x0e&\xees\xe7\xb2}C\xa3\xcb\xebN%\x04\xdf"h2\x7f\xa8\xad\x92U*\xa9KA\xd8?\xa5+\x8e\xee\x13\xd1\x8c6t\x94\xd3\x1a\x16\x9f\x07\xc7\xe42\xd49\xd0\xa9\xe6\xce\xed\x08\x08\x0b\xcc\xd2\xd2\xf9Cn(\xde\xdf^\x83\xcbq\xb2AGkp\xfar\xe7y\xe77D\xc3\x8ah\x05\xb6\xca\x0f\xc0\xe0]\x14\x1e\xfd\x9fl\x8e\t\xf7\x12\x0e\xf9\xc0\xba\x93\xb3\x85\xfcc\x1e\xcc\xe0RWn\x9d:\xc6\xefg\x1dx\xde\x95\x8d\xbc>hd\xc37\xb2\xb17\xf2\x08\x96\x17f\xec\xec\x876;cA\x8c\xb2\xfa\xfd\xf7M\xeao\xfd\x86\xb6\x06\x12\x90\x05\x98\x15h\xe0R7\xcb\x12\x11\x1d\xcc\xd9\x06(b\xc9\xa3/;"\xf0\xd2\xff1\xe5\x1dG;\xad\x12\xd4\xb3cB\xc1\xe3\xc4\xe2\x9c\xde\xdd\xeaLY\xab\xca\x1dvu1\xce\x1b\x14L&\xa5\xc9\xe0Yb?\xd4j\xf4\xc8$\x9d^\xa7=\xa1\xeex\xd8\xa7\xab\xf1pt5\xbc\x1f\xf8\xcd\x05\xcf\x08\xb4\xf0o\x99\x80j\xb5g\x0b\xfb\xa1R\xec\xff\x84P\x1a\xdc,|\xfd\x96\x9e\xb14\xfb@\xa1\xfb\x02\xd4_\xe5\xac\xf2c:\x82}\xc2\xbe\xa1\xa31\x07\x15#\xf5\x8bv\r\x19\rztu\xaa\x0c\xe0\xc3c\xc0\x0f\x0cQ\x0e\xd0\x9e1\x0e\xed4\xfcD\xb1\x9c\'\xe8D\x0cx\xc7\r\xd1[V=\xbe\x04+\t\xb9J\xfd\xad\xea\xf6\xa1V\x0c~,^b\xba{\xe0\xc7}46 \x98F\xed\xec\x1f\x9e\xf7z\xb8\xa2\xb9)\xc9/\x0b}\x9ch\xcb\x1b#\x96q]\x9bcD\x8b\xe9z\x93\x19X4S\x18\x01+\x1aW\xcdkn4u?\x17\xd8\xa7\xcf~\x16r\x93\xfc\x8a\xd0\xc2\x8b\xc2=\x9a\xcf\xc5\xa9k\xa51*\xe7\xad\xb4_q\xf3X\xfc\xca\xc9{\x0c\xb0\x07\xc5\xb4Y\x12\xb9\'C\xbc\xe2\xca{\xd9%]L3\xf9\xecGLxs\xee\'\x85\xd1\n\xfd\nK\xe0\x05\xdf\x99\xd8\xf4\\\xcf\xb4\x93\xb7_\xae\xe3\xb7\x95\xd6\xdf\x00\x00\x00\xff\xff\x03\x00PK\x03\x04\x14\x00\x06\x00\x08\x00\x00\x00!\x00*\xffY\xbf\xf1\x00\x00\x00p\x01\x00\x00\x1e\x00\x00\x00xl/webextensions/taskpanes.xmld\xd0\xc1N\xc30\x0c\x06\xe0;\x12\xef\x10\xf9N\xd3\x02\x02T5\xddeB\xe2\x0e\x0f\x90%n\x1b\xad\x89\xab\xd8\xac\xdb\xdb\x93I\x03\r8:\x96\xfe\xffs\xba\xcd1\xce\xea\x80\x99\x03%\x03MU\x83\xc2\xe4\xc8\x874\x1a\xf8x\x7f\xbd{\x01\xc5b\x93\xb73%4pB\x86M\x7f{\xd3\xad(K+\x96\xf7\x8bM\xc8\xaa\xc4$n\xcf\x8f\x06&)+\xad\xd9M\x18-W1\xb8LL\x83T\x8e\xa2\xa6a\x08\x0e\xf5\x8a;<\n\xa6s/\xeb\x9f\x1c}_7\xb5n\x1a\xe8\x7f\x17(On_\x1cR\x089\x8c\x93\x80:\x04\x0e\xbb0\x079\x19(\xea5x\x99\x0c<>\x14p\xa6\xd5\xc0\xf3w\xc6uU\xc6\xe1B\xcd\xff\x9c\xb4`*g\x0c\x94\xa3\x15\xae(\x8f\x17\xec\x96\xdcg\xc4$\x05W?\xe9\x8c\xb3\x95\xb3z\n\x0b\x97\xae6\xf8bz\xf3\r\xe8\xbe+w]}\xcb\xdf\x99\xfb/\x00\x00\x00\xff\xff\x03\x00PK\x03\x04\x14\x00\x06\x00\x08\x00\x00\x00!\x00\x98\xb5\xaf\xe6}\x02\x00\x008\x08\x00\x00"\x00\x00\x00xl/webextensions/webextension1.xml\xacU[o\x9b0\x14~\x9f\xb4\xff\x10\xf1\xb07\xc2%\\B\xd6\xa4\x02\x03-\x12i\xaa@z\xd9K\xe4\x82\xd3 \x81\x9d\xd9\xa6i7\xed\xbf\xcf$D\xeaU\xab\xc8x\xf2\xb1\xf9\xce\xf7\x9d\xf3\x1d\xd9\'\xa7\x8fU\xd9{@\x94\x15\x04\x8f%\xad\xafJ=\x843\x92\x17\xf8~,-\xd2P\x1eJ=\xc6!\xceaI0\x1aKO\x88I\xa7\x93\xaf_N\xb6h\xb4Ew\xe8\x91#\xdc`{"\x0ffbk,\xad9\xdf\x8c\x14\x85ekTA\xd6\xaf\x8a\x8c\x12FV\xbc\x9f\x91J!\xabU\x91!\xe59\x94\xbd\x88\x14]\xd5TE\xd3\xa4^\x91\x8f\xa5\xdf\xae\xea\r\x00\xf0My`y\x96l\xd8\xba&\x0f\x1dC\x97\xb5\xd00}\x07\x18\xae>\x0c\xfeH\x93F\x0eE+D\x85x\xb4Cn\xa1\xae\x8a\xcf4U]zQ`_\xed7\xd9\x19\'T\x88EX^$m\x94>m\xc4\xcel\x1a\xdcH\xca.#,9\xa2\x18r4?\xa4f\xef0]\xbb\x9fbz\x97D\x94>\xfa\x88eC\xc9\x06Q^\xa0=i\x1b>\xf50\xac\x84\xcc\x9cdQ.*\x83e-\xa2o?k\xc2\xbfW\x96\x7fS\xda\xcb3\xac\x97\x11\xb2\xed[\xf5\xd7\xe2\x9a\xef\x8f\x9a\x8a\x1a\xb2WI\xef\n\xdcX\xcd\xf6\xf52\x0c7lMxk&}\xe3\xa5\x10\x84\x85\xd1+B+\xc8Y\x9f\xd0\xfb\xd6P\x9fdu\x850\x17\xee\xa9\x96BQ\t\xb9\x18\n\xb6.6\xac\xed\xa5\x98\x94\x98\xf1\xc9\t\x1c\x89UK\x00?C\x90S\xb8\x15\x12\xabr\x9f\xbb\x82\x05\x96z5-\xc4p\xf8C;\x1cZa [\x9a\td\xc3\xf4L\xd9\xf1mG\x1e\x18\xa1\xa6\r,\xdb\x19\x04^;\x1c\x19\xc1\\ \x19\xa8\x85\xf1UX\xe3l\'\xb0\xe9\xcaN\xd1\xff\x15f\x83\xa1\xe1\xa9\x96-\x03]3\x8400\x90][\xd3e\xe0\xf8\x8e\x01|\xcd\xd0<\xfd \xec\x85\xa0(\x8f\x8b\xa6K\xc2\xa9\xec\xd5\x01\x9b,\x1f\xcb\xbc\xceW\xcb\xb3\xcbt\xe7\xe5\xdb?\xfe\x89[\xc6Q\xd2\x1d|~\x14\x1a\xc4n\x92D\xe1mg\xed\xe9\xdc\xbdHb7\r:g\x08nD\x0e\xd0\xbd\x01\xa9{\xd6\x99\x1b\xcc.\xae\x82yw\xeep6\x9f\xba\xdd\xe1\xc9b:u\xe7\xd1\x8f\xee\xcdK]/\xee\x8e\x0e\xa38\xee\xdc\xbb\xe42\x8e\x8e\x18\xdb\xe3\xe0\x81\x7f\x04\xb7\xb0\x0c\x9cw\xae\xfb*J\xa2\xd9Eg\xf8u\xe0}\x84m\xde\x82\xd7\xf7\xc7\xfe\xea9\xdc\x87\xcd\x1f\x87K\xbbY?\x7f\xb2\'\x7f\x01\x00\x00\xff\xff\x03\x00PK\x03\x04\x14\x00\x06\x00\x08\x00\x00\x00!\x00\x7f\x01\x8c\xa0\xc0\x00\x00\x00\x1c\x01\x00\x00)\x00\x00\x00xl/webextensions/_rels/taskpanes.xml.rels\\\xcf\xc1n\xc20\x0c\x06\xe0;\x12\xef\x10\xf9\xbe\xba\xd9aB\xa8ioH\\\'\xf6\x00!u\xdb\x88&\x8e\xe2h\x83\xb7_\xb8Q\x8e\xb6\xe5\xcf\xfe\xbb\xe1\x1eV\xf5KY<G\x03\xbaiAQt<\xfa8\x1b\xf8\xb9\x9c>\x0e\xa0\xa4\xd88\xda\x95#\x19x\x90\xc0\xd0\xefw\xdd7\xad\xb6\xd4%Y|\x12U\x95(\x06\x96R\xd2\x11Q\xdcB\xc1J\xc3\x89b\x9dL\x9c\x83-\xb5\xcc3&\xebnv&\xfcl\xdb/\xcc\xaf\x06\xf4\x1bS\x9dG\x03\xf9<jP\x97G\xaa\x97\xdf\xec\xe0]f\xe1\xa94\x8e\x03\xf24y\xf7T\xb5\xde\xaa\xf8GW\xba\x17\x8a\xcf\x80\x95\xb2y\xa6b\xe0\xb5\xab\x9b\xfa#`\xdf\xe1&S\xff\x0f\x00\x00\xff\xff\x03\x00PK\x03\x04\x14\x00\x06\x00\x08\x00\x00\x00!\x00\x90\x00\r\xb0\xa6\x01\x00\x00\xdd\x02\x00\x00\x0f\x00\x00\x00xl/metadata.xmldQKO\x1b1\x10\xbeW\xe2?X\xbeo\xbc!\x14B\xb4\xbb(\x02\xe5D%T(\xea\xd5\xb1\xc7\x89U\xbfd{iVU\xff{g\xbd\x84\x068\xd9\xe3\x19\x7f\xf3=\x9a\x9b\x835\xe4\x05b\xd2\xde\xb5t>\xab)\x01\'\xbc\xd4n\xd7\xd2\x1fO\x9bjII\xca\xdcIn\xbc\x83\x96\x0e\x90\xe8Mw\xf6\xa5\xb1\x90\xb9\xe4\x99\x13\x04p\xa9\xa5\xfb\x9c\xc3\x8a\xb1$\xf6`y\x9a\xf9\x00\x0e;\xcaG\xcb3\x96q\xc7R\x88\xc0e\xda\x03dk\xd8y]_2\xcb\xb5\xa3\x13\xc2\xea \xf9\'\x14\xabE\xf4\xc9\xab<\x13\xde2\xaf\x94\x16\xf0\tg~\xc5\xe4\xe08\xce\xf2\x18\xf9@\xbb7nOC\x80D\x84\xef]Fm\x1f\x1a\x04\xbf\xa0\xa0\x9f\xf7w\xeb\x87\xef\x94X\xed\x1e\xfb\x10|\xcc \x9f\xdf\xfc@\x965Z"|\x18F\x04\x12x\xca\xb06\xe6\x7f\xf1\xccM\x0f\xa8\x1f\x9b\x16\xe2\x0e\x11\xf1\x96\x82\xd1y\xa3c*{I\xf4\xbfo\xbdy\xdck5\xd5\xc2\x00\x8f\x9b\xc9\x9a2_\x1en\xbd\xb5\xe0\xf2\x84\xc5S\xd2\xbb1\x91q9D1\xe1\n0\xe6\x1b\x1a?\xbe\xb3\xaea\xc7\x10\x8a\xd0\xaeQ}\xee#\x8c\x03%\x99\xf7\x02Ol\xd8\xfe\xea\x1a8\xe4\xfb\x94\xcbI\xfa\xa8[\xfag+\xb7\xdb\xa5\x90\xa2R|\x0e\xd5\xc5\xf5%T|\xf9\xf5\xaaZ\x88\x85Z\xd4\xa2>\xbf\x16\x8b\xbfh"\x06\xb5z5|=\x1a\xfe\x101\xec\x985Z\xad\xee\xa6 \no\x85\x9a\r\x0f\tdK\xebB\x17w"\xe9\xe3f6\xd2`\xef9w\xcdQbQ\xf0\x81s\x14d2\xf0\xe5\x88X N\xbf\x9c\x98\xd2\xfd\x03\x00\x00\xff\xff\x03\x00PK\x03\x04\x14\x00\x06\x00\x08\x00\x00\x00!\x00\xda\x9b\xfc\xe3\xb9\x00\x00\x00P\x01\x00\x00\x10\x00\x00\x00xl/calcChain.xmlt\x90]\n\xc20\x10\x84\xdf\x05\xef\x10\xf6]S\xeb\x0f"M\x0b*\x9e@\x0f\x10\xd2\xb5\r\xe4\xa7d\x83\xe8\xed\x8d\x82\x95R}\x19\xd8\x99\x8f\xd9e\x8b\xean\r\xbba \xed\x9d\x80\xc5<\x03\x86N\xf9Z\xbbF\xc0\xe5|\x9am\x81Q\x94\xae\x96\xc6;\x14\xf0@\x82\xaa\x9cN\n%\x8d:\xb4R;\x96\x1a\x1c\thc\xecv\x9c\x93j\xd1J\x9a\xfb\x0e]J\xae>X\x19\xd3\x18\x1aN]@YS\x8b\x18\xad\xe1y\x96m\xb8M\x05P\x16\x8a\x05\x01\xfb\x150-`\r\xcc\xa4K\x80\xc9\x97\xf2Q\x98V\x8d\xec?t\xb2\x07\xf41\x7foH:\xe8\xfe\xdaCz\xf9\x9b\xee\xed\x0f\xcd\xfb_\x94O\x00\x00\x00\xff\xff\x03\x00PK\x03\x04\x14\x00\x06\x00\x08\x00\x00\x00!\x00\x90Y\x0f\xc9M\x01\x00\x00m\x02\x00\x00\x11\x00\x08\x01docProps/core.xml \xa2\x04\x01(\xa0\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x84\x92_K\xc30\x14\xc5\xdf\x05\xbfC\xc9{\x9b\xfe\xd9t\x84\xb6\x03\x9d\xc3\x07\x07\x82\x15\xc5\xb7\x90\xdcm\xc1&-I\\\xd7oo\xdan\xb52\xc1\xc7\xe4\x9c\xfb\xcb9\x97\xa4\xcb\xa3,\xbd\x03h#*\x95\xa1(\x08\x91\x07\x8aU\\\xa8]\x86^\x8b\xb5\xbf@\x9e\xb1TqZV\n2\xd4\x82A\xcb\xfc\xfa*e5a\x95\x86g]\xd5\xa0\xad\x00\xe39\x922\x84\xd5\x19\xda[[\x13\x8c\r\xdb\x83\xa4&p\x0e\xe5\xc4m\xa5%\xb5\xee\xa8w\xb8\xa6\xec\x93\xee\x00\xc7ax\x83%X\xca\xa9\xa5\xb8\x03\xfa\xf5HD\'$g#\xb2\xfe\xd2e\x0f\xe0\x0cC\t\x12\x9458\n"\xfc\xe3\xb5\xa0\xa5\xf9s\xa0W&N)l[\xbbN\xa7\xb8S6g\x838\xba\x8fF\x8c\xc6\xa6i\x82&\xe9c\xb8\xfc\x11~\xdf<\xbd\xf4U}\xa1\xba]1@y\xca\x19a\x1a\xa8\xadt\xbe\x12\x87\x96\x9a\xbd\x06\xf0\x1e\xbc\xc7\x14O\xa4n\x8d%5v\xe36\xbe\x15\xc0\xef\xda\x0b\xf7\xa5\xc3\xb1\xfb*\xc3\x03\xc0=\x17\x8e\x0cU\xce\xca[r\xbf*\xd6(\x8f\xc3x\xee\x87\x89\x1f\'E\xb4 \xd1-\t\x17\x1f]\x80_\xf3]\xd8\xe1B\x9eb\xfcK\x9c\xfb\xd1\xac\x88nH<#\xf3dB<\x03\xf2\x14_|\x90\xfc\x1b\x00\x00\xff\xff\x03\x00PK\x03\x04\x14\x00\x06\x00\x08\x00\x00\x00!\x00\x80|\x18ul\x02\x00\x00+\x06\x00\x00\x10\x00\x08\x01docProps/app.xml \xa2\x04\x01(\xa0\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x9cTQo\xda0\x10~\x9f\xb4\xff\x10\xe5\x1d\x02\x1d\xaa\xa6\xca\xa4\x9a`\x88Ik\x8b\x80\x96\xc7\xe8\xe6\\\x88\x85cG\xb6\xa1e\xbf~\xe7D@hC\xab\xee\xed|w\xfe\xee\xf3w\xbec\xb7/\x85\x0cvh\xac\xd0j\x18\xf6\xbb\xbd0@\xc5u*\xd4z\x18>.\'\x9d\xefa`\x1d\xa8\x14\xa4V8\x0c\xf7h\xc3\xdb\xf8\xeb\x1763\xbaD\xe3\x04\xda\x80 \x94\x1d\x86\xb9s\xe5M\x14Y\x9ec\x01\xb6KaE\x91L\x9b\x02\x1c\x1d\xcd:\xd2Y&8\x8e5\xdf\x16\xa8\\t\xd5\xeb]G\xf8\xe2P\xa5\x98v\xca#`X#\xde\xec\xdc\xff\x82\xa6\x9a{~\xf6i\xb9/\x89p\xcc~\x94\xa5\x14\x1c\x1c\xbd2\xbe\x13\xdch\xab3\x17\xfc|\xe1(Y\xd4\x0c2b\xb7@\xbe5\xc2\xed\xe3\x1e\x8b\x9aG\xb6\xe0 qD\xc0q\x06\xd2"\x8bN\x0e6E\xf0\xa2\xcd@\x18\x1b\xb3\x9d\xbb\xd9!w\xda\x04V\xfc%\xd9\x06a\xf0\x07,z:\xc3p\x07F\x80rD\xcb\xa7\xd5\x87\xca\x96\xa5u&^i\xb3\xb19\xa2\xb3,\xa2\x84\xdaY\x99\xcd\xdc\xa6-\x06\xf1\xa0J \xe3\xdd\xc4\x1a\xeb\x1e\nL\x839\xa85~\xa6D\xff\xba\xbd\x86\'Y?\x96\x8a\x9f\xcb\xb0\x14N\xa2}\xc8f`\\\x8b*W\xf4\xdbN\xb2T\xe4jQj\x9e\xbf\x14\xc9\xb1\xe5\xbei\xb6c\x1d\x96gl\x8f\xd2\xcc\x80o\xe0\xd5S\x8e\xc1\x89\xd4\xdaP_\x9aR\x9e\x82\xbe\x8b\x01G!/e\x8c\xd0@!x\xb2\x14\x92\xda}\xea\xc6\xd1\x1a\x13|;\xad\x89\x07O\xde\x03\x9f\xe8-\xcd\x95\x7f^+\xf4\x1d:\x90\xc9\x1c*v\t\x8d`\xb26B\xca\xe4\xd9\xff\x8f\xd6\x1b\xf7Z%\xb5d[CW\x9fA\xca\xf6\xc4\x07\x97\xa3i\x85\xa0\xff\xab\xdc%5f\x12\xa8\r\x17\xe5\x9c\x13a\xa1\xe8rU9\xd1&\x19\x0b(s\x03\xeb\xa2\xf2\xb4\x16\\T-\xae\xf8\x8e\xb4\xe2\x06/Vodf\xd4\x15\xac\x84\xf8\x08\xf3N+-\x85\xcb\x05\xff(s\x8eB\xd1\xb2\xe2\xe8wSk\xf2\n\xe8\xf1\xb4\xa6tvI\xa0\x95P\xa9~~;T\xd5*\xa0\xe9x5\x0f#]\x94\xa0\xf6\xf1t\xc6\xa2\x83\xcd~\x0b\xb5\xb1\x8f\xe5R\x8f\xa9\xdca\xd1\x9c;\xd9"\x07\x83)\xed\xa6\xe3"::\xd8\x94v\x8c\xa1\x0f\xbd\xb1\xa3\xdc\x8fxz\xc8y\x1b\xf0k\xf1\xa9\xde\xfdq\xff\xba\xdb\xfb\xd6\xa3\x8d\xd7\xf0\xb1\xe8\xb4\xe5\xe3\x7f\x00\x00\x00\xff\xff\x03\x00PK\x01\x02-\x00\x14\x00\x06\x00\x08\x00\x00\x00!\x00o m\x99\xae\x01\x00\x00\x16\x08\x00\x00\x13\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00[Content_Types].xmlPK\x01\x02-\x00\x14\x00\x06\x00\x08\x00\x00\x00!\x00i\x8a a\x1d\x01\x00\x00\xe1\x02\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe7\x03\x00\x00_rels/.relsPK\x01\x02-\x00\x14\x00\x06\x00\x08\x00\x00\x00!\x00A\x1aB\xa8\xdb\x04\x00\x00\xab\r\x00\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x005\x07\x00\x00xl/workbook.xmlPK\x01\x02-\x00\x14\x00\x06\x00\x08\x00\x00\x00!\x00DY\x84\x93-\x01\x00\x00n\x05\x00\x00\x1a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00=\x0c\x00\x00xl/_rels/workbook.xml.relsPK\x01\x02-\x00\x14\x00\x06\x00\x08\x00\x00\x00!\x00\xb7\xd0\x07\xf4\xc6\x03\x00\x00\x8e\n\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xaa\x0e\x00\x00xl/worksheets/sheet1.xmlPK\x01\x02-\x00\x14\x00\x06\x00\x08\x00\x00\x00!\x00~\x06\xb0\x82\\=\x00\x00\xba\xcf\x01\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa6\x12\x00\x00xl/worksheets/sheet2.xmlPK\x01\x02-\x00\x14\x00\x06\x00\x08\x00\x00\x00!\x00\xb3s\xe1x?\x08\x00\x00\xdf\x1c\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x008P\x00\x00xl/worksheets/sheet3.xmlPK\x01\x02-\x00\x14\x00\x06\x00\x08\x00\x00\x00!\x00\xec\x84\x8b;\xbb\x07\x00\x00\xc5\x1a\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xadX\x00\x00xl/worksheets/sheet4.xmlPK\x01\x02-\x00\x14\x00\x06\x00\x08\x00\x00\x00!\x00\xc1\x17\x10\xbeN\x07\x00\x00\xc6 \x00\x00\x13\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x9e`\x00\x00xl/theme/theme1.xmlPK\x01\x02-\x00\x14\x00\x06\x00\x08\x00\x00\x00!\x00\xe3b\x7fN\xbe\x06\x00\x00YF\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1dh\x00\x00xl/styles.xmlPK\x01\x02-\x00\x14\x00\x06\x00\x08\x00\x00\x00!\x002D\xe2\xeb#\x06\x00\x00\x9a\x11\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06o\x00\x00xl/sharedStrings.xmlPK\x01\x02-\x00\x14\x00\x06\x00\x08\x00\x00\x00!\x00*\xffY\xbf\xf1\x00\x00\x00p\x01\x00\x00\x1e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00[u\x00\x00xl/webextensions/taskpanes.xmlPK\x01\x02-\x00\x14\x00\x06\x00\x08\x00\x00\x00!\x00\x98\xb5\xaf\xe6}\x02\x00\x008\x08\x00\x00"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x88v\x00\x00xl/webextensions/webextension1.xmlPK\x01\x02-\x00\x14\x00\x06\x00\x08\x00\x00\x00!\x00\x7f\x01\x8c\xa0\xc0\x00\x00\x00\x1c\x01\x00\x00)\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00Ey\x00\x00xl/webextensions/_rels/taskpanes.xml.relsPK\x01\x02-\x00\x14\x00\x06\x00\x08\x00\x00\x00!\x00\x90\x00\r\xb0\xa6\x01\x00\x00\xdd\x02\x00\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00Lz\x00\x00xl/metadata.xmlPK\x01\x02-\x00\x14\x00\x06\x00\x08\x00\x00\x00!\x00\xda\x9b\xfc\xe3\xb9\x00\x00\x00P\x01\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f|\x00\x00xl/calcChain.xmlPK\x01\x02-\x00\x14\x00\x06\x00\x08\x00\x00\x00!\x00\x90Y\x0f\xc9M\x01\x00\x00m\x02\x00\x00\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06}\x00\x00docProps/core.xmlPK\x01\x02-\x00\x14\x00\x06\x00\x08\x00\x00\x00!\x00\x80|\x18ul\x02\x00\x00+\x06\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x8a\x7f\x00\x00docProps/app.xmlPK\x05\x06\x00\x00\x00\x00\x12\x00\x12\x00\xc0\x04\x00\x00,\x83\x00\x00\x00\x00'
logo_bytes = base64.b64decode(LOGO_BASE64)
logo_img   = Image.open(BytesIO(logo_bytes))
###############################################################################
# 0) Page Config & Custom CSS
###############################################################################
st.set_page_config(
    page_title="D.I.V.Y.A – Data Interface Visualization for Your Alternatives",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# ─── 2) Global CSS ────────────────────────────────────────────────────────────
st.markdown(
    """
    <style>
      /* ─── 1) Uniform page padding ─────────────────────────────────────── */
      .main .block-container {
        padding-top:    0rem !important;
        padding-bottom: 0.5rem !important;
        padding-left:   2rem !important;
        padding-right:  2rem !important;
      }
      hr { display: none !important; }

       /* a single class for all your page titles */
      .page-title {
          font-size: 24px !important;    /* pick a value smaller than “Welcome” now, 
                                             but larger than your Step‑2/3 default */
          font-weight: 600 !important;
          margin: 0.25rem 0 0.75rem 0 !important;
      }

      /* ─── 2) Sidebar expander styling ───────────────────────────────── */
      [data-testid="stSidebar"] .stExpander > div:first-child {
        background-color: #1f77b4 !important;
        color:            #fff !important;
        font-weight:      600;
        border-radius:    0.5rem;
      }

      /* ─── 3) Tooltip styling ───────────────────────────────────────── */
      [data-testid="stTooltip"] {
        background:    #444 !important;
        color:         #fff !important;
        border-radius: 4px;
      }

      /* ─── 4) Canvas wrapper + canvas styling ─────────────────────── */
      .canvas-wrapper {
        margin-top: 0rem !important;
      }
      .canvas-wrapper .canvas {
        border:     3px solid #444 !important;
        border-top: none       !important;
        padding:    0rem       !important;
        box-sizing: border-box;
      }
      .canvas-wrapper .canvas .section {
        padding:        0rem;
        margin-bottom:  0.75rem;
        box-sizing:     border-box;
      }
      .canvas-wrapper .canvas .top-label {
        font-size:   1.2rem;
        font-weight: bold;
        color:       #fff;
      }

      /* ─── 5) Card styling everywhere ─────────────────────────────── */
      .card {
        background:    #fff;
        border-radius: 8px;
        padding:       0rem;
        margin-bottom: 1rem;
        box-shadow:    0 2px 6px rgba(0,0,0,0.08);
      }
      .top-label {
        color:       #fff;
        font-weight: 600;
        text-align:  center;
        padding:     0rem;
        border-radius: 4px;
      }

      /* ─── 6) DataFrame tweaks ───────────────────────────────────── */
      .stDataFrame table {
        table-layout: auto !important;
        word-wrap:    break-word;
      }
      .stDataFrame table tbody tr th:first-child,
      .stDataFrame table thead tr th:first-child {
        position: sticky;
        left:     0;
        background:#fff;
        z-index:  2;
      }

      /* ─── 7) Multiselect token styling ─────────────────────────── */
      div[data-testid="stMultiSelect"] span {
        background-color: #1f77b4 !important;
        color:            #fff !important;
        border-radius:    4px !important;
        padding:          2px 6px !important;
        margin:           2px !important;
        font-size:        14px;
      }
    </style>
    """,
    unsafe_allow_html=True,
)
st.markdown("""
<script>
const width = window.innerWidth;
if (width < 600) {
  document.body.classList.add('mobile');
}
</script>
<style>
body.mobile .stTabs { flex-direction: column; }
</style>
""", unsafe_allow_html=True)
# ─── Your Plotly template constant ───────────────────────────────────────────────
COLOR_TEMPLATE = "plotly_white"

col_empty_left, col_center, col_empty_right = st.columns([1,6,1], gap="small")

with col_center:
    st.markdown(
        f"""
        <div style="
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 1rem;
            margin-bottom: 1.5rem;
        ">
          <img
            src="data:image/png;base64,{LOGO_BASE64}"
            style="width:60px; height:auto;"
          />
          <div style="text-align: left;">
            <h1 style="
                margin: 0;
                font-size: 2.25rem;
                color: #2c3e50;
                line-height: 1;
            ">D.I.V.Y.A</h1>
            <p style="
                margin: 0;
                font-size: 1rem;
                color: #7f8c8d;
                line-height: 1.2;
            ">Data Interface Visualization for Your Alternatives.</p>
          </div>
        </div>
        """,
        unsafe_allow_html=True,
    )
def render_step_progress(current_step: int):
    """
    Draw a 4‐segment progress bar,
    marking completed steps with ✓, the current step with →,
    and future steps in grey.
    """
    labels = ["Step 1","Step 2","Step 3","Results Canvas"]
    html = ['<div style="display:flex; margin-bottom:1rem;">']
    for i, label in enumerate(labels):
        if i < current_step - 1:
            icon = "✓"
            color = "#2c3e50"
        elif i == current_step - 1:
            icon = "→"
            color = "#f39c12"
        else:
            icon = ""
            color = "#aaa"
        html.append(
            f'''<div style="
                    flex:1;
                    text-align:center;
                    padding:0.5rem;
                    border-bottom:3px solid {color};
                    color:{color};
                    font-weight:bold;
                ">
                  {icon} {label}
               </div>'''
        )
    html.append("</div>")
    st.markdown("".join(html), unsafe_allow_html=True)

for key, val in {
    "page":             0,
    "manual_override": False,
    "work_package":    None,
}.items():
    if key not in st.session_state:
        st.session_state[key] = val
###############################################################################
# 1) Custom Rounding & Helper Functions
###############################################################################
def custom_round(x):
    try:
        val = float(x)
        if 0 < abs(val) < 1:
            return round(val, 2)
        else:
            return int(round(val))
    except:
        return x

def remove_outliers_inclusive(series):
    if series.empty:
        return series
    Q1 = series.quantile(0.25, interpolation="midpoint")
    Q3 = series.quantile(0.75, interpolation="midpoint")
    IQR = Q3 - Q1
    lower = Q1 - 1.5 * IQR
    upper = Q3 + 1.5 * IQR
    result = series[(series >= lower) & (series <= upper)]
    if result.empty:
        return series
    return result

def rename_columns(df):
    df.columns = df.columns.str.strip().str.lower()
    return df

def compute_uncertainty_for_row(row):
    """
    Example logic for computing an uncertainty factor from row data.
    Adjust or remove if not needed.
    """
    if "uncertainity zepd" in row and pd.notna(row["uncertainity zepd"]):
        val_str = str(row["uncertainity zepd"]).strip().lower()
        if val_str != "not declared":
            val_str = val_str.replace("%", "").strip()
            try:
                val_num = float(val_str)
                return val_num / 100 if val_num > 1 else val_num
            except:
                pass
    # Fallback approach
    Z_M, Z_F, Z_P = 0.20, 0.20, 0.20
    if "specificity" in row and pd.notna(row["specificity"]):
        spec = str(row["specificity"]).strip().lower()
        if spec == "product specific":
            Z_M, Z_F, Z_P = 0.02, 0.02, 0.02
        elif spec == "plant specific":
            Z_M, Z_F, Z_P = 0.02, 0.02, 0.20
        elif spec == "manufacturer specific":
            Z_M, Z_F, Z_P = 0.02, 0.20, 0.20
    Z_T = 0.20
    if "time representativeness" in row and pd.notna(row["time representativeness"]):
        time_str = str(row["time representativeness"]).lower()
        days = 365
        nums = re.findall(r"\d+", time_str)
        if nums:
            num_val = float(nums[0])
            if "day" in time_str:
                days = num_val
            elif "year" in time_str:
                days = num_val * 365
        Z_T = 0.02 if days < 90 else 0.20
    Z_S = 0.10
    return np.sqrt(Z_M**2 + Z_F**2 + Z_P**2 + Z_T**2 + Z_S**2)

def load_predefined_mapping(mapping_file, work_package):
    """
    Reads the Excel file (mapping_file) and returns a dictionary of 
    PM -> {SM1..SM5, plus SM2 dependencies}.
    """
    xl = pd.ExcelFile(mapping_file)
    mapping_dict = {}
    for sheet in xl.sheet_names:
        if sheet not in ["Packages", "Instructions-Steps"]:
            df_map = pd.read_excel(mapping_file, sheet_name=sheet, header=None)
            # Check cell B1 for the selected work package
            sheet_work = str(df_map.iloc[0, 1]).strip()
            if sheet_work == work_package:
                # Parse from row 4 => index=3
                for idx, row in df_map.iloc[3:].iterrows():
                    pm = row[1]  # column B
                    if pd.isna(pm):
                        continue
                    pm = str(pm).strip()
                    mapping_dict[pm] = {}
                    # SM1..SM5 => columns C..G => indexes 2..6
                    for i, smcat in enumerate(["SM1", "SM2", "SM3", "SM4", "SM5"]):
                        col_idx = 2 + i
                        cell_val = row[col_idx] if col_idx in row.index else None
                        if pd.isna(cell_val):
                            mapping_dict[pm][smcat] = []
                        else:
                            items = [x.strip() for x in str(cell_val).split(",") if x.strip()]
                            if smcat == "SM2":
                                # list of dicts => "material":..., "dependency":None
                                mapping_dict[pm][smcat] = [{"material": it, "dependency": None} for it in items]
                            else:
                                # SM1, SM3..SM5 => list of dicts => "material": item
                                mapping_dict[pm][smcat] = [{"material": it} for it in items]
                    # SM2 dependency => columns H..I => indexes 7..8
                    sm2_dep_item = row[7] if 7 in row.index else None
                    sm2_dep_value = row[8] if 8 in row.index else None
                    if pd.notna(sm2_dep_item) and str(sm2_dep_item).strip() != "":
                        sm2_dep_item = str(sm2_dep_item).strip()
                        sm2_dep_value_str = None
                        if pd.notna(sm2_dep_value) and str(sm2_dep_value).strip() != "":
                            sm2_dep_value_str = str(sm2_dep_value).strip()
                        if "SM2" in mapping_dict[pm]:
                            for obj in mapping_dict[pm]["SM2"]:
                                if obj["material"] == sm2_dep_item:
                                    obj["dependency"] = sm2_dep_value_str
                break
    return mapping_dict

###############################################################################
# 2) Analyze Each Material (Sheet) for Case 1 & Case 2
###############################################################################
def analyze_material(df, material_name):
    df = rename_columns(df)
    # Check for required columns
    for col in ["embodied energy", "embodied carbon"]:
        if col not in df.columns:
            raise KeyError(f"Sheet '{material_name}' missing '{col}'")
    ee_list_c1 = []
    ec_list_c1 = []
    ee_list_c2 = []
    ec_list_c2 = []
    debug_rows = []

    # Build row-by-row lists
    for i, row in df.iterrows():
        if pd.isna(row["embodied energy"]) or pd.isna(row["embodied carbon"]):
            continue
        ee_val = float(row["embodied energy"])
        ec_val = float(row["embodied carbon"])

        # CASE 1
        ee_list_c1.append(ee_val)
        ec_list_c1.append(ec_val)

        # CASE 2 => add uncertainty factor to carbon
        ee_list_c2.append(ee_val)
        factor = compute_uncertainty_for_row(row)
        if ec_val >= 0:
            adj_ec = ec_val * (1 + factor)
        else:
            adj_ec = ec_val * (1 - factor)
        ec_list_c2.append(adj_ec)

        debug_rows.append({
            "RowIndex": i,
            "Material": material_name,
            "Raw EC": ec_val,
            "Factor": round(factor, 4),
            "Adjusted EC": round(adj_ec, 4),
        })

    # Convert to Series
    s_ee_c1 = pd.Series(ee_list_c1)
    s_ec_c1 = pd.Series(ec_list_c1)
    s_ee_c2 = pd.Series(ee_list_c2)
    s_ec_c2 = pd.Series(ec_list_c2)

    # CASE 1 => median, range, etc.
    s_ee_c1_clean = remove_outliers_inclusive(s_ee_c1)
    s_ec_c1_clean = remove_outliers_inclusive(s_ec_c1)
    ee_median = s_ee_c1_clean.median() if not s_ee_c1_clean.empty else np.nan
    ec_median = s_ec_c1_clean.median() if not s_ec_c1_clean.empty else np.nan
    ee_min = s_ee_c1_clean.min() if not s_ee_c1_clean.empty else np.nan
    ee_max = s_ee_c1_clean.max() if not s_ee_c1_clean.empty else np.nan
    ec_min = s_ec_c1_clean.min() if not s_ec_c1_clean.empty else np.nan
    ec_max = s_ec_c1_clean.max() if not s_ec_c1_clean.empty else np.nan
    ee_q1 = s_ee_c1_clean.quantile(0.25, interpolation="midpoint") if not s_ee_c1_clean.empty else np.nan
    ee_q3 = s_ee_c1_clean.quantile(0.75, interpolation="midpoint") if not s_ee_c1_clean.empty else np.nan
    ec_q1 = s_ec_c1_clean.quantile(0.25, interpolation="midpoint") if not s_ec_c1_clean.empty else np.nan
    ec_q3 = s_ec_c1_clean.quantile(0.75, interpolation="midpoint") if not s_ec_c1_clean.empty else np.nan
    from scipy.stats import skew
    ee_skew_val = skew(s_ee_c1) if len(s_ee_c1) > 0 else np.nan
    ec_skew_val = skew(s_ec_c1) if len(s_ec_c1) > 0 else np.nan

    stats_c1 = {
        "EE Skew": custom_round(ee_skew_val),
        "EE Median": custom_round(ee_median),
        "EE Q1": custom_round(ee_q1),
        "EE Q3": custom_round(ee_q3),
        "EE Range": f"[{custom_round(ee_min)}, {custom_round(ee_max)}]",
        "EC Skew": custom_round(ec_skew_val),
        "EC Median": custom_round(ec_median),
        "EC Q1": custom_round(ec_q1),
        "EC Q3": custom_round(ec_q3),
        "EC Range": f"[{custom_round(ec_min)}, {custom_round(ec_max)}]"
    }

    # CASE 2 => worst-case approach
    s_ee_c2_clean = remove_outliers_inclusive(s_ee_c2)
    s_ec_c2_clean = remove_outliers_inclusive(s_ec_c2)
    if s_ee_c2_clean.empty:
        s_ee_c2_clean = s_ee_c2
    if s_ec_c2_clean.empty:
        s_ec_c2_clean = s_ec_c2
    ee_max_c2 = s_ee_c2_clean.max() if not s_ee_c2_clean.empty else np.nan
    ec_max_c2 = s_ec_c2_clean.max() if not s_ec_c2_clean.empty else np.nan
    stats_c2 = {
        "EE Max": custom_round(ee_max_c2),
        "EE Range (Case2)": f"[{custom_round(s_ee_c2_clean.min())}, {custom_round(s_ee_c2_clean.max())}]" if not s_ee_c2_clean.empty else "N/A",
        "EC Max": custom_round(ec_max_c2),
        "EC Range (Case2)": f"[{custom_round(s_ec_c2_clean.min())}, {custom_round(s_ec_c2_clean.max())}]" if not s_ec_c2_clean.empty else "N/A"
    }

    # Optional box plots
    ee_box = px.box(
        df, y='embodied energy', points="all", template=COLOR_TEMPLATE,
        color_discrete_sequence=px.colors.qualitative.Dark2,
        title=f"{material_name} – EE Distribution (Case 1)",
        labels={'embodied energy': 'MJ'}
    )
    ec_box = px.box(
        df, y='embodied carbon', points="all", template=COLOR_TEMPLATE,
        color_discrete_sequence=px.colors.qualitative.Dark2,
        title=f"{material_name} – EC Distribution (Case 1)",
        labels={'embodied carbon': 'kg CO₂eq.'}
    )
    # Add annotations
    ee_box.add_annotation(
        text=(
            f"Median: {custom_round(ee_median)}<br>"
            f"Q1: {custom_round(ee_q1)} & Q3: {custom_round(ee_q3)}<br>"
            f"Range: [{custom_round(ee_min)}, {custom_round(ee_max)}]"
        ),
        xref="paper", yref="paper", x=0.5, y=0.95, showarrow=False,
        font=dict(color="black", size=12)
    )
    ec_box.add_annotation(
        text=(
            f"Median: {custom_round(ec_median)}<br>"
            f"Q1: {custom_round(ec_q1)} & Q3: {custom_round(ec_q3)}<br>"
            f"Range: [{custom_round(ec_min)}, {custom_round(ec_max)}]"
        ),
        xref="paper", yref="paper", x=0.5, y=0.95, showarrow=False,
        font=dict(color="black", size=12)
    )

    debug_df = pd.DataFrame(debug_rows)
    return {
        "stats": stats_c1,
        "stats_worst": stats_c2,
        "ee_box": ee_box,
        "ec_box": ec_box,
        "debug_df": debug_df
    }
def compute_predefined_mapping():
    """
    Find the sheet in mapping_file whose cell B1 matches st.session_state['work_package'],
    then load its predefined mapping and stash primary_materials + mappings.
    """
    if st.session_state.get("manual_override", False):
        return
    mapping_file = st.session_state.get("mapping_file", None)
    work_package = st.session_state.get("work_package", "")

    # defaults if we can’t do anything
    st.session_state["primary_materials"] = []
    st.session_state["mappings"] = {}

    if mapping_file is None or not work_package:
        return

    try:
        xl = pd.ExcelFile(mapping_file)
    except Exception as e:
        st.warning(f"Couldn’t open mapping file: {e}")
        return

    # look for the sheet whose B1 matches our work_package
    target_sheet = None
    for sheet in xl.sheet_names:
        if sheet in ("Instructions‑steps", "Packages"):
            continue
        # read only the top‐left corner
        df0 = pd.read_excel(mapping_file, sheet_name=sheet, header=None, nrows=1, usecols="A:B")
        if len(df0) > 0 and str(df0.iat[0,1]).strip() == work_package:
            target_sheet = sheet
            break

    if target_sheet is None:
        st.warning(f"Work package '{work_package}' not found in any sheet’s B1.")
        return

    # now delegate to your loader (you already wrote this utility)
    predefined = load_predefined_mapping(mapping_file, work_package)

    # stash results
    primaries = list(predefined.keys())
    st.session_state["primary_materials"] = primaries
    st.session_state["mappings"]          = predefined

def override_page():
    """
    Step 2 (override): ask exactly for
    1) which primary materials
    2) define SM1…SM5 + their purposes
    3) map each SM to each primary
    """

    st.header("Step 4: Manual System-Mapping Override")

    analysis_dict = st.session_state.get("analysis_dict", {})
    if not analysis_dict:
        st.error("No data loaded. Please go back and upload your Excel.")
        return
    primary_materials = st.multiselect(
        "Select Primary Materials:",
        options=list(analysis_dict.keys()),
        key="primary_select"
    )

    # collect all SM definitions
    secondary_materials = {}
    used = set()
    for i in range(1, 6):
        sm = f"SM{i}"
        purpose = st.text_input(
            f"Purpose for {sm}", 
            key=f"purpose_{sm}",
            placeholder="enter N/A to stop"
        ).strip()
        if purpose.lower() == "n/a": 
            break

        available = [m for m in analysis_dict if m not in primary_materials and m not in used]
        chosen = st.multiselect(
            f"Select items for {sm} (Purpose: {purpose}):",
            options=available,
            key=f"list_{sm}"
        )
        secondary_materials[sm] = {"purpose": purpose, "materials": chosen}
        used.update(chosen)

    # now map each PM → SM
    mappings = {}
    for pm in primary_materials:
        mappings[pm] = {}
        st.markdown(f"**Mapping for {pm}**")
        for sm, data in secondary_materials.items():
            chosen = st.multiselect(
                f"- {sm} ({data['purpose']}):",
                options=data["materials"],
                key=f"map_{pm}_{sm}"
            )

            entries = []
            # special SM2 dependency logic
            if sm == "SM2" and secondary_materials.get("SM1"):
                for item in chosen:
                    dep = None
                    chk = st.checkbox(
                        f"Does '{item}' need a dependency?",
                        key=f"depchk_{pm}_{item}"
                    )
                    if chk:
                        dep = st.selectbox(
                            f"Dependency for '{item}':",
                            options=secondary_materials["SM1"]["materials"],
                            key=f"dep_{pm}_{item}"
                        )
                    entries.append({"material": item, "dependency": dep})
            else:
                entries = [{"material": it, "dependency": None} for it in chosen]

            mappings[pm][sm] = entries

    if st.button("💾 Save & Continue"):
        st.session_state["primary_materials"] = primary_materials
        st.session_state["mappings"]          = mappings
        st.session_state["system_data"]       = mappings
        st.session_state.page                  = 4
        return
    col1, col2 = st.columns(2)
    if col1.button("← Previous"):
        st.session_state.page = 2
    

def landing_page():
    render_step_progress(1)
    st.markdown(
    '<div class="page-title"> Welcome to the Comparison visual board</div>',
    unsafe_allow_html=True,
    )
    st.write("Please enter your name to get started.")

    # Show the text_input, seeded from session_state if present
    name = st.text_input(
        "Enter your name",
        value=st.session_state.get("user_name", ""),
        key="user_name"
    )

# 2) Project details
def project_details_page():
    # ─── load work_packages from mapping file or fallback ─────────────────────────
    mapping_file = st.session_state.get("mapping_file")
    work_packages = []
    if mapping_file:
        try:
            df_pk = pd.read_excel(mapping_file, sheet_name="Packages", header=None)
            work_packages = df_pk.iloc[3:, 1].dropna().astype(str).tolist()
        except Exception:
            st.warning("Couldn't read 'Packages' sheet; using default list.")
    if not work_packages:
        work_packages = [
            "Shuttering","Concreting","Flooring","Painting",
            "False Ceiling","CP & Sanitary Works","Railing and Metal Works",
            "Windows, Doors"
        ]

    render_step_progress(2)
    st.markdown(
        '<div class="page-title">Step 2: Project Details & Work Package</div>',
        unsafe_allow_html=True
    )

    left_col, right_col = st.columns([3, 1], gap="medium")

    # ─── LEFT: compact form ────────────────────────────────────────────────────────
    with left_col, st.form("step2_form"):
        # first row: project name + area
        r1c1, r1c2 = st.columns(2, gap="small")
        with r1c1:
            project_name = st.text_input(
                "Project Name",
                help="Enter the Project name for which the analysis is required."
            )
        with r1c2:
            project_area = st.text_input(
                "📐 Area (sq ft)",
                help="Total Super Built-up Area."
            )

        # second row: location + unit
        r2c1, r2c2 = st.columns(2, gap="small")
        with r2c1:
            project_location = st.text_input(
                "📍 Location",
                help="City where the project is located."
            )
        with r2c2:
            declared_unit = st.text_input(
                "📏 Declared Unit",
                value="sqm",
                key="declared_unit",
                help="E.g. sqm, m³, etc."
            )

        # third row: mode + override + work package (if detailed)
        r3c1, r3c2 = st.columns([3, 1], gap="small")
        with r3c1:
            mode = st.radio(
                "🔎 Assessment Mode",
                ["Detailed alternative assessment", "Project assessment"],
                index=0,
                key="assessment_mode",
                horizontal=True,
                help="Pick ‘Detailed’ to expose the Work Package dropdown."
            )
        with r3c2:
            st.checkbox(
                "🔄 Manual Override",
                key="manual_override",
                help="If checked, you’ll pick mappings yourself."
            )

        # only show Work Package dropdown when in Detailed mode
        work_pkg = None
        if st.session_state.assessment_mode == "Detailed alternative assessment":
            work_pkg = st.selectbox(
                "Work Package",
                options=work_packages,
                key="work_package_widget",
                help="Select which package to map."
            )

        # final submit button
        submitted = st.form_submit_button("Next →")
        if submitted:
            st.session_state.update({
                "project_name":     project_name,
                "project_area":     project_area,
                "project_location": project_location,
            })
            if work_pkg is not None:
                st.session_state["work_package"] = work_pkg

            st.session_state.page = 2
            return
        

    # ─── RIGHT: logo + collapsible tips ───────────────────────────────────────────
    with right_col:
        logo = Image.open(BytesIO(base64.b64decode(LOGO_BASE64)))
        st.image(logo, width=100)
        with st.expander("💡 Points to Note", expanded=True):
            st.markdown(
                """
                - Expand the sidebar for the User Manual  
                - Hover the ❓ icons for quick instructions  
                - Only “Detailed” mode exposes Work Package  
                - Click **Next →** to continue
                """,
                unsafe_allow_html=True
            )

# 3) Upload
def upload_page():
    render_step_progress(3)
    st.markdown(
    '<div class="page-title">Step 3: Upload material data file</div>',
    unsafe_allow_html=True,
    )
    override_flag = st.session_state.get("manual_override", False)
    st.write("⚙️ manual_override =", override_flag)
    uploaded_file = st.file_uploader("Upload an Excel file of the materials data:", type=["xlsx"])
    st.session_state["manual_override"] = override_flag
    if not uploaded_file:
        st.error("Please upload an Excel file to proceed.")
        return
    st.session_state["uploaded_file"]   = uploaded_file
    all_data = pd.read_excel(uploaded_file, sheet_name=None)
    sheet_names = list(all_data.keys())
    
    # Initialize local variables
    analysis_dict = {}
    debug_info = {}
    sheet_names = []
    
    if uploaded_file:
        st.success("File uploaded successfully!")
        st.session_state["uploaded_file"] = uploaded_file
        with st.spinner("Reading & analyzing…"):
            all_data = pd.read_excel(uploaded_file, sheet_name=None)
            sheet_names = list(all_data.keys())
        
        
    # Initialize summary lists
    summary_list_case1 = []
    summary_list_case2 = []
    
    # Loop through sheets and perform analysis
    for mat in sheet_names:
        try:
            analysis = analyze_material(all_data[mat], mat)
            analysis_dict[mat] = analysis
            debug_info[mat] = analysis["debug_df"]
            s1 = analysis["stats"]
            s2 = analysis["stats_worst"]

            summary_list_case1.append({
                "Material": mat,
                "EE Skew": s1["EE Skew"],
                "EE Median": s1["EE Median"],
                "EE Q1": s1["EE Q1"],
                "EE Q3": s1["EE Q3"],
                "EE Range": s1["EE Range"],
                "EC Skew": s1["EC Skew"],
                "EC Median": s1["EC Median"],
                "EC Q1": s1["EC Q1"],
                "EC Q3": s1["EC Q3"],
                "EC Range": s1["EC Range"]
            })
            summary_list_case2.append({
                "Material": mat,
                "EE Max": s2["EE Max"],
                "EE Range": s2["EE Range (Case2)"],
                "EC Max": s2["EC Max"],
                "EC Range": s2["EC Range (Case2)"]
            })
        except Exception as e:
            st.warning(f"Skipping {mat}: {e}")
        
    # Create DataFrames for the summaries
    df_case1_analysis = pd.DataFrame(summary_list_case1)
    df_case1_analysis.reset_index(drop=True, inplace=True)
    df_case1_analysis.insert(0, "Sl. No.", range(1, len(df_case1_analysis) + 1))
    
    df_case2_analysis = pd.DataFrame(summary_list_case2)
    df_case2_analysis.reset_index(drop=True, inplace=True)
    df_case2_analysis.insert(0, "Sl. No.", range(1, len(df_case2_analysis) + 1))
    
    # Store variables in session_state for later steps
    st.session_state["analysis_dict"] = analysis_dict
    st.session_state["debug_info"] = debug_info
    st.session_state["sheet_names"] = sheet_names
    st.session_state["df_case1_analysis"] = df_case1_analysis
    st.session_state["df_case2_analysis"] = df_case2_analysis

    with st.expander("Show Statistical Analysis", expanded=False):
        choice = st.radio(
            "Select an analysis:",
            ["Case 1: Balanced", "Case 2: Worst-case", "Uncertainty Analysis", "Box Plots"]
        )
        if choice == "Case 1: Balanced":
            st.subheader("Material Analysis Summary (Case 1: Balanced)")
            st.dataframe(df_case1_analysis)
        elif choice == "Case 2: Worst-case":
            st.subheader("Material Analysis Summary (Case 2: Worst-case)")
            st.dataframe(df_case2_analysis)
        elif choice == "Uncertainty Analysis":
            for mat in sheet_names:
                if mat in debug_info:
                    st.subheader(f"{mat} – Row-by-Row Data")
                    st.dataframe(debug_info[mat])
        elif choice == "Box Plots":
            st.subheader("Material Box Plots (Case 1: Balanced)")
            cols = st.columns(3)
            for idx, mat in enumerate(sheet_names):
                with cols[idx % 3]:
                    st.plotly_chart(analysis_dict[mat]["ee_box"], use_container_width=True)
                    st.plotly_chart(analysis_dict[mat]["ec_box"], use_container_width=True)
        
    col1, col2 = st.columns(2)
    if col1.button("← Previous"):
        st.session_state.page = 1
    if col2.button("Next →"):
        if override_flag:
            st.session_state.page = 3
        else:
            pmapping = load_predefined_mapping(
                st.session_state.mapping_file,
                st.session_state.get("work_package")
            )
            st.session_state["primary_materials"] = list(pmapping.keys())
            st.session_state["mappings"]          = pmapping
            st.session_state.page = 4
    
def material_system_results(primary_materials, mappings, compute_only=False):
    # ─────────────────────────────────────────────────────────────────────────────
    # 1) Grab inputs (no Streamlit calls here)
    uploaded_file     = st.session_state.get("uploaded_file")
    analysis_dict     = st.session_state.get("analysis_dict", {})
    primary_materials = st.session_state.get("primary_materials", [])
    mappings          = st.session_state.get("mappings", {})
    declared_unit     = st.session_state.get("declared_unit", "sqm")

    # ─────────────────────────────────────────────────────────────────────────────
    # 2) Compute combinations & accumulate EE/EC
    system_results_case1 = []
    system_results_case2 = []
    counter = 1
    # --- if we’re in compute_only and no one ever set primaries, default them from analysis_dict
    if compute_only and not primary_materials and analysis_dict:
        primary_materials = list(analysis_dict.keys())
        st.session_state["primary_materials"] = primary_materials

    # --- similarly, if mappings is empty you could set an empty map for each primary
    if compute_only and not mappings and primary_materials:
        mappings = {pm: {} for pm in primary_materials}
        st.session_state["mappings"] = mappings
    if compute_only or (uploaded_file and primary_materials and mappings):
        sm_cats = ["SM1","SM2","SM3","SM4","SM5"]
        for primary in primary_materials:
            # prepare options per SM category
            mapping_lists = []
            for cat in sm_cats:
                entries = mappings.get(primary, {}).get(cat, [])
                if cat=="SM2" and entries and isinstance(entries[0], dict):
                    opts = entries
                else:
                    if entries and isinstance(entries[0], dict):
                        opts = [[d["material"]] for d in entries]
                    else:
                        opts = [[x] for x in entries] if entries else [[None]]
                mapping_lists.append((cat, opts))

            cats = [t[0] for t in mapping_lists]
            opts = [t[1] for t in mapping_lists]

            for combo in itertools.product(*opts):
                # base EE/EC
                ee1 = analysis_dict[primary]["stats"]["EE Median"]
                ec1 = analysis_dict[primary]["stats"]["EC Median"]
                ee2 = analysis_dict[primary]["stats_worst"]["EE Max"]
                ec2 = analysis_dict[primary]["stats_worst"]["EC Max"]

                sm_map = {c: "N/A" for c in cats}
                sm1_list = []

                # map chosen → sm_map & collect SM1 deps
                for i, c in enumerate(cats):
                    chosen = combo[i]
                    if c=="SM2" and isinstance(chosen, dict):
                        mat = chosen.get("material"); dep = chosen.get("dependency")
                        if mat: sm_map["SM2"] = mat
                        if dep: sm1_list.append(dep)
                    else:
                        vals = [v for v in chosen if v is not None]
                        if c=="SM1":
                            sm1_list.extend(vals)
                        elif vals:
                            sm_map[c] = ", ".join(vals)

                if sm1_list:
                    sm_map["SM1"] = ", ".join(sorted(set(sm1_list)))

                # accumulate sub-material stats
                for c in cats:
                    mat_str = sm_map[c]
                    if mat_str!="N/A":
                        for m in mat_str.split(", "):
                            if m in analysis_dict:
                                ee1 += analysis_dict[m]["stats"]["EE Median"]
                                ec1 += analysis_dict[m]["stats"]["EC Median"]
                                ee2 += analysis_dict[m]["stats_worst"]["EE Max"]
                                ec2 += analysis_dict[m]["stats_worst"]["EC Max"]

                # record Case 1 & Case 2
                rec1 = {
                    "System": f"S{counter}",
                    "Primary": primary,
                    **{c: sm_map[c] for c in cats},
                    f"EE (MJ/{declared_unit})": custom_round(ee1),
                    f"EC (kg CO₂eq./{declared_unit})": custom_round(ec1)
                }
                rec2 = {
                    "System": f"S{counter}",
                    "Primary": primary,
                    **{c: sm_map[c] for c in cats},
                    f"EE (MJ/{declared_unit})": custom_round(ee2),
                    f"EC (kg CO₂eq./{declared_unit})": custom_round(ec2)
                }
                system_results_case1.append(rec1)
                system_results_case2.append(rec2)
                counter += 1

    # ─────────────────────────────────────────────────────────────────────────────
    # 3) Convert to DataFrames & store
    df1 = pd.DataFrame(system_results_case1)
    df2 = pd.DataFrame(system_results_case2)
    st.session_state["df_systems_case1"] = df1
    st.session_state["df_systems_case2"] = df2

    # ─────────────────────────────────────────────────────────────────────────────
    # 4) Create sorted tables for ascending EE and EC, store in session
    ee_col = f"EE (MJ/{declared_unit})"
    ec_col = f"EC (kg CO₂eq./{declared_unit})"

    # Case‑1 EE‑sorted
    if ee_col in df1.columns:
        st.session_state["df1_sorted_ee"] = df1.sort_values(by=ee_col).reset_index(drop=True)
    else:
        st.session_state["df1_sorted_ee"] = df1.copy()

    # Case‑1 EC‑sorted
    if ec_col in df1.columns:
        st.session_state["df1_sorted_ec"] = df1.sort_values(by=ec_col).reset_index(drop=True)
    else:
        st.session_state["df1_sorted_ec"] = df1.copy()

    # Case‑2 EE‑sorted
    if ee_col in df2.columns:
        st.session_state["df2_sorted_ee"] = df2.sort_values(by=ee_col).reset_index(drop=True)
    else:
        st.session_state["df2_sorted_ee"] = df2.copy()

    # Case‑2 EC‑sorted
    if ec_col in df2.columns:
        st.session_state["df2_sorted_ec"] = df2.sort_values(by=ec_col).reset_index(drop=True)
    else:
        st.session_state["df2_sorted_ec"] = df2.copy()

    # ─────────────────────────────────────────────────────────────────────────────
    # 5) If compute_only, exit before any UI
    if compute_only:
        return

    # ─────────────────────────────────────────────────────────────────────────────
    # 6) UI: render header, warnings, selectbox, then display & chart based on df1/df2
    st.header("Step 3: Material System Results")
    if not uploaded_file:
        st.warning("No file uploaded in Step 1.")
    if not primary_materials:
        st.warning("No primary materials found. Please select them in Step 2.")
    if not mappings:
        st.warning("No mappings found from Step 2.")

    display_option = st.selectbox(
        "Select Analysis Display Option:",
        ["Case 1 Only (Median)", "Case 2 Only (Worst-case)",
         "Both Side-by-Side", "Both Stacked", "Comparison Dashboard"]
    )

    # helper to show a case table and bar charts
    colors    = px.colors.qualitative.Dark2
    color_map = {p: colors[i % len(colors)] for i, p in enumerate(primary_materials)}

    def show_case(df_case, title):
        st.subheader(title)
        st.dataframe(df_case)
        if "System" in df_case:
            fig = px.bar(
                df_case, x="System",
                y=[ee_col, ec_col],
                title=title,
                color="Primary",
                color_discrete_map=color_map,
                template="plotly_white"
            )
            st.plotly_chart(fig, use_container_width=True)

    df1 = st.session_state["df_systems_case1"]
    df2 = st.session_state["df_systems_case2"]

    if display_option == "Case 1 Only (Median)":
        show_case(df1, "Case 1: Median")
    elif display_option == "Case 2 Only (Worst-case)":
        show_case(df2, "Case 2: Worst-case")
    elif display_option == "Both Side-by-Side":
        c1, c2 = st.columns(2)
        with c1: show_case(df1, "Case 1")
        with c2: show_case(df2, "Case 2")
    elif display_option == "Both Stacked":
        show_case(df1, "Case 1")
        show_case(df2, "Case 2")
    else:
        merged = df1.merge(df2, on="System", suffixes=(" (Case 1)", " (Case 2)"))
        st.subheader("Comparison Dashboard")
        st.dataframe(merged)
        
def base_case_comparison(compute_only: bool = False):
    # ─────────────────────────────────────────────────────────────────────────────
    # 1) Grab inputs (no st.xxx calls here)
    declared_unit    = st.session_state.get("declared_unit", "sqm")
    uploaded_file    = st.session_state.get("uploaded_file")
    df_case1         = st.session_state.get("df_systems_case1", pd.DataFrame())

    # ─────────────────────────────────────────────────────────────────────────────
    # 2) Compute df_display (with EE/EC change) and store sorted versions
    ee_col = f"EE (MJ/{declared_unit})"
    ec_col = f"EC (kg CO₂eq./{declared_unit})"

    # default empty
    df_display = pd.DataFrame()

    if uploaded_file and not df_case1.empty and "System" in df_case1.columns:
        # ensure SM columns exist
        for col in ["Primary", "SM1", "SM2", "SM3", "SM4", "SM5"]:
            if col not in df_case1.columns:
                df_case1[col] = "N/A"

        # build DisplayName if missing
        if "DisplayName" not in df_case1.columns:
            def _mk_name(r):
                parts = [f"{r['System']}: PM={r['Primary']}"]
                for sm in ["SM1","SM2","SM3","SM4","SM5"]:
                    if r.get(sm,"N/A")!="N/A":
                        parts.append(f"{sm}={r[sm]}")
                return " | ".join(parts)
            df_case1["DisplayName"] = df_case1.apply(_mk_name, axis=1)

        # compute % change
        # pick a default base (first row) in case user hasn't selected yet
        base_system = st.session_state.get("base_case_selection", df_case1["System"].iloc[0])
        base_row    = df_case1[df_case1["System"]==base_system].iloc[0]
        base_ee     = base_row[ee_col]
        base_ec     = base_row[ec_col]

        def _pct(x, base): 
            return custom_round(((x-base)/base)*100) if base!=0 else 0

        df_case1["EE Change (%)"] = df_case1[ee_col].apply(lambda x: _pct(x, base_ee))
        df_case1["EC Change (%)"] = df_case1[ec_col].apply(lambda x: _pct(x, base_ec))

        # drop SM columns if all "N/A"
        df_display = df_case1.copy()
        for sm in ["SM1","SM2","SM3","SM4","SM5"]:
            if df_display[sm].eq("N/A").all():
                df_display.drop(columns=[sm], inplace=True)

    # store for downstream
    st.session_state["df_base_display"]     = df_display
    st.session_state["df_base_sorted_ee"]   = (
        df_display.sort_values(by=ee_col).reset_index(drop=True)
        if not df_display.empty else pd.DataFrame()
    )
    st.session_state["df_base_sorted_ec"]   = (
        df_display.sort_values(by=ec_col).reset_index(drop=True)
        if not df_display.empty else pd.DataFrame()
    )

    # ─────────────────────────────────────────────────────────────────────────────
    # 3) Bail out before any st.xxx when compute_only
    if compute_only:
        return

    # ─────────────────────────────────────────────────────────────────────────────
    # 4) UI rendering
    st.header("Step 4: Base Case Comparison")

    if not uploaded_file:
        st.warning("No file was uploaded in Step 1. Please go back and upload a file.")
        return
    if df_display.empty:
        st.warning("No valid Case 1 systems found. Please complete Step 3 to generate systems.")
        return

    # select base system
    base_choice = st.selectbox(
        "Select a base system for comparison (Case 1 results):",
        options=df_display["DisplayName"].tolist(),
        key="base_choice_label"
    )
    if base_choice:
        # persist the selection
        system = df_display.loc[df_display["DisplayName"]==base_choice, "System"].iloc[0]
        st.session_state["base_case_selection"] = system

    # show sorted EE table
    st.subheader("Case 1 Systems Sorted by EE")
    st.dataframe(st.session_state["df_base_sorted_ee"])

    # show sorted EC table
    st.subheader("Case 1 Systems Sorted by EC")
    st.dataframe(st.session_state["df_base_sorted_ec"])

    # bar charts for % change
    colors    = px.colors.qualitative.Dark2
    prims     = df_display["Primary"].unique().tolist()
    cmap      = {p: colors[i%len(colors)] for i,p in enumerate(prims)}

    fig_ee = px.bar(
        df_display, x="System", y="EE Change (%)",
        title="EE Change (%) Relative to Base",
        color="Primary", color_discrete_map=cmap, template="plotly_white"
    )
    st.plotly_chart(fig_ee, use_container_width=True)

    fig_ec = px.bar(
        df_display, x="System", y="EC Change (%)",
        title="EC Change (%) Relative to Base",
        color="Primary", color_discrete_map=cmap, template="plotly_white"
    )
    st.plotly_chart(fig_ec, use_container_width=True)

def total_work_calculation(compute_only: bool = False):
    # ─────────────────────────────────────────────────────────────────────────────
    # 1) Grab inputs & defaults (no st.xxx calls here)
    df_case1       = st.session_state.get("df_systems_case1", pd.DataFrame())
    base_system    = st.session_state.get("base_case_selection", None)
    declared_unit  = st.session_state.get("declared_unit", "sqm")
    prev_qty       = st.session_state.get("total_qty", 100.0)

    ee_col = f"EE (MJ/{declared_unit})"
    ec_col = f"EC (kg CO₂eq./{declared_unit})"

    # ─────────────────────────────────────────────────────────────────────────────
    # 2) Compute per-system totals using the last stored quantity
    df_totals = pd.DataFrame()
    if not df_case1.empty and ee_col in df_case1 and ec_col in df_case1:
        df = df_case1.copy()
        df["Total EE (GJ)"]        = df[ee_col] * prev_qty / 1000
        df["Total EC (TonCO₂ eq.)"] = df[ec_col] * prev_qty / 1000
        # carry over DisplayName if it exists
        if "DisplayName" in df_case1.columns:
            df["DisplayName"] = df_case1["DisplayName"]
        else:
            df["DisplayName"] = df["System"]
        st.session_state["df_totals"] = df

    # ─────────────────────────────────────────────────────────────────────────────
    # 3) Bail before UI when computing for the canvas
    if compute_only:
        return

    # ─────────────────────────────────────────────────────────────────────────────
    # 4) UI: Step 5 header and validation
    st.header("Step 5: Total Work Calculation and Comparison")
    if df_case1.empty or "System" not in df_case1.columns:
        st.warning("No valid Case 1 systems found. Please complete Step 3 first.")
        return

    # 5) Let user enter (or update) total quantity
    total_qty = st.number_input(
        f"Enter the total quantity of work (in {declared_unit}):",
        min_value=0.0,
        value=prev_qty,
        step=1.0,
        key="step5_total_qty_input"
    )
    st.session_state["total_qty"] = total_qty

    # 6) Recompute df_totals with the newly entered quantity
    df = df_case1.copy()
    df["Total EE (GJ)"]         = df[ee_col] * total_qty / 1000
    df["Total EC (TonCO₂ eq.)"] = df[ec_col] * total_qty / 1000
    if "DisplayName" in df_case1.columns:
        df["DisplayName"] = df_case1["DisplayName"]
    else:
        df["DisplayName"] = df["System"]
    st.session_state["df_totals"] = df

    # ─────────────────────────────────────────────────────────────────────────────
    # 7) Project‐level comparison summary
    #    Use base_system (fallback to first) and let user pick a comparison system
    if base_system is None or base_system not in df["System"].values:
        base_system = df["System"].iloc[0]

    base_row = df[df["System"] == base_system].iloc[0]
    base_ee  = base_row["Total EE (GJ)"]
    base_ec  = base_row["Total EC (TonCO₂ eq.)"]

    st.subheader("Select Another System for Comparison")
    comp_choice = st.selectbox(
        "Comparison system:",
        options=df["DisplayName"].tolist(),
        key="comp_choice"
    )
    comp_row = df[df["DisplayName"] == comp_choice].iloc[0]
    comp_ee  = comp_row["Total EE (GJ)"]
    comp_ec  = comp_row["Total EC (TonCO₂ eq.)"]

    # 8) Build summary table
    def diff_and_pct(new, base):
        d   = new - base
        pct = (d / base * 100) if base != 0 else 0
        return d, pct

    ee_diff, ee_pct = diff_and_pct(comp_ee, base_ee)
    ec_diff, ec_pct = diff_and_pct(comp_ec, base_ec)

    summary = pd.DataFrame({
        "Scenario": ["Base System", "Comparison System", "Difference (Comp - Base)"],
        "Total EE (GJ)": [base_ee, comp_ee, ee_diff],
        "Total EC (TonCO₂ eq.)": [base_ec, comp_ec, ec_diff],
        "EE Diff (%)": [None, None, custom_round(ee_pct)],
        "EC Diff (%)": [None, None, custom_round(ec_pct)]
    })
    st.subheader("Project‑Level Comparison Summary")
    st.dataframe(summary)

    # ─────────────────────────────────────────────────────────────────────────────
    # 9) Optional bar charts for all systems’ totals
    fig1 = px.bar(
        df, x="System", y="Total EE (GJ)",
        title="Total EE (GJ) for Each System",
        template="plotly_white"
    )
    st.plotly_chart(fig1, use_container_width=True)

    fig2 = px.bar(
        df, x="System", y="Total EC (TonCO₂ eq.)",
        title="Total EC (TonCO₂ eq.) for Each System",
        template="plotly_white"
    )
    st.plotly_chart(fig2, use_container_width=True)

def extended_project(compute_only: bool = False):
    # ─────────────────────────────────────────────────────────────────────────────
    # 1) Pull in your stored totals & previous selections
    df_totals        = st.session_state.get("df_totals", pd.DataFrame())
    base_system      = st.session_state.get("base_case_selection")
    comparison_choice= st.session_state.get("comparison_choice")
    debug_info       = st.session_state.get("debug_info", {})

    # ─────────────────────────────────────────────────────────────────────────────
    # 2) Compute user_items & summary DataFrame (no st calls here)
    user_items = []
    # If someone stored `user_items` from a prior run, pick that up:
    if "user_items" in st.session_state:
        user_items = st.session_state["user_items"]

    # Build summary only if df_totals is present
    df_summary = pd.DataFrame()
    df_pie     = pd.DataFrame()
    if not df_totals.empty:
        # 2a) Rest totals from user_items
        if user_items:
            rest_total_ee = sum(item["EE (GJ)"] for item in user_items)
            rest_total_ec = sum(item["EC (TonCO₂ eq.)"] for item in user_items)
        else:
            rest_total_ee = 0.0
            rest_total_ec = 0.0

        # 2b) Determine comparison system
        if comparison_choice and "DisplayName" in df_totals:
            comp_row = df_totals[df_totals["DisplayName"] == comparison_choice].iloc[0]
        else:
            # default to first
            df_totals["DisplayName"] = df_totals.get("DisplayName", df_totals["System"])
            comp_row = df_totals.iloc[0]
            comparison_choice = comp_row["DisplayName"]

        comp_total_ee = comp_row["Total EE (GJ)"]
        comp_total_ec = comp_row["Total EC (TonCO₂ eq.)"]

        # 2c) Base system totals
        if base_system and base_system in df_totals["System"].values:
            base_row = df_totals[df_totals["System"] == base_system].iloc[0]
        else:
            base_row = df_totals.iloc[0]
            base_system = base_row["System"]
        base_ee = base_row["Total EE (GJ)"]
        base_ec = base_row["Total EC (TonCO₂ eq.)"]

        # 2d) Compute grand totals and differences
        final_total_ee      = rest_total_ee + comp_total_ee
        final_total_ec      = rest_total_ec + comp_total_ec
        base_final_total_ee = rest_total_ee + base_ee
        base_final_total_ec = rest_total_ec + base_ec

        def diff_and_pct(new, base):
            d   = new - base
            pct = (d/base*100) if base!=0 else 0
            return d, pct

        diff_ee, diff_ee_pct = diff_and_pct(final_total_ee, base_final_total_ee)
        diff_ec, diff_ec_pct = diff_and_pct(final_total_ec, base_final_total_ec)

        # 2e) Build summary DataFrame
        df_summary = pd.DataFrame({
            "Scenario": [
                "Additional Project Only (Rest)",
                f"Chosen System ({comp_row['System']})",
                "Grand Total (Chosen)",
                f"Base System ({base_system})",
                "Grand Total (Base)",
                "Difference (Chosen vs Base)"
            ],
            "EE (GJ)": [
                rest_total_ee,
                comp_total_ee,
                final_total_ee,
                base_ee,
                base_final_total_ee,
                diff_ee
            ],
            "EC (TonCO₂ eq.)": [
                rest_total_ec,
                comp_total_ec,
                final_total_ec,
                base_ec,
                base_final_total_ec,
                diff_ec
            ],
            "EE Diff (%)": [None,None,None,None,None,diff_ee_pct],
            "EC Diff (%)": [None,None,None,None,None,diff_ec_pct]
        })

        # 2f) Build pie‐chart DataFrame
        pie_slices = user_items.copy()
        pie_slices.append({
            "Name": f"Chosen: {comp_row['System']}",
            "EE (GJ)": comp_total_ee,
            "EC (TonCO₂ eq.)": comp_total_ec
        })
        df_pie = pd.DataFrame(pie_slices)

    # 2g) Store for downstream or for canvas
    st.session_state["extended_summary"] = df_summary
    st.session_state["extended_pie"]     = df_pie

    # 2h) Prepare Excel if needed
    def make_excel():
        out = BytesIO()
        with pd.ExcelWriter(out, engine="openpyxl") as writer:
            if not df_totals.empty:
                df_totals.to_excel(writer, sheet_name="Totals", index=False)
            if not df_summary.empty:
                df_summary.to_excel(writer, sheet_name="Extended_Summary", index=False)
            for mat, dbg in debug_info.items():
                if dbg is not None and not dbg.empty:
                    dbg.to_excel(writer, sheet_name=f"Debug_{mat[:20]}", index=False)
        return out.getvalue()
    st.session_state["extended_excel"] = make_excel() if not df_totals.empty else None

    # ─────────────────────────────────────────────────────────────────────────────
    # 3) Bail if compute_only
    if compute_only:
        return

    # ─────────────────────────────────────────────────────────────────────────────
    # 4) UI rendering
    st.header("Step 6: Extended Project‑Level Impact & Comparison")

    if df_totals.empty:
        st.warning("No project totals available. Please complete Step 5 first.")
        return

    st.markdown("""
    **Project‑Level Impact:**  
    Now add additional EE & EC (excluding this work) and see combined totals.
    """)

    # A) Rest inputs
    mode = st.selectbox(
        "How to add additional EE & EC:",
        ["Single total", "Multiple items"]
    )

    if mode == "Single total":
        rest_ee = st.number_input("Project EE (GJ) excluding this work:", min_value=0.0, value=0.0, step=1.0)
        rest_ec = st.number_input("Project EC (TonCO₂ eq.) excl. this work:", min_value=0.0, value=0.0, step=1.0)
        user_items = [{"Name":"Rest of Project","EE (GJ)":rest_ee,"EC (TonCO₂ eq.)":rest_ec}]
    else:
        n = st.number_input("Number of additional items:", min_value=1, max_value=10, value=1, step=1, key="ext_n")
        user_items = []
        for i in range(int(n)):
            cols = st.columns([2,1,1])
            name = cols[0].text_input(f"Item #{i+1} Name:", key=f"ext_name_{i}")
            ee   = cols[1].number_input(f"EE (GJ) #{i+1}:", min_value=0.0, value=0.0, key=f"ext_ee_{i}")
            ec   = cols[2].number_input(f"EC (TonCO₂ eq.) #{i+1}:", min_value=0.0, value=0.0, key=f"ext_ec_{i}")
            user_items.append({"Name": name or f"Item {i+1}", "EE (GJ)": ee, "EC (TonCO₂ eq.)": ec})

    # B) Show summary table
    st.subheader("Extended Impact Summary")
    st.dataframe(df_summary)

    # C) Pie charts
    p1, p2 = st.columns(2)
    with p1:
        fig1 = px.pie(df_pie, names="Name", values="EE (GJ)", title="EE Breakdown")
        st.plotly_chart(fig1, use_container_width=True)
    with p2:
        fig2 = px.pie(df_pie, names="Name", values="EC (TonCO₂ eq.)", title="EC Breakdown")
        st.plotly_chart(fig2, use_container_width=True)

    # D) Download all results
    if st.session_state.get("extended_excel"):
        st.download_button(
            "Download All Results (Excel)",
            data=st.session_state["extended_excel"],
            file_name="Extended_Project_Results.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

def draw_horizontal_heat_strip(df, metric_col, title, colorscale):
    # Sort ascending
    sorted_df = df.sort_values(metric_col)
    values = sorted_df[metric_col].tolist()
    names  = sorted_df["DisplayName"].tolist()
    n = len(values)

    # One-row heatmap
    fig = go.Figure(
        go.Heatmap(
            z=[values],               # shape = (1, n)
            x=list(range(n)),         # positions 0…n-1
            y=[metric_col],
            text=[                       # also 1×N!
                [f"{names[i]}<br>{metric_col}: {values[i]:.1f}"
                for i in range(n)]
            ],
            hoverinfo="text",
            colorscale=colorscale,    # e.g. "Greens" or px.colors.sequential.Greens
            showscale=False,
        )
    )
    
    # Layout tweaks
    fig.update_layout(
        title=title,
        height=100,
        margin=dict(l=40, r=40, t=40, b=30),
        xaxis=dict(
            tickmode="array",
            tickvals=[0, n - 1],
            ticktext=["Least (prefer)", "Greatest (avoid)"],
            showgrid=False,
            zeroline=False,
            showline=False,
        ),
        yaxis=dict(visible=False),
        plot_bgcolor="white",
    )
    return fig


def display_canvas_dashboard():
    st.markdown("""
    <style>
    /* ─── bump the canvas down so it doesn’t get cut off ─────────────────── */
    .canvas-wrapper {
        margin-top: 1rem !important;
    }

    /* ─── minimal outer padding inside the block-container ──────────────── */
    .block-container {
        padding: 1rem 2rem !important;
    }

    /* ─── card styling ─────────────────────────────────────────────────── */
    .card {
        background: #fff;
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1rem;
        box-shadow: 0 2px 6px rgba(0,0,0,0.08);
    }

    /* ─── top‑labels inside cards ───────────────────────────────────────── */
    .top-label {
        color: #fff;
        font-weight: 600;
        text-align: center;
        padding: 0.5rem;
        border-radius: 4px;
    }
    </style>
    """, unsafe_allow_html=True)

    # 0) Ensure quantity is initialized
    if "total_qty" not in st.session_state:
        st.session_state["total_qty"] = 1.0
    wp        = st.session_state.get("work_package", "")
    uploaded = st.session_state.get("uploaded_file")
    if not (wp and uploaded):
        return
    
    try:
        xls    = pd.ExcelFile(uploaded)
        sheets = {s.strip() for s in xls.sheet_names}
    except Exception:
        st.error("❗ Could not read your Excel file. Please upload a valid .xlsx.")
        return
    
    pms = st.session_state.get("primary_materials", [])
    primaries = [str(x).strip() for x in pms if isinstance(x, (str, bytes))]
    maps = st.session_state.get("mappings", {})
    matches = sheets & set(primaries)

    if len(matches) < 2:
        st.markdown(
            f"""
            <div style="
                background-color: #FFF0F0;
                border-left: 6px solid #E53935;
                padding: 16px;
                border-radius: 8px;
                margin-bottom: 24px;
            ">
            <p style="margin:0 0 8px 0;
                        font-size:1.1rem;
                        font-weight:600;
                        color:#B71C1C;">
                ❗ Insufficient Material Tabs
            </p>
            <p style="margin:0 0 12px 0; color:#333;">
                Only {len(matches)} of the primary materials 
                <code>{sorted(primaries)}</code>
                were found in your uploaded file’s sheets&nbsp;
                <code>{sorted(sheets)}</code>.
            </p>
            <ul style="margin:0 0 0 16px; padding:0; color:#333;">
                <li>Please select the correct work package.</li>
                <li>Or upload an Excel with at least two of those primary materials as sheet names.</li>
            </ul>
            </div>
            """,
            unsafe_allow_html=True,
        )
        return
    
    material_system_results(    pms, maps, compute_only=True )
    base_case_comparison(compute_only=True)
    total_work_calculation(compute_only=True)
    extended_project(compute_only=True)
    
    df = st.session_state.get("df_totals", pd.DataFrame())
    if df.empty:
        st.error("No system data — please complete Steps 1–5.")
        return

    # 2) Pull context
    total_qty = st.session_state["total_qty"]
    unit      = st.session_state.get("declared_unit", "sqm")
    project   = st.session_state.get("project_name", "")
    
    ee_col    = f"EE (MJ/{unit})"
    ec_col    = f"EC (kg CO₂eq./{unit})"

    dark2 = px.colors.qualitative.Dark2
    cmap  = {pm: dark2[i % len(dark2)] for i, pm in enumerate(df["Primary"].unique())}
    
    # 4) Begin the single bordered canvas
    st.markdown('<div class="canvas">', unsafe_allow_html=True)

    # ─── Top bar
    cols = st.columns([3,3,2], gap="small")
    for col, txt, bg in zip(cols,
                            [f"Project: {project}", f"Work Package: {wp}", f"# Systems: {df['System'].nunique()}"],
                            [dark2[0], dark2[1], dark2[2]]):
        col.markdown(
            f'<div class="top-label" style="background:{bg}">{txt}</div>',
            unsafe_allow_html=True
        )

    # ─── Materials + Quantity
    st.markdown('<div class="card">', unsafe_allow_html=True)
    mat_col, qty_col = st.columns([4,1], gap="small")
    with mat_col:
        selected = st.multiselect("Primary Materials:", options=pms, default=pms, key="canvas_pm")
    with qty_col:
        total_qty = st.number_input(
            f"Quantity ({unit}):",
            min_value=1.0, step=1.0,
            key="total_qty"
        )
    st.markdown('</div>', unsafe_allow_html=True)

    # 3) Compute totals
    total_qty = st.session_state["total_qty"]
    df["Total EE (GJ)"] = df[f"EE (MJ/{unit})"] * total_qty / 1000
    df["Total EC (tCO₂)"] = df[f"EC (kg CO₂eq./{unit})"] * total_qty / 1000

    df = df[df["Primary"].isin(selected)]

    # ─── Total EE & EC bars
    st.markdown('<div class="card">', unsafe_allow_html=True)
    b1, b2 = st.columns(2, gap="small")
    with b1:
        st.plotly_chart(
            px.bar(df, x="System", y="Total EE (GJ)",
                   color="Primary", color_discrete_map=cmap,
                   title="Total Embodied Energy (GJ)",
                   template="plotly_white"),
            use_container_width=True
        )
    with b2:
        st.plotly_chart(
            px.bar(df, x="System", y="Total EC (tCO₂)",
                   color="Primary", color_discrete_map=cmap,
                   title="Total Embodied Carbon (tCO₂)",
                   template="plotly_white"),
            use_container_width=True
        )
    st.markdown('</div>', unsafe_allow_html=True)

    df1_ee = st.session_state.get("df1_sorted_ee", pd.DataFrame())
    df1_ec = st.session_state.get("df1_sorted_ec", pd.DataFrame())
    df2_ee = st.session_state.get("df2_sorted_ee", pd.DataFrame())
    df2_ec = st.session_state.get("df2_sorted_ec", pd.DataFrame())
    table_slot = st.empty()

    if st.button("📊 View Detailed Tables"):
    # when clicked, fill the placeholder with an expander + tabs
        with table_slot.expander("🔎 Quick Table Views", expanded=True):
            if st.button("✖ Close Tables"):
                table_slot.empty()
            tabs = st.tabs([
                "⚡ Case 1 EE",
                "🌿 Case 1 EC",
                "⚡ Case 2 EE",
                "🌿 Case 2 EC",
            ])
            with tabs[0]:
                st.subheader("Case 1 – sorted by EE")
                st.dataframe(df1_ee, use_container_width=True)
            with tabs[1]:
                st.subheader("Case 1 – sorted by EC")
                st.dataframe(df1_ec, use_container_width=True)
            with tabs[2]:
                st.subheader("Case 2 – sorted by EE")
                st.dataframe(df2_ee, use_container_width=True)
            with tabs[3]:
                st.subheader("Case 2 – sorted by EC")
                st.dataframe(df2_ec, use_container_width=True)
    
    if not df.empty and "DisplayName" in df.columns:
        ee_col = f"EE (MJ/{unit})"
        ec_col = f"EC (kg CO₂eq./{unit})"

        st.markdown("### Quick recommendation", unsafe_allow_html=True)

        ee_strip = draw_horizontal_heat_strip(df, ee_col,
                        " Embodied Energy", "Blues")
        ec_strip = draw_horizontal_heat_strip(df, ec_col,
                        " Embodied Carbon", "Greens")

        st.plotly_chart(ee_strip, use_container_width=True)
        st.plotly_chart(ec_strip, use_container_width=True)
        
        recs = (
            df.groupby("DisplayName")[[ee_col, ec_col]]
            .sum()
            .reset_index()
        )
        recs["score"] = recs[ee_col] + recs[ec_col]

        # pick best/worst
        ee_best  = recs.loc[recs[ee_col].idxmin(), "DisplayName"]
        ec_best  = recs.loc[recs[ec_col].idxmin(), "DisplayName"]
        ee_worst = recs.loc[recs[ee_col].idxmax(), "DisplayName"]
        ec_worst = recs.loc[recs[ec_col].idxmax(), "DisplayName"]
        both_best = (recs
            .assign(rank_sum=lambda d: d[ee_col].rank() + d[ec_col].rank())
            .nsmallest(1, "rank_sum")["DisplayName"]
            .iat[0]
        )

        # ultra-compact summary
        st.markdown("## Preferred & Cautionary Picks", unsafe_allow_html=True)

        # Row 1: best EE & EC
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("""
            <div style="
                background:#E8F5E9;
                border:1px solid #C8E6C9;
                border-radius:8px;
                padding:16px;
                text-align:center;
            ">
                <h4 style="margin:0; color:#2E7D32;">⚡️ Energy-Efficient System</h4>
                <p style="margin:8px 0 0; font-weight:600;">{ee_best}</p>
            </div>
            """.format(ee_best=ee_best), unsafe_allow_html=True)
        with col2:
            st.markdown("""
            <div style="
                background:#E3F2FD;
                border:1px solid #BBDEFB;
                border-radius:8px;
                padding:16px;
                text-align:center;
            ">
                <h4 style="margin:0; color:#1565C0;">🌍 Emission-Saver System</h4>
                <p style="margin:8px 0 0; font-weight:600;">{ec_best}</p>
            </div>
            """.format(ec_best=ec_best), unsafe_allow_html=True)

        st.markdown("")

        # Row 2: worst EE & EC
        col3, col4 = st.columns(2)
        with col3:
            st.markdown("""
            <div style="
                background:#FFEBEE;
                border:1px solid #FFCDD2;
                border-radius:8px;
                padding:16px;
                text-align:center;
            ">
                <h4 style="margin:0; color:#C62828;">⚠️ Highest-Impact (EE)</h4>
                <p style="margin:8px 0 0; font-weight:600;">{ee_worst}</p>
            </div>
            """.format(ee_worst=ee_worst), unsafe_allow_html=True)
        with col4:
            st.markdown("""
            <div style="
                background:#FFF8E1;
                border:1px solid #FFECB3;
                border-radius:8px;
                padding:16px;
                text-align:center;
            ">
                <h4 style="margin:0; color:#EF6C00;">⚠️ Highest-Impact (EC)</h4>
                <p style="margin:8px 0 0; font-weight:600;">{ec_worst}</p>
            </div>
            """.format(ec_worst=ec_worst), unsafe_allow_html=True)

        st.markdown("---")

        # Final single‐line “Preferred Sustainable System”
        st.markdown(f"""
        <div style="
            background:#F1F8E9;
            border-left:4px solid #8BC34A;
            padding:12px 16px;
            border-radius:4px;
            font-size:1.1rem;
        ">
        🌱 <strong>Preferred Sustainable System:</strong> {both_best}
        </div>
        """, unsafe_allow_html=True)
    else:
        st.info("Run through Steps 1–5 to unlock impact heat strips.")

    # ─── Base vs Compare
    st.markdown('<div class="card">', unsafe_allow_html=True)
    bc, cc = st.columns(2, gap="small")
    with bc:
        base = st.selectbox("Base-Case System:",    df["DisplayName"], key="canvas_base")
    with cc:
        comp = st.selectbox("Compare-Case System:", df["DisplayName"], key="canvas_compare")
    st.markdown('</div>', unsafe_allow_html=True)
    
    try:
        brow = df.loc[df["DisplayName"] == base].iloc[0]
    except IndexError:
        st.error(
            f"❗ No row with DisplayName == “{base}” was found.  "
            "Check your mapping/excel and chosen work package."
        )
        return

    brow    = df.loc[df["DisplayName"] == base].iloc[0]
    crow    = df.loc[df["DisplayName"] == comp].iloc[0]
    delta_ee = crow["Total EE (GJ)"] - brow["Total EE (GJ)"]
    delta_ec = crow["Total EC (tCO₂)"] - brow["Total EC (tCO₂)"]
    pct_ee   = (delta_ee / brow["Total EE (GJ)"] * 100) if brow["Total EE (GJ)"] else 0
    pct_ec   = (delta_ec / brow["Total EC (tCO₂)"] * 100) if brow["Total EC (tCO₂)"] else 0

    def fmt_raw(v):
        """No sign for raw numbers: one decimal if 0<|v|<1, else integer."""
        if abs(v) < 1:
            return f"{v:.1f}"
        else:
            return f"{v:.0f}"

    def fmt_signed(v):
        """Always show +/– and integer (we only use this for the delta absolute)."""
        return f"{v:+.0f}"

    def fmt_pct(v, base):
        """Compute percent = v/base*100; always show +/–, integer, and %."""
        if base == 0:
            return "0%"
        p = v / base * 100
        if abs(p) < 1:
            return f"{p:+.1f}%"
        else:
            return f"{p:+.0f}%"

    base_ee_str      = fmt_raw(brow["Total EE (GJ)"])
    base_ec_str      = fmt_raw(brow["Total EC (tCO₂)"])
    compare_ee_str   = fmt_raw(crow["Total EE (GJ)"])
    compare_ec_str   = fmt_raw(crow["Total EC (tCO₂)"])

    delta_ee_abs_str = fmt_signed(delta_ee)
    delta_ec_abs_str = fmt_signed(delta_ec)
    delta_ee_pct_str = fmt_pct(delta_ee, brow["Total EE (GJ)"])
    delta_ec_pct_str = fmt_pct(delta_ec, brow["Total EC (tCO₂)"])

    delta_ee_combined = f"{delta_ee_abs_str} ({delta_ee_pct_str})"
    delta_ec_combined = f"{delta_ec_abs_str} ({delta_ec_pct_str})"

    st.markdown('<div class="card">', unsafe_allow_html=True)
    m1, m2, m3, m4 = st.columns(4, gap="small")

    m1.metric("Base EE (GJ)",  base_ee_str)
    m2.metric("Base EC (tCO₂)", base_ec_str)
    m3.metric(
        "Compare EE (GJ)",
        compare_ee_str,
        delta=delta_ee_combined,
        delta_color="inverse"
    )
    m4.metric(
        "Compare EC (tCO₂)",
        compare_ec_str,
        delta=delta_ec_combined,
        delta_color="inverse"
    )
    st.markdown('</div>', unsafe_allow_html=True)

    # ─── % Change bars
    df["EE Change (%)"] = (df["Total EE (GJ)"] - brow["Total EE (GJ)"]) / brow["Total EE (GJ)"] * 100
    df["EC Change (%)"] = (df["Total EC (tCO₂)"] - brow["Total EC (tCO₂)"]) / brow["Total EC (tCO₂)"] * 100

    st.markdown('<div class="card">', unsafe_allow_html=True)
    t1, t2 = st.columns(2, gap="small")
    with t1:
        st.plotly_chart(
            px.bar(df, x="System", y="EE Change (%)",
                   color="Primary", color_discrete_map=cmap,
                   title="EE % Change vs Base", template="plotly_white"),
            use_container_width=True
        )
    with t2:
        st.plotly_chart(
            px.bar(df, x="System", y="EC Change (%)",
                   color="Primary", color_discrete_map=cmap,
                   title="EC % Change vs Base", template="plotly_white"),
            use_container_width=True
        )
    st.markdown('</div>', unsafe_allow_html=True)

    # ─── Pie charts
    st.markdown('<div class="card">', unsafe_allow_html=True)
    mode = st.selectbox(
        "How to calculate project overall EE & EC?",
        ["Single total", "Multiple items"],
        key="canvas_ext_mode"
    )

    user_items = []
    if mode == "Single total":
        rest_ee = st.number_input(
            "Project EE (GJ) excl. this work:",
            min_value=0.0, value=0.0, step=1.0, key="canvas_rest_ee"
        )
        rest_ec = st.number_input(
            "Project EC (TonCO₂ eq.) excl. this work:",
            min_value=0.0, value=0.0, step=1.0, key="canvas_rest_ec"
        )
        user_items = [
            {"Name": "Rest of Project", "EE (GJ)": rest_ee, "EC (TonCO₂ eq.)": rest_ec}
        ]
    else:
        n = st.number_input(
            "Number of additional items:",
            min_value=1, max_value=10, value=1, step=1, key="canvas_ext_n"
        )

        # single header row
        hdr_name, hdr_ee, hdr_ec = st.columns([2, 1, 1], gap="small")
        hdr_name.markdown("**Name**")
        hdr_ee.markdown("**EE (GJ)**")
        hdr_ec.markdown("**EC (TonCO₂ eq.)**")

        # one row per item
        for i in range(int(n)):
            c0, c1, c2 = st.columns([2, 1, 1], gap="small")
            name = c0.text_input(
                label=f"", 
                placeholder=f"Item {i+1} name",
                key=f"canvas_ext_name_{i}"
            )
            ee = c1.number_input(
                label="",
                min_value=0.0, value=0.0, step=1.0,
                key=f"canvas_ext_ee_{i}"
            )
            ec = c2.number_input(
                label="",
                min_value=0.0, value=0.0, step=1.0,
                key=f"canvas_ext_ec_{i}"
            )
            user_items.append({
                "Name": name.strip() or f"Item {i+1}",
                "EE (GJ)": ee,
                "EC (TonCO₂ eq.)": ec
            })
    df_pie = pd.DataFrame(user_items)
    crow = df.loc[df["DisplayName"] == comp].iloc[0]
    chosen_slice = pd.DataFrame([{
        "Name":            f"Chosen System: {crow['System']}",
        "EE (GJ)":         crow["Total EE (GJ)"],
        "EC (TonCO₂ eq.)": crow["Total EC (tCO₂)"]
    }])
    df_pie = pd.concat([df_pie, chosen_slice], ignore_index=True)
    p1, p2 = st.columns(2, gap="small")
    with p1:
        fig_ee_pie = px.pie(
            df_pie,
            names="Name",
            values="EE (GJ)",
            title="EE Breakdown (GJ)",
            template="plotly_white"
        )
        st.plotly_chart(fig_ee_pie, use_container_width=True)

    with p2:
        fig_ec_pie = px.pie(
            df_pie,
            names="Name",
            values="EC (TonCO₂ eq.)",
            title="EC Breakdown (TonCO₂ eq.)",
            template="plotly_white"
        )
        st.plotly_chart(fig_ec_pie, use_container_width=True)

    st.markdown('</div>', unsafe_allow_html=True)

    col1, col2 = st.columns(2)
    if col1.button("← Previous"):
        st.session_state.page = 3
    if col2.button("Finish"):
        st.success("🎉 All done!")

###############################################################################
# 9) Sidebar – Predefined Mapping Configuration
###############################################################################
with st.sidebar.expander("Predefined Mapping Configuration", expanded=False):
    st.write("Below is the default or last-uploaded pre-defined systems file.")

    # 1) Ensure we have "mapping_file" in session_state
    if "mapping_file" not in st.session_state:
        # Initialize to the embedded default
        st.session_state["mapping_file"] = BytesIO(DEFAULT_MAPPING)

    # 2) Provide a download button for the current file in memory
    if st.session_state["mapping_file"] is not None:
        st.download_button(
            label="Download Mapping File",
            data=st.session_state["mapping_file"].getvalue(),
            file_name="Pre-defined systems.xlsx",
            key="download_mapping_file"
        )

    # 3) Let user upload a new file to override
    uploaded_mapping = st.file_uploader(
        "Re-upload Updated Mapping Excel File:",
        type=["xlsx"],
        key="mapping_upload"
    )
    if uploaded_mapping is not None:
        st.session_state["mapping_file"] = BytesIO(uploaded_mapping.getvalue())
        st.success("Using your newly uploaded mapping file for this session.")
    else:
        st.info("Currently using the embedded default or the last uploaded file.")

    # 4) Attempt to read the "Packages" sheet from the current file
    mapping_file = st.session_state["mapping_file"]
    if mapping_file is not None:
        try:
            mapping_xl = pd.ExcelFile(mapping_file)
            if "Packages" in mapping_xl.sheet_names:
                df_packages = pd.read_excel(mapping_file, sheet_name="Packages", header=None)
                # Work packages in col B from row 4 => row=3
                work_packages = df_packages.iloc[3:, 1].dropna().astype(str).tolist()

                # Present them as a bulleted list instead of raw Python list
                if work_packages:
                    st.markdown("**Available Work Packages:**")
                    for pkg in work_packages:
                        st.markdown(f"- {pkg}")
                else:
                    st.warning("No work packages found in 'Packages' sheet.")

            else:
                work_packages = None
                st.warning("No 'Packages' sheet found in the mapping file.")
        except Exception as e:
            st.error(f"Error reading mapping file: {e}")
            work_packages = None
    else:
        st.warning("No mapping file found or uploaded.")
        work_packages = None

# ─── 4) Sidebar “User Manual” ────────────────────────────────────────────────────
with st.sidebar.expander("📖 User Manual", expanded=False):
    st.markdown("""
    **How to use this dashboard**  
    1. **Step 1**: Upload your Excel with material EE/EC data.  
    2. **Step 2**: Fill in project name, area, location & pick a Work Package.  
    3. **Step 3**: (Auto) generate all system alternatives.  
    4. **Step 4**: Select a base system and compare others.  
    5. **Step 5**: Enter total qty (sqm) to get project‐level totals.  
    6. **Step 6**: (Optional) Add other project items and see pie charts.  

    _Tips:_  
    - Hover over any label to see more info.  
    - You can re‐collapse this panel at any time.  
    """)
       
    
if "page" not in st.session_state:
    st.session_state.page = 0

if   st.session_state.page == 0:
    landing_page()
    if st.button("Next →"):
        st.session_state.page = 1

elif st.session_state.page == 1:
    project_details_page()
    
elif st.session_state.page == 2:
    upload_page()
    
elif st.session_state.page == 3:
    override_page()               

elif st.session_state.page == 4:   
    display_canvas_dashboard()
